
==================== FINAL INTERFACE ====================
2019-10-16 14:36:20.292634 UTC

interface battlefield-0.1.0.0-8CmZqnTevv4DQlKkYwSBkE:Types 8065
  interface hash: 17eab30b061e1cabd2bd374076625968
  ABI hash: f76ea1dd1d2c4fe47575f93bbf95bb77
  export-list hash: c99b08131a958b98eccb97272359a95d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.defaultCard
  Types.messageSize
  Types.Card{Types.Card}
  Types.Changes{Types.Changes}
  Types.ClientState{Types.ClientState}
  Types.Combo{Types.Batallion Types.Host Types.Phalanx Types.Skirmish Types.Wedge}
  Types.Command{Types.EmptyCommand Types.Put Types.Take Types.Win}
  Types.Field{Types.Field}
  Types.FieldState{Types.Closed Types.Open}
  Types.Player{Types.One Types.Two}
  Types.StateChanges{Types.FieldClosed Types.NewCard Types.Winner}
  Types.Suit{Types.Black Types.Blue Types.Green Types.Red Types.White Types.Yellow}
  Types.Turn{Types.FinishTurn Types.PutCard Types.TakeCard}
  Types.TurnState{Types.EmptyState Types.GameFinished Types.PutCardTurn}
  Types.World{Types.World}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 network-2.8.0.1 word8-0.1.3
orphans: network-2.8.0.1:Network.Socket
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  binary-0.8.6.0:Data.Binary 47a89cefaa44e49e7fd21d133fce6a7e
import  -/  binary-0.8.6.0:Data.Binary.Class 4a00b809573ad7c27e489f5b66886719
import  -/  binary-0.8.6.0:Data.Binary.Get.Internal d7b46ac8c27f3f91b18a28c57f9c8589
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  network-2.8.0.1:Network.Socket 2fb10212ee6ec3cda4f5f95de27378a3
import  -/  network-2.8.0.1:Network.Socket.Types b396f655f8272982c962f65e0eb004e1
import  -/  word8-0.1.3:Data.Word8 4c659cf945933bcecaaee8b1e623c7ae
2eddaddf45f0295f5fbfbba779a9e7e1
  $fBinaryCard :: Data.Binary.Class.Binary Types.Card
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card
                  Types.$fBinaryCard_$cput
                  Types.$fBinaryCard1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Card>_R))
                  Types.$fBinaryCard_$sdefaultPutList -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fBinaryCard1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Card r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Card r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fBinaryCard_$cput :: Types.Card -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U(U))>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fBinaryCard_$sdefaultPutList ::
    [Types.Card] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Card]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Card
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Card)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Card
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryCard_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Card]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
515356681dafb1bc1613cb131376071f
  $fBinaryChanges :: Data.Binary.Class.Binary Types.Changes
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes
                  Types.$fBinaryChanges_$cput
                  Types.$fBinaryChanges1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Changes>_R))
                  Types.$fBinaryChanges_$sdefaultPutList -}
515356681dafb1bc1613cb131376071f
  $fBinaryChanges1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Changes r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Changes r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
515356681dafb1bc1613cb131376071f
  $fBinaryChanges_$cput :: Types.Changes -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Changes) ->
                 case ds of wild { Types.Changes c ->
                 Types.$fBinaryChanges_$sdefaultPutList1 c }) -}
5043523029050ca061da751fab5b88a6
  $fBinaryChanges_$cput1 :: Types.StateChanges -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.StateChanges) ->
                 case Types.$w$cput1 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
515356681dafb1bc1613cb131376071f
  $fBinaryChanges_$sdefaultPutList ::
    [Types.Changes] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Changes]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Changes
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Changes)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Changes
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryChanges_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Changes]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
5043523029050ca061da751fab5b88a6
  $fBinaryChanges_$sdefaultPutList1 ::
    [Types.StateChanges] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.StateChanges]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.StateChanges
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.StateChanges)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.StateChanges
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryChanges_$cput1
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.StateChanges]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
b3ed86649415f10276c18bbf46384874
  $fBinaryCommand :: Data.Binary.Class.Binary Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command
                  Types.$fBinaryCommand_$cput
                  Types.$fBinaryCommand3
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Command>_R))
                  Types.$fBinaryCommand_$sdefaultPutList -}
443e1a7ff1bb42ef64073534914a93b4
  $fBinaryCommand1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl @ r w ww1 ww2 w2 }) -}
969e0e9a5ada5149629a4a936287c380
  $fBinaryCommand2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl1 @ r w ww1 ww2 w2 }) -}
b3ed86649415f10276c18bbf46384874
  $fBinaryCommand3 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Command r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Command r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
6cffb9bad13c6cb833e46171af0230a8
  $fBinaryCommand4 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail @ r dt Types.$fBinaryCommand5 }) -}
515688c917442998d18564c4593a9190
  $fBinaryCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fBinaryCommand6) -}
8feb5ca85577aa8541f4da1a89b26006
  $fBinaryCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
1009d0acd615f7b7362bbc8da12538f9
  $fBinaryCommand7 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
c9f14ee6388c8bf7233279ed6092fb70
  $fBinaryCommand8 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt3 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt3))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
bc449561fa84617293821c1e3d02a738
  $fBinaryCommand9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
b3ed86649415f10276c18bbf46384874
  $fBinaryCommand_$cput :: Types.Command -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Command) ->
                 case Types.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
b3ed86649415f10276c18bbf46384874
  $fBinaryCommand_$sdefaultPutList ::
    [Types.Command] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Command]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Command
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Command)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Command
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryCommand_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Command]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
084e809b613707d9daac3e7dc5838ec3
  $fBinaryPlayer :: Data.Binary.Class.Binary Types.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fBinaryPlayer_$cput
                  Types.$fBinaryPlayer5
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Player>_R))
                  Types.$fBinaryPlayer_$sdefaultPutList -}
d83b69316384b5ac584251122071dbe7
  $fBinaryPlayer1 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Types.$fBinaryPlayer2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
7ebb7b8d7d1bf5985c7cfd10dacd8b66
  $fBinaryPlayer2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl2 @ r w ww1 ww2 w2 }) -}
1022ead81d03932504db6618f9f1e1e8
  $fBinaryPlayer3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Types.$fBinaryPlayer4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
3b9d26ac06773bee9dc8aa6a38c9df79
  $fBinaryPlayer4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl3 @ r w ww1 ww2 w2 }) -}
084e809b613707d9daac3e7dc5838ec3
  $fBinaryPlayer5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Player r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Player r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
084e809b613707d9daac3e7dc5838ec3
  $fBinaryPlayer_$cput :: Types.Player -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Player) ->
                 case ds of wild {
                   Types.One
                   -> Types.$fBinaryPlayer3
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Types.Two
                   -> Types.$fBinaryPlayer1
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
084e809b613707d9daac3e7dc5838ec3
  $fBinaryPlayer_$sdefaultPutList ::
    [Types.Player] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Player]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Player
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Player)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Player
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryPlayer_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Player]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
5043523029050ca061da751fab5b88a6
  $fBinaryStateChanges :: Data.Binary.Class.Binary Types.StateChanges
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fBinaryChanges_$cput1
                  Types.$fBinaryStateChanges1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.StateChanges>_R))
                  Types.$fBinaryChanges_$sdefaultPutList1 -}
5043523029050ca061da751fab5b88a6
  $fBinaryStateChanges1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.StateChanges r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.StateChanges r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fBinaryTurn :: Data.Binary.Class.Binary Types.Turn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn
                  Types.$fBinaryTurn_$cput
                  Types.$fBinaryTurn1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Turn>_R))
                  Types.$fBinaryTurn_$sdefaultPutList -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fBinaryTurn1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Turn r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Turn r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fBinaryTurn_$cput :: Types.Turn -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Turn) ->
                 case Types.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fBinaryTurn_$sdefaultPutList ::
    [Types.Turn] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Turn]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Turn
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Turn)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Turn
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryTurn_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Turn]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fEqCard :: GHC.Classes.Eq Types.Card
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card Types.$fEqCard_$c== Types.$fEqCard_$c/= -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fEqCard_$c/= :: Types.Card -> Types.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Card) (y :: Types.Card) ->
                 case Types.$fEqCard_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fEqCard_$c== :: Types.Card -> Types.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Card) (w1 :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 case w1 of ww3 { Types.Card ww4 ww5 ->
                 Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
515356681dafb1bc1613cb131376071f
  $fEqChanges :: GHC.Classes.Eq Types.Changes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes Types.$fEqChanges_$c== Types.$fEqChanges_$c/= -}
515356681dafb1bc1613cb131376071f
  $fEqChanges_$c/= ::
    Types.Changes -> Types.Changes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Changes) (y :: Types.Changes) ->
                 case x of wild { Types.Changes a1 ->
                 case y of wild1 { Types.Changes b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.StateChanges
                        Types.$fEqStateChanges
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
515356681dafb1bc1613cb131376071f
  $fEqChanges_$c== ::
    Types.Changes -> Types.Changes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Changes) (ds1 :: Types.Changes) ->
                 case ds of wild { Types.Changes a1 ->
                 case ds1 of wild1 { Types.Changes b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Types.StateChanges
                   Types.$fEqStateChanges
                   a1
                   b1 } }) -}
586c146c5067841fed3bfc4158a846ed
  $fEqClientState :: GHC.Classes.Eq Types.ClientState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.ClientState
                  Types.$fEqClientState_$c==
                  Types.$fEqClientState_$c/= -}
586c146c5067841fed3bfc4158a846ed
  $fEqClientState_$c/= ::
    Types.ClientState -> Types.ClientState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.ClientState) (y :: Types.ClientState) ->
                 case Types.$fEqClientState_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
586c146c5067841fed3bfc4158a846ed
  $fEqClientState_$c== ::
    Types.ClientState -> Types.ClientState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.ClientState) (w1 :: Types.ClientState) ->
                 case w of ww { Types.ClientState ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Types.ClientState ww7 ww8 ww9 ww10 ww11 ->
                 Types.$w$c==1 ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fEqClientState_$c==1 ::
    Types.TurnState -> Types.TurnState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.TurnState) (ds1 :: Types.TurnState) ->
                 case ds of wild {
                   Types.PutCardTurn a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PutCardTurn b1
                        -> case a1 of wild2 {
                             GHC.Maybe.Nothing
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.True
                                  GHC.Maybe.Just ipv -> GHC.Types.False }
                             GHC.Maybe.Just a2
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.False
                                  GHC.Maybe.Just b2 -> Types.$fEqCard_$c== a2 b2 } } }
                   Types.EmptyState
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.EmptyState -> GHC.Types.True }
                   Types.GameFinished a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.GameFinished b1 -> Types.$fEqStateChanges_$c==1 a1 b1 } }) -}
388233bee3b11c60d120bec3b23e9393
  $fEqCombo :: GHC.Classes.Eq Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo Types.$fEqCombo_$c== Types.$fEqCombo_$c/= -}
388233bee3b11c60d120bec3b23e9393
  $fEqCombo_$c/= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fEqCombo_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
388233bee3b11c60d120bec3b23e9393
  $fEqCombo_$c== :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Combo) (ds1 :: Types.Combo) ->
                 case ds of wild {
                   Types.Host a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Host b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Skirmish a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Skirmish b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Batallion a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Batallion b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Phalanx a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Phalanx b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Wedge a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Wedge b1 -> GHC.Classes.eqInt a1 b1 } }) -}
b3ed86649415f10276c18bbf46384874
  $fEqCommand :: GHC.Classes.Eq Types.Command
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command Types.$fEqCommand_$c== Types.$fEqCommand_$c/= -}
b3ed86649415f10276c18bbf46384874
  $fEqCommand_$c/= ::
    Types.Command -> Types.Command -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Command) (y :: Types.Command) ->
                 case x of wild {
                   Types.Put
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Put -> GHC.Types.False }
                   Types.Take a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.Take b1
                        -> case Types.$fEqCard_$c== a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Types.Win a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.Win b1
                        -> case a1 of wild2 {
                             Types.One
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                             Types.Two
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } } }
                   Types.EmptyCommand
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.EmptyCommand -> GHC.Types.False } }) -}
b3ed86649415f10276c18bbf46384874
  $fEqCommand_$c== ::
    Types.Command -> Types.Command -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Command) (ds1 :: Types.Command) ->
                 case ds of wild {
                   Types.Put
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Put -> GHC.Types.True }
                   Types.Take a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Take b1 -> Types.$fEqCard_$c== a1 b1 }
                   Types.Win a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Win b1 -> Types.$fEqStateChanges_$c==1 a1 b1 }
                   Types.EmptyCommand
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.EmptyCommand -> GHC.Types.True } }) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fEqField :: GHC.Classes.Eq Types.Field
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Field Types.$fEqField_$c== Types.$fEqField_$c/= -}
f12da4d7d8e72658efbb06ea080c6269
  $fEqFieldState :: GHC.Classes.Eq Types.FieldState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.FieldState
                  Types.$fEqField_$c==1
                  Types.$fEqFieldState_$c/= -}
f12da4d7d8e72658efbb06ea080c6269
  $fEqFieldState_$c/= ::
    Types.FieldState -> Types.FieldState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.FieldState) (y :: Types.FieldState) ->
                 case x of wild {
                   Types.Closed a1
                   -> case y of wild1 {
                        Types.Closed b1
                        -> case a1 of wild2 {
                             Types.One
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                             Types.Two
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } }
                        Types.Open -> GHC.Types.True }
                   Types.Open
                   -> case y of wild1 {
                        Types.Closed ipv -> GHC.Types.True
                        Types.Open -> GHC.Types.False } }) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fEqField_$c/= :: Types.Field -> Types.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Field) (y :: Types.Field) ->
                 case Types.$fEqField_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fEqField_$c== :: Types.Field -> Types.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Field) (w1 :: Types.Field) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Field ww5 ww6 ww7 ->
                 Types.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
f12da4d7d8e72658efbb06ea080c6269
  $fEqField_$c==1 ::
    Types.FieldState -> Types.FieldState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.FieldState) (ds1 :: Types.FieldState) ->
                 case ds of wild {
                   Types.Closed a1
                   -> case ds1 of wild1 {
                        Types.Closed b1 -> Types.$fEqStateChanges_$c==1 a1 b1
                        Types.Open -> GHC.Types.False }
                   Types.Open
                   -> case ds1 of wild1 {
                        Types.Closed ipv -> GHC.Types.False
                        Types.Open -> GHC.Types.True } }) -}
084e809b613707d9daac3e7dc5838ec3
  $fEqPlayer :: GHC.Classes.Eq Types.Player
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fEqStateChanges_$c==1
                  Types.$fEqPlayer_$c/= -}
084e809b613707d9daac3e7dc5838ec3
  $fEqPlayer_$c/= :: Types.Player -> Types.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Player) (y :: Types.Player) ->
                 case x of wild {
                   Types.One
                   -> case y of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                   Types.Two
                   -> case y of wild1 {
                        Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } }) -}
5043523029050ca061da751fab5b88a6
  $fEqStateChanges :: GHC.Classes.Eq Types.StateChanges
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fEqStateChanges_$c==
                  Types.$fEqStateChanges_$c/= -}
5043523029050ca061da751fab5b88a6
  $fEqStateChanges_$c/= ::
    Types.StateChanges -> Types.StateChanges -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.StateChanges) (y :: Types.StateChanges) ->
                 case Types.$fEqStateChanges_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5043523029050ca061da751fab5b88a6
  $fEqStateChanges_$c== ::
    Types.StateChanges -> Types.StateChanges -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.StateChanges)
                   (ds1 :: Types.StateChanges) ->
                 case ds of wild {
                   Types.NewCard a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.NewCard b1 b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a2 of wild4 {
                                  Types.One
                                  -> case b2 of wild5 {
                                       Types.One -> Types.$fEqCard_$c== a3 b3
                                       Types.Two -> GHC.Types.False }
                                  Types.Two
                                  -> case b2 of wild5 {
                                       Types.One -> GHC.Types.False
                                       Types.Two -> Types.$fEqCard_$c== a3 b3 } } } } } }
                   Types.FieldClosed a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FieldClosed b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1# -> Types.$fEqStateChanges_$c==1 a2 b2 } } } }
                   Types.Winner a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Winner b1 -> Types.$fEqStateChanges_$c==1 a1 b1 } }) -}
084e809b613707d9daac3e7dc5838ec3
  $fEqStateChanges_$c==1 ::
    Types.Player -> Types.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Player) (ds1 :: Types.Player) ->
                 case ds of wild {
                   Types.One
                   -> case ds1 of wild1 {
                        Types.One -> GHC.Types.True Types.Two -> GHC.Types.False }
                   Types.Two
                   -> case ds1 of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> GHC.Types.True } }) -}
af79efce59a770f994dca4817077d740
  $fEqSuit :: GHC.Classes.Eq Types.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Suit Types.$fEqSuit_$c== Types.$fEqSuit_$c/= -}
af79efce59a770f994dca4817077d740
  $fEqSuit_$c/= :: Types.Suit -> Types.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Suit) (y :: Types.Suit) ->
                 case x of wild {
                   Types.Red
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Red -> GHC.Types.False }
                   Types.Blue
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Blue -> GHC.Types.False }
                   Types.Yellow
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Yellow -> GHC.Types.False }
                   Types.Green
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Green -> GHC.Types.False }
                   Types.White
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.White -> GHC.Types.False }
                   Types.Black
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Black -> GHC.Types.False } }) -}
af79efce59a770f994dca4817077d740
  $fEqSuit_$c== :: Types.Suit -> Types.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Suit) (ds1 :: Types.Suit) ->
                 case ds of wild {
                   Types.Red
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Red -> GHC.Types.True }
                   Types.Blue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Blue -> GHC.Types.True }
                   Types.Yellow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Yellow -> GHC.Types.True }
                   Types.Green
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Green -> GHC.Types.True }
                   Types.White
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.White -> GHC.Types.True }
                   Types.Black
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Black -> GHC.Types.True } }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fEqTurn :: GHC.Classes.Eq Types.Turn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn Types.$fEqTurn_$c== Types.$fEqTurn_$c/= -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fEqTurnState :: GHC.Classes.Eq Types.TurnState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.TurnState
                  Types.$fEqClientState_$c==1
                  Types.$fEqTurnState_$c/= -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fEqTurnState_$c/= ::
    Types.TurnState -> Types.TurnState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.TurnState) (y :: Types.TurnState) ->
                 case Types.$fEqClientState_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fEqTurn_$c/= :: Types.Turn -> Types.Turn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Turn) (y :: Types.Turn) ->
                 case Types.$fEqTurn_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fEqTurn_$c== :: Types.Turn -> Types.Turn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Turn) (ds1 :: Types.Turn) ->
                 case ds of wild {
                   Types.PutCard a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PutCard b1 b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a2 of wild4 {
                                  Types.One
                                  -> case b2 of wild5 {
                                       Types.One -> Types.$fEqCard_$c== a3 b3
                                       Types.Two -> GHC.Types.False }
                                  Types.Two
                                  -> case b2 of wild5 {
                                       Types.One -> GHC.Types.False
                                       Types.Two -> Types.$fEqCard_$c== a3 b3 } } } } } }
                   Types.FinishTurn
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.FinishTurn -> GHC.Types.True }
                   Types.TakeCard a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.TakeCard b1 -> Types.$fEqCard_$c== a1 b1 } }) -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fEqWorld :: GHC.Classes.Eq Types.World
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.World Types.$fEqWorld_$c== Types.$fEqWorld_$c/= -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fEqWorld_$c/= :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.World) (y :: Types.World) ->
                 case Types.$fEqWorld_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fEqWorld_$c== :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.World) (w1 :: Types.World) ->
                 case w of ww { Types.World ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.World ww5 ww6 ww7 ->
                 Types.$w$c==3 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo :: GHC.Classes.Ord Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo
                  Types.$fEqCombo
                  Types.$fOrdCombo_$ccompare
                  Types.$fOrdCombo_$c<
                  Types.$fOrdCombo_$c<=
                  Types.$fOrdCombo_$c>
                  Types.$fOrdCombo_$c>=
                  Types.$fOrdCombo_$cmax
                  Types.$fOrdCombo_$cmin -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$c< :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$c<= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$c> :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$c>= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$ccompare ::
    Types.Combo -> Types.Combo -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Combo) (b :: Types.Combo) ->
                 case a of wild {
                   Types.Host a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Types.Host b1 -> GHC.Classes.compareInt a1 b1 }
                   Types.Skirmish a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Types.Host ds -> GHC.Types.GT
                        Types.Skirmish b1 -> GHC.Classes.compareInt a1 b1 }
                   Types.Batallion a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Batallion ds -> GHC.Classes.compareInt a1 ds
                        Types.Phalanx ds -> GHC.Types.LT
                        Types.Wedge ds -> GHC.Types.LT }
                   Types.Phalanx a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Phalanx b1 -> GHC.Classes.compareInt a1 b1
                        Types.Wedge ds -> GHC.Types.LT }
                   Types.Wedge a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Wedge b1 -> GHC.Classes.compareInt a1 b1 } }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$cmax :: Types.Combo -> Types.Combo -> Types.Combo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
388233bee3b11c60d120bec3b23e9393
  $fOrdCombo_$cmin :: Types.Combo -> Types.Combo -> Types.Combo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fShowCard :: GHC.Show.Show Types.Card
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card
                  Types.$fShowCard_$cshowsPrec
                  Types.$fShowCard_$cshow
                  Types.$fShowCard_$cshowList -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fShowCard1 :: Types.Card -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U))><L,U>,
     Unfolding: (\ (w :: Types.Card) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 Types.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
af68a716dfc5b52152f0bd9868ac77d8
  $fShowCard10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard11) -}
c3698b0f083d977b0bb8e99f7a0ffbed
  $fShowCard11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Blue"#) -}
fbd58f62aeed6def419daea2327a5860
  $fShowCard12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard13) -}
03dab001c2e6ae88717acd0a79db0479
  $fShowCard13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Red"#) -}
8139449941af72be7c2585c54058e188
  $fShowCard14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Card "#) -}
bcbbe0e6f04f7cf6681ca1cbccb9ede2
  $fShowCard2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard3) -}
d2a6c8a75afed3022bc27b34b7c300e1
  $fShowCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Black"#) -}
6d6fdffa8c7564de1e074e6976b35661
  $fShowCard4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard5) -}
3f3fa120d09b56cc3e30caa3768fecaf
  $fShowCard5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("White"#) -}
7aef1c6f167c14c6116a86a28efa7509
  $fShowCard6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard7) -}
7ac7d1a0945582efdb7fb35b1af82e44
  $fShowCard7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Green"#) -}
c1853882fa00ba66cba533074a30d328
  $fShowCard8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard9) -}
6c66e7260c71cb59ff4135d3eea0955f
  $fShowCard9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Yellow"#) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fShowCard_$cshow :: Types.Card -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 -> Types.$w$cshow ww1 ww2 }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fShowCard_$cshowList :: [Types.Card] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Card]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Card Types.$fShowCard1 ls s) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $fShowCard_$cshowsPrec ::
    GHC.Types.Int -> Types.Card -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Card)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Card ww3 ww4 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
515356681dafb1bc1613cb131376071f
  $fShowChanges :: GHC.Show.Show Types.Changes
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes
                  Types.$fShowChanges_$cshowsPrec
                  Types.$fShowChanges_$cshow
                  Types.$fShowChanges_$cshowList -}
515356681dafb1bc1613cb131376071f
  $fShowChanges1 :: Types.Changes -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Types.Changes) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Changes ww1 ->
                 Types.$w$cshowsPrec2 0# ww1 w1 }) -}
0dba87b2936f7341dec632369874fea5
  $fShowChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Changes "#) -}
f3e7690cd79a5d4d8579b1e53a3ae8d0
  $fShowChanges3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
515356681dafb1bc1613cb131376071f
  $fShowChanges_$cshow :: Types.Changes -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Changes) ->
                 Types.$fShowChanges_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
515356681dafb1bc1613cb131376071f
  $fShowChanges_$cshowList :: [Types.Changes] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Changes]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Changes Types.$fShowChanges1 ls s) -}
515356681dafb1bc1613cb131376071f
  $fShowChanges_$cshowsPrec ::
    GHC.Types.Int -> Types.Changes -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Changes)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Changes ww3 ->
                 Types.$w$cshowsPrec2 ww1 ww3 w2 } }) -}
586c146c5067841fed3bfc4158a846ed
  $fShowClientState :: GHC.Show.Show Types.ClientState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.ClientState
                  Types.$fShowClientState_$cshowsPrec2
                  Types.$fShowClientState_$cshow
                  Types.$fShowClientState_$cshowList -}
586c146c5067841fed3bfc4158a846ed
  $fShowClientState1 :: Types.ClientState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Unfolding: (\ (w :: Types.ClientState) ->
                 case w of ww { Types.ClientState ww1 ww2 ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 ww5 }) -}
de9b63053070d64008b05c2a43d5707c
  $fShowClientState10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field "#) -}
d094ddf1eaf81b32725285a55672a213
  $fShowClientState11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
acc5ed8fd22962999378b37d59e82225
  $fShowClientState12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState13) -}
7286eccee676b9ccaaa6c77283d35d71
  $fShowClientState13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Open"#) -}
468204bc4a18a5596c6e13703ebe1e01
  $fShowClientState14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState15) -}
c6583c2186bb46c6a10fddbea9bd4203
  $fShowClientState15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Closed "#) -}
1da3b8414e11eecb9bbce902602896c5
  $fShowClientState16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState17) -}
bd1d5aa7ebca93ed40673f506712384c
  $fShowClientState17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameFinished "#) -}
99cf3284ab68a0a8db8b4dbe87c2a78b
  $fShowClientState18 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState19) -}
6672c711943fa95d068a9fac5bdda42b
  $fShowClientState19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState20) -}
d1e29cce852e27638cc107863f4ea4b4
  $fShowClientState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState3) -}
df5cf57109b4d9316b379eeb1f13b83b
  $fShowClientState20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyState"#) -}
d3e97f2c91bdddd938409267fd97bfc9
  $fShowClientState21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState22) -}
450a213328be45cbf881f23ccd6f0801
  $fShowClientState22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PutCardTurn "#) -}
14a1348e63a306dfe70b18dfad3533c9
  $fShowClientState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ClientState "#) -}
4529b8a1250dc2af74dea78c81b4996d
  $fShowClientState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState5) -}
2b3fe65952f73f50b21d79b3684d238e
  $fShowClientState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
d6cf9eef8a68b28a61df1555fcb87745
  $fShowClientState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState7) -}
3814d12f1b5cad62c54dfd53f1d020ab
  $fShowClientState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("One"#) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fShowClientState8 :: Types.Field -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Types.Field) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec5 0# ww1 ww2 ww3 w1 }) -}
0aa381951a03486b1a8dcea6e9b9150b
  $fShowClientState9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState10) -}
586c146c5067841fed3bfc4158a846ed
  $fShowClientState_$cshow :: Types.ClientState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.ClientState) ->
                 Types.$fShowClientState_$cshowsPrec2
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
586c146c5067841fed3bfc4158a846ed
  $fShowClientState_$cshowList ::
    [Types.ClientState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.ClientState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.ClientState
                   Types.$fShowClientState1
                   ls
                   s) -}
f12da4d7d8e72658efbb06ea080c6269
  $fShowClientState_$cshowsPrec ::
    GHC.Types.Int -> Types.FieldState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.FieldState)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.Closed b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowClientState14
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 eta
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState14
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) })) } }
                   Types.Open
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState12 eta }) -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fShowClientState_$cshowsPrec1 ::
    GHC.Types.Int -> Types.TurnState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Types.TurnState) ->
                 case ds of wild {
                   Types.PutCardTurn b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Types.Card
                            Types.$fShowCard
                            Types.$fShowClientState11
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState21 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState21
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Types.EmptyState -> Types.$fShowClientState18
                   Types.GameFinished b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowClientState16
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 x1
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 x1 })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState16
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x1) })) } } }) -}
586c146c5067841fed3bfc4158a846ed
  $fShowClientState_$cshowsPrec2 ::
    GHC.Types.Int -> Types.ClientState -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.ClientState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.ClientState ww3 ww4 ww5 ww6 ww7 ->
                 Types.$w$cshowsPrec4 ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
388233bee3b11c60d120bec3b23e9393
  $fShowCombo :: GHC.Show.Show Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo
                  Types.$fShowCombo_$cshowsPrec
                  Types.$fShowCombo_$cshow
                  Types.$fShowCombo_$cshowList -}
388233bee3b11c60d120bec3b23e9393
  $fShowCombo1 :: Types.Combo -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Types.Combo) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec6 0# w w1) -}
388233bee3b11c60d120bec3b23e9393
  $fShowCombo_$cshow :: Types.Combo -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Combo) ->
                 Types.$fShowCombo_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
388233bee3b11c60d120bec3b23e9393
  $fShowCombo_$cshowList :: [Types.Combo] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Combo]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Combo Types.$fShowCombo1 ls s) -}
388233bee3b11c60d120bec3b23e9393
  $fShowCombo_$cshowsPrec ::
    GHC.Types.Int -> Types.Combo -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Combo)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec6 ww1 w1 w2 }) -}
b3ed86649415f10276c18bbf46384874
  $fShowCommand :: GHC.Show.Show Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command
                  Types.$fShowCommand_$cshowsPrec
                  Types.$fShowCommand_$cshow
                  Types.$fShowCommand_$cshowList -}
b3ed86649415f10276c18bbf46384874
  $fShowCommand1 :: Types.Command -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowCommand_$cshowsPrec
                   Types.$fShowChanges3) -}
c7275ee119a5c1f1218d4d8287ecc449
  $fShowCommand10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3ab7d7ecb631ae2c2948e880fa135575
  $fShowCommand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand3) -}
2b6f4dc3353c3a431dddc7e94aae0cea
  $fShowCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyCommand"#) -}
11e9ed272e865bf3114390917a3176b5
  $fShowCommand4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand5) -}
50e0afaee07ab6d1f46cb0ff3ae9bfec
  $fShowCommand5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Win "#) -}
4452e8b72f5bc612c26813cb23c824a1
  $fShowCommand6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand7) -}
217378a3a530c3f1c67b7a1310ac9f3a
  $fShowCommand7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Take "#) -}
510e7a36a9915b28f797c9825a9c8bd2
  $fShowCommand8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand9) -}
15b998eb80b1000f6e3f565213daf218
  $fShowCommand9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Put"#) -}
b3ed86649415f10276c18bbf46384874
  $fShowCommand_$cshow :: Types.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.Command) ->
                 case x of wild {
                   Types.Put -> Types.$fShowCommand8
                   Types.Take b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCommand6
                        (case b1 of wild1 { Types.Card b2 b3 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.CString.unpackAppendCString#
                              Types.$fShowCard14
                              (Types.$w$cshowsPrec1
                                 b2
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (case b3 of ww2 { GHC.Types.I# ww3 ->
                                     case GHC.Show.$wshowSignedInt
                                            11#
                                            ww3
                                            Types.$fShowCommand10 of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))) })
                   Types.Win b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCommand4
                        (case b1 of wild1 {
                           Types.One -> Types.$fShowClientState6
                           Types.Two -> Types.$fShowClientState4 })
                   Types.EmptyCommand -> Types.$fShowCommand2 }) -}
b3ed86649415f10276c18bbf46384874
  $fShowCommand_$cshowList :: [Types.Command] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Command]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Command Types.$fShowCommand1 ls s) -}
b3ed86649415f10276c18bbf46384874
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int -> Types.Command -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Command)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.Put -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCommand8 eta
                   Types.Take b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCommand6
                             (case b1 of ww { Types.Card ww1 ww2 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCommand6
                                (case b1 of ww { Types.Card ww1 ww2 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta) })) } }
                   Types.Win b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCommand4
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 eta
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCommand4
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) })) } }
                   Types.EmptyCommand
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCommand2 eta }) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fShowField :: GHC.Show.Show Types.Field
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Field
                  Types.$fShowField_$cshowsPrec
                  Types.$fShowField_$cshow
                  Types.$fShowField_$cshowList -}
f12da4d7d8e72658efbb06ea080c6269
  $fShowFieldState :: GHC.Show.Show Types.FieldState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.FieldState
                  Types.$fShowClientState_$cshowsPrec
                  Types.$fShowFieldState_$cshow
                  Types.$fShowFieldState_$cshowList -}
f12da4d7d8e72658efbb06ea080c6269
  $fShowFieldState1 :: Types.FieldState -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowClientState_$cshowsPrec
                   Types.$fShowChanges3) -}
f12da4d7d8e72658efbb06ea080c6269
  $fShowFieldState_$cshow :: Types.FieldState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.FieldState) ->
                 Types.$fShowClientState_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f12da4d7d8e72658efbb06ea080c6269
  $fShowFieldState_$cshowList :: [Types.FieldState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.FieldState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.FieldState
                   Types.$fShowFieldState1
                   ls
                   s) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fShowField_$cshow :: Types.Field -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Field) ->
                 Types.$fShowField_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fShowField_$cshowList :: [Types.Field] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Field]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Field Types.$fShowClientState8 ls s) -}
a5e8e31ebd654aed1c51bdce89a1e481
  $fShowField_$cshowsPrec ::
    GHC.Types.Int -> Types.Field -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Field)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Field ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec5 ww1 ww3 ww4 ww5 w2 } }) -}
084e809b613707d9daac3e7dc5838ec3
  $fShowPlayer :: GHC.Show.Show Types.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fShowPlayer_$cshowsPrec
                  Types.$fShowPlayer_$cshow
                  Types.$fShowPlayer_$cshowList -}
084e809b613707d9daac3e7dc5838ec3
  $fShowPlayer1 :: Types.Player -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Player) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState6)
                        eta
                   Types.Two
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState4)
                        eta }) -}
084e809b613707d9daac3e7dc5838ec3
  $fShowPlayer_$cshow :: Types.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Player) ->
                 case x of wild {
                   Types.One -> Types.$fShowClientState6
                   Types.Two -> Types.$fShowClientState4 }) -}
084e809b613707d9daac3e7dc5838ec3
  $fShowPlayer_$cshowList :: [Types.Player] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Player]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Player Types.$fShowPlayer1 ls s) -}
084e809b613707d9daac3e7dc5838ec3
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Types.Player -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Player)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState6)
                        eta
                   Types.Two
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState4)
                        eta }) -}
5043523029050ca061da751fab5b88a6
  $fShowStateChanges :: GHC.Show.Show Types.StateChanges
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fShowStateChanges_$cshowsPrec
                  Types.$fShowStateChanges_$cshow
                  Types.$fShowStateChanges_$cshowList -}
5043523029050ca061da751fab5b88a6
  $fShowStateChanges1 :: Types.StateChanges -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Types.StateChanges) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec3 0# w w1) -}
5043523029050ca061da751fab5b88a6
  $fShowStateChanges_$cshow :: Types.StateChanges -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.StateChanges) ->
                 Types.$fShowStateChanges_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5043523029050ca061da751fab5b88a6
  $fShowStateChanges_$cshowList ::
    [Types.StateChanges] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.StateChanges]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.StateChanges
                   Types.$fShowStateChanges1
                   ls
                   s) -}
5043523029050ca061da751fab5b88a6
  $fShowStateChanges_$cshowsPrec ::
    GHC.Types.Int -> Types.StateChanges -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.StateChanges)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 w2 }) -}
af79efce59a770f994dca4817077d740
  $fShowSuit :: GHC.Show.Show Types.Suit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Suit
                  Types.$fShowSuit_$cshowsPrec
                  Types.$fShowSuit_$cshow
                  Types.$fShowSuit_$cshowList -}
af79efce59a770f994dca4817077d740
  $fShowSuit_$cshow :: Types.Suit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Suit) ->
                 case x of wild {
                   Types.Red -> Types.$fShowCard12
                   Types.Blue -> Types.$fShowCard10
                   Types.Yellow -> Types.$fShowCard8
                   Types.Green -> Types.$fShowCard6
                   Types.White -> Types.$fShowCard4
                   Types.Black -> Types.$fShowCard2 }) -}
af79efce59a770f994dca4817077d740
  $fShowSuit_$cshowList :: [Types.Suit] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Suit]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Suit Types.$w$cshowsPrec1 ls s) -}
af79efce59a770f994dca4817077d740
  $fShowSuit_$cshowsPrec ::
    GHC.Types.Int -> Types.Suit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Suit)
                   (w2 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec1 w1 w2) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fShowTurn :: GHC.Show.Show Types.Turn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn
                  Types.$fShowTurn_$cshowsPrec
                  Types.$fShowTurn_$cshow
                  Types.$fShowTurn_$cshowList -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fShowTurn1 :: Types.Turn -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowTurn_$cshowsPrec Types.$fShowChanges3) -}
18eded860e415c98832dfff27e69d6fc
  $fShowTurn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn3) -}
c252ce1aa105b2613dd2060dc0600462
  $fShowTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TakeCard "#) -}
fec0180444331ad55fcb567df37ccddf
  $fShowTurn4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn5) -}
ea106b482f124b56e68adca7ed2976bc
  $fShowTurn5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FinishTurn"#) -}
487e0b45fcab1bb4fde18943e5b51bd9
  $fShowTurn6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn7) -}
c3c12fa1178eada56131b99b414ee1d1
  $fShowTurn7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PutCard "#) -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fShowTurnState :: GHC.Show.Show Types.TurnState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.TurnState
                  Types.$fShowClientState_$cshowsPrec1
                  Types.$fShowTurnState_$cshow
                  Types.$fShowTurnState_$cshowList -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fShowTurnState1 :: Types.TurnState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Types.$fShowClientState_$cshowsPrec1
                   Types.$fShowChanges3) -}
47c77a600b1d871ffd377056eeef4efd
  $fShowTurnState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f8cd084176689691621e58e837e5c137
  $fShowTurnState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
eb600fb16b100104db5148008d3f1dd5
  $fShowTurnState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState19
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c9b1c12d31a0325bf378e155a6a4197d
  $fShowTurnState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fShowTurnState_$cshow :: Types.TurnState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.TurnState) ->
                 case x of wild {
                   Types.PutCardTurn b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowClientState21
                        (case b1 of wild1 {
                           GHC.Maybe.Nothing -> Types.$fShowTurnState5
                           GHC.Maybe.Just b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowMaybe1
                                   (case b2 of ww { Types.Card ww1 ww2 ->
                                    Types.$w$cshowsPrec 11# ww1 ww2 Types.$fShowCommand10 })) })
                   Types.EmptyState -> Types.$fShowTurnState4
                   Types.GameFinished b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowClientState16
                        (case b1 of wild1 {
                           Types.One -> Types.$fShowTurnState3
                           Types.Two -> Types.$fShowTurnState2 }) }) -}
c3ef6fdb8f565da6b1dec0e11b9e56a9
  $fShowTurnState_$cshowList :: [Types.TurnState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.TurnState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.TurnState
                   Types.$fShowTurnState1
                   ls
                   s) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fShowTurn_$cshow :: Types.Turn -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Turn) ->
                 Types.$fShowTurn_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fShowTurn_$cshowList :: [Types.Turn] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Turn]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Turn Types.$fShowTurn1 ls s) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $fShowTurn_$cshowsPrec ::
    GHC.Types.Int -> Types.Turn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.Turn)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.PutCard b1 b2 b3
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          case b1 of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 11#
                                 ww3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (case b2 of wild2 {
                                       Types.One
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowClientState6
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (case b3 of ww { Types.Card ww1 ww5 ->
                                                Types.$w$cshowsPrec 11# ww1 ww5 x1 }))
                                       Types.Two
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowClientState4
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (case b3 of ww { Types.Card ww1 ww5 ->
                                                Types.$w$cshowsPrec
                                                  11#
                                                  ww1
                                                  ww5
                                                  x1 })) })) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTurn6 (g eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTurn6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta))) } }
                   Types.FinishTurn
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTurn4 eta
                   Types.TakeCard b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowTurn2
                             (case b1 of ww { Types.Card ww1 ww2 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTurn2
                                (case b1 of ww { Types.Card ww1 ww2 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta) })) } } }) -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fShowWorld :: GHC.Show.Show Types.World
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.World
                  Types.$fShowWorld_$cshowsPrec
                  Types.$fShowWorld_$cshow
                  Types.$fShowWorld_$cshowList -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fShowWorld1 :: Types.World -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Types.World) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.World ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec7 0# ww1 ww2 ww3 w1 }) -}
2a83375a84ee02a863f184459681631b
  $fShowWorld2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowWorld3) -}
340132cb8ad0f55d57fe6288202d2c00
  $fShowWorld3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World "#) -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fShowWorld_$cshow :: Types.World -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.World) ->
                 Types.$fShowWorld_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fShowWorld_$cshowList :: [Types.World] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.World]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.World Types.$fShowWorld1 ls s) -}
10f8f66c1d98274e39bf00acb54b9bb9
  $fShowWorld_$cshowsPrec ::
    GHC.Types.Int -> Types.World -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.World)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.World ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec7 ww1 ww3 ww4 ww5 w2 } }) -}
e4a61eabf9c1fa2c3f0177377c6b3dbe
  $tc'Batallion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7372270633718651148##
                   15657333926705803088##
                   Types.$trModule
                   Types.$tc'Batallion2
                   0#
                   Types.$tc'Batallion1) -}
8c1ae8fb27923c37d3e02e99d2ce1e70
  $tc'Batallion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f4b626f2c413d99fe98c746227366331
  $tc'Batallion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Batallion3) -}
94adc6f592f27eab44a5e5e75d86b925
  $tc'Batallion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Batallion"#) -}
904449825d9680758d0058473fc89e53
  $tc'Black :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10893609193804893869##
                   10071383130563923154##
                   Types.$trModule
                   Types.$tc'Black2
                   0#
                   Types.$tc'Black1) -}
750c36a39126abd5e1f3f404aa9ae52e
  $tc'Black1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
bbfae55f6854ccdf9c51bfac3f27643b
  $tc'Black2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Black3) -}
e8e58b3e1998d57532660eabc43bd25a
  $tc'Black3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Black"#) -}
1a6329f7b2c674a4ecb711ab2e444c3f
  $tc'Blue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6843562167355028926##
                   4700367821285345942##
                   Types.$trModule
                   Types.$tc'Blue1
                   0#
                   Types.$tc'Black1) -}
159265cbf9cb79b8924704412532d0a2
  $tc'Blue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Blue2) -}
8ac6bd31eac359494452edb68a521b0f
  $tc'Blue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Blue"#) -}
b7492934d9ea32615dedf15add5bb8e6
  $tc'Card :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2514966313270632214##
                   11707027996110547573##
                   Types.$trModule
                   Types.$tc'Card2
                   0#
                   Types.$tc'Card1) -}
dc0c0d04cd25ee87e96d746be7406b2f
  $tc'Card1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e5e94da9256a5fadbb0330cad7b9d62a
  $tc'Card2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Card3) -}
7c3e4de4c2146327a7b157749848736a
  $tc'Card3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Card"#) -}
f95208a1eb4ad9918dec5578ece984d9
  $tc'Changes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8123305734682513837##
                   9800117517286903707##
                   Types.$trModule
                   Types.$tc'Changes2
                   0#
                   Types.$tc'Changes1) -}
a2837a46dea692095c5d0fe942741592
  $tc'Changes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2cfac9e5ef355973e249e8aed9cf59c2
  $tc'Changes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Changes3) -}
eabd8499cf64b9112b391a40713248d7
  $tc'Changes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Changes"#) -}
7bf97e302e7902af77632b3b835f53ab
  $tc'ClientState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10502056046539052045##
                   14955795465953833322##
                   Types.$trModule
                   Types.$tc'ClientState2
                   0#
                   Types.$tc'ClientState1) -}
4465bcb74fec477c0782106f2c386240
  $tc'ClientState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
836c126f1f5f9499eff8971a8f023207
  $tc'ClientState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'ClientState3) -}
cae81a6d8934255a4879f13a08cec5ef
  $tc'ClientState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClientState"#) -}
4f9665907aae87ff79f486340c355fc9
  $tc'Closed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9004837418229769823##
                   17395431322522756514##
                   Types.$trModule
                   Types.$tc'Closed2
                   0#
                   Types.$tc'Closed1) -}
737045eb4fe4b959fcb84eb2de3257e5
  $tc'Closed1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3806923efe1e1b4d309ad9caa52f9a94
  $tc'Closed2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Closed3) -}
ff3b6b39f229ec33d9f78325d94bf28a
  $tc'Closed3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Closed"#) -}
94e73828239cd1a9610d90fdc5507503
  $tc'EmptyCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11005954921110125978##
                   3631109860517541431##
                   Types.$trModule
                   Types.$tc'EmptyCommand2
                   0#
                   Types.$tc'EmptyCommand1) -}
8752350c999b0680a22d7889f8a5b942
  $tc'EmptyCommand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
93cdae4f175af917f6fd618eb23405e9
  $tc'EmptyCommand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'EmptyCommand3) -}
b816f61b699ed1c9e2dd68c1b9f1393a
  $tc'EmptyCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyCommand"#) -}
3bd2b05dad4f47850c48c17f224dfe48
  $tc'EmptyState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11070171405530533779##
                   15132540446516202617##
                   Types.$trModule
                   Types.$tc'EmptyState2
                   0#
                   Types.$tc'EmptyState1) -}
b482a1a46585c913747727fb15c36249
  $tc'EmptyState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b5bbcf56e034fa7c5b3f92ccefe9c054
  $tc'EmptyState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'EmptyState3) -}
8cbbc5d2e92a83a8ac1ee2c3f9967d4a
  $tc'EmptyState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyState"#) -}
51456c348400152b80e164e030f10a1e
  $tc'Field :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5339037246605362822##
                   9016949994408154871##
                   Types.$trModule
                   Types.$tc'Field2
                   0#
                   Types.$tc'Field1) -}
81e7be9ae4f455afb881061ca29f46b6
  $tc'Field1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
edc603d26bce29581ede2ebee0a7fcf3
  $tc'Field2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Field3) -}
56e6c76dfbe4f4ad98ba4dda2bee1d84
  $tc'Field3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Field"#) -}
d0a08499366094561f51b6bf8c074510
  $tc'FieldClosed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14648116263177335579##
                   8083337225124754416##
                   Types.$trModule
                   Types.$tc'FieldClosed2
                   0#
                   Types.$tc'FieldClosed1) -}
4ab837d7b99a46269969bd335b549778
  $tc'FieldClosed1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0591dcffe80a4d275af6197052491cf6
  $tc'FieldClosed2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'FieldClosed3) -}
f2ae7f13333cdc1bdb395a99dced0a8f
  $tc'FieldClosed3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FieldClosed"#) -}
53db1ef119dff93be2f2438acb6b579a
  $tc'FinishTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1447820837144622508##
                   12438068542715703619##
                   Types.$trModule
                   Types.$tc'FinishTurn2
                   0#
                   Types.$tc'FinishTurn1) -}
c1eb9b553472f3e66df8c7b42b052a95
  $tc'FinishTurn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
bd52556a712b67fa8e480a02223b5987
  $tc'FinishTurn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'FinishTurn3) -}
005da88356e806e73f9c890e90ad82f4
  $tc'FinishTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FinishTurn"#) -}
052f3c78d7f2513da25e08acb8fb0d00
  $tc'GameFinished :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14337566885344509447##
                   5664103438927690992##
                   Types.$trModule
                   Types.$tc'GameFinished2
                   0#
                   Types.$tc'GameFinished1) -}
2ffa521ba39f9a1805ffc4930b979875
  $tc'GameFinished1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b82755a2a1ca9998d84711a8c4b59c89
  $tc'GameFinished2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'GameFinished3) -}
2ac6c7f8bb05bc368d135e1172d5aa05
  $tc'GameFinished3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameFinished"#) -}
4c056a3047550eb581b9807e4dfd5470
  $tc'Green :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13865278367837203810##
                   973544490500130821##
                   Types.$trModule
                   Types.$tc'Green1
                   0#
                   Types.$tc'Black1) -}
b74e77747469204c398a6855ea8f91c6
  $tc'Green1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Green2) -}
8fc1eaa535571834bf21ecf7676fb780
  $tc'Green2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Green"#) -}
df44ab186fe2e3a57f045efe901fbec6
  $tc'Host :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16697233848099481362##
                   1847072109646311248##
                   Types.$trModule
                   Types.$tc'Host1
                   0#
                   Types.$tc'Batallion1) -}
b02747d2121adbabdea71b05f2a0013a
  $tc'Host1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Host2) -}
3c8423ca15be6139d224170b56564b67
  $tc'Host2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Host"#) -}
f659da98cfb29e4d77d296f58dc6b230
  $tc'NewCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13530629326778028521##
                   4037690598794295509##
                   Types.$trModule
                   Types.$tc'NewCard2
                   0#
                   Types.$tc'NewCard1) -}
f61af534ebb31e9bafb741d7fdf1ebdc
  $tc'NewCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d48b4ae75e3159a65cd81a208e566000
  $tc'NewCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'NewCard3) -}
cf9827c33ea0e64ef1eb5b4fb8c5ee60
  $tc'NewCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewCard"#) -}
f0abc069b0ce4c82065f94413d483a14
  $tc'One :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13163731378613948550##
                   13323504884595339192##
                   Types.$trModule
                   Types.$tc'One2
                   0#
                   Types.$tc'One1) -}
7fb1cb9f3c408b306feeca7cf1b91bc2
  $tc'One1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
fd2c913caf85f019fd69844eb5740f34
  $tc'One2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'One3) -}
d8b4cefef526df74dcdd972849735a0e
  $tc'One3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'One"#) -}
87af221dedb7a979eea462a90727cb70
  $tc'Open :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5706741167228057822##
                   6388575922330826566##
                   Types.$trModule
                   Types.$tc'Open2
                   0#
                   Types.$tc'Open1) -}
6764ef625b08188dad97ef4c10d80096
  $tc'Open1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
593140248a04d6fa118b1b793cda5899
  $tc'Open2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Open3) -}
16f3c9e9350a886966db758becb98f9a
  $tc'Open3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Open"#) -}
94ec3a3108e97980b1b2ff45ef6918de
  $tc'Phalanx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   858048007377734996##
                   12644296214479800053##
                   Types.$trModule
                   Types.$tc'Phalanx1
                   0#
                   Types.$tc'Batallion1) -}
0f5ab630c2b92356014228090a2d111f
  $tc'Phalanx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Phalanx2) -}
57937c7ae1f2eb7c80c0e5e925eb299c
  $tc'Phalanx2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Phalanx"#) -}
700b95848a34ad2d8e9190678ec34a8c
  $tc'Put :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8891092061793388589##
                   6503733030066463326##
                   Types.$trModule
                   Types.$tc'Put1
                   0#
                   Types.$tc'EmptyCommand1) -}
ae3cbb1a7566c0e3cbb5d048bcfb179c
  $tc'Put1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Put2) -}
f8fef6a0f352cd30e8a947657e061f8e
  $tc'Put2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Put"#) -}
4b609b8c5a117b3f96cb91c761a7fd68
  $tc'PutCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15427138930517344227##
                   10789257042569422438##
                   Types.$trModule
                   Types.$tc'PutCard2
                   0#
                   Types.$tc'PutCard1) -}
6e74184355681c1b1bdd2d3787d5e06c
  $tc'PutCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c2fc4cba936716d02555dce7b7c678c0
  $tc'PutCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'PutCard3) -}
dff8fc4e5db3fa337af7766cf2f4e98e
  $tc'PutCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PutCard"#) -}
3120a42a355fd9f98241fc7c80502d1a
  $tc'PutCardTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   808868369827061390##
                   14392159804422542576##
                   Types.$trModule
                   Types.$tc'PutCardTurn2
                   0#
                   Types.$tc'PutCardTurn1) -}
183fa8dd0409aa3d6bb59bc8dac8838e
  $tc'PutCardTurn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d8b18da8151df4a28e000c349b6d6b15
  $tc'PutCardTurn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'PutCardTurn3) -}
595522e7a7b5311805594f5b35c04806
  $tc'PutCardTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PutCardTurn"#) -}
f2938fd996379c24c4088539b992f758
  $tc'Red :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10505456430490998026##
                   14734057088624880631##
                   Types.$trModule
                   Types.$tc'Red1
                   0#
                   Types.$tc'Black1) -}
ed9b3fb15c2e0bec466990465b0e5788
  $tc'Red1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Red2) -}
395b8cb90a724db699e6a9dd9f865247
  $tc'Red2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Red"#) -}
929e078dc56ae555390c9fac882907ab
  $tc'Skirmish :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8556489779387677222##
                   3772987251086797013##
                   Types.$trModule
                   Types.$tc'Skirmish1
                   0#
                   Types.$tc'Batallion1) -}
56a6755eb44d6601c7e9836185ffabe0
  $tc'Skirmish1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Skirmish2) -}
237bce82076d51cd66ed3e8e2b76e50a
  $tc'Skirmish2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Skirmish"#) -}
6902648d0a116ec2ff3e3e8752ff76e0
  $tc'Take :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15817036704327883656##
                   10263633719044893646##
                   Types.$trModule
                   Types.$tc'Take2
                   0#
                   Types.$tc'Take1) -}
9979558fd8118a20ee58fcd6e4b74bc2
  $tc'Take1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4d67c533703e89f79238456962ea44ad
  $tc'Take2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Take3) -}
2fe9297e474ca079e45a1be60ab92ce9
  $tc'Take3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Take"#) -}
6a73a8090b3588a6e5652de6efa2a68c
  $tc'TakeCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6668226578531835325##
                   11848953511821949432##
                   Types.$trModule
                   Types.$tc'TakeCard2
                   0#
                   Types.$tc'TakeCard1) -}
fa4fac0e8f270f7854441243829aa7c0
  $tc'TakeCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e4ca524dc9e84e985a672570d319a54f
  $tc'TakeCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'TakeCard3) -}
80891dab02b9b5c8d6f5bb7231f7fee0
  $tc'TakeCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TakeCard"#) -}
60ea9492ba5c1e14a39ae0f4cb95e311
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3932037483718119969##
                   6327379984000454757##
                   Types.$trModule
                   Types.$tc'Two1
                   0#
                   Types.$tc'One1) -}
7f7d17041cbd75b0268bc4906c4fb050
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Two2) -}
c9d8aced943aa72b0acaed3e9f9fae14
  $tc'Two2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
fb53276ba2321b779ef45a29ef3be3e4
  $tc'Wedge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8694897389272258409##
                   2765731066839943862##
                   Types.$trModule
                   Types.$tc'Wedge1
                   0#
                   Types.$tc'Batallion1) -}
139e563883722a79f1366d52fb845df7
  $tc'Wedge1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Wedge2) -}
9495f43e6e26406036acc7390e4ad108
  $tc'Wedge2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Wedge"#) -}
a4c00b7fe7bc89a8cbb3111943da54fc
  $tc'White :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6525555813365663424##
                   5712696765397033226##
                   Types.$trModule
                   Types.$tc'White1
                   0#
                   Types.$tc'Black1) -}
586583e436da56ef464c9eda9dcaf41f
  $tc'White1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'White2) -}
c4941c29f82b0d444198a02c614e4655
  $tc'White2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'White"#) -}
ba0988fc55f7b062dc43497e203fa35c
  $tc'Win :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7004775366662439423##
                   11969775986613643349##
                   Types.$trModule
                   Types.$tc'Win2
                   0#
                   Types.$tc'Win1) -}
2b3f9ed85f84b5866c202c0f65d23c98
  $tc'Win1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0adaefbe5e8f948de00a10cdb9d2b5d4
  $tc'Win2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Win3) -}
474792b6c527dfb1346d52c531bb7f76
  $tc'Win3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Win"#) -}
aa35df5a26bc3fa1a16d01f2d99cd2ac
  $tc'Winner :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12967288776139835613##
                   13938635187277203107##
                   Types.$trModule
                   Types.$tc'Winner2
                   0#
                   Types.$tc'Winner1) -}
1bffbc620fe6dc4d77bebaee94881003
  $tc'Winner1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8f06d85b56c3db7bb72ea5e80fd60c71
  $tc'Winner2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Winner3) -}
760039497f895c943ef3124148f01efa
  $tc'Winner3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Winner"#) -}
5b0a08a1d5ded822478f7a9d706ca11c
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1632756135856007807##
                   10884526737566830493##
                   Types.$trModule
                   Types.$tc'World2
                   0#
                   Types.$tc'World1) -}
7f42be5e35716bedcebf897203c4c33e
  $tc'World1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6d8254f38f5736fda3c7d6cde63a607e
  $tc'World2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'World3) -}
32ab56a7734e18e51f2ac66a14eacfcd
  $tc'World3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'World"#) -}
e2b0ef5d50c647e84df8d0c7c87bb345
  $tc'Yellow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17036517660699098402##
                   7168438438647201878##
                   Types.$trModule
                   Types.$tc'Yellow1
                   0#
                   Types.$tc'Black1) -}
913b92062e60aa44eb5e79d28f43b260
  $tc'Yellow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Yellow2) -}
b42bcb6d94c7075d2111953c78cbc59e
  $tc'Yellow2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Yellow"#) -}
a4a7ba0d74ff6068c8df61441b1951ab
  $tcCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6483620106826826856##
                   2263243268057504087##
                   Types.$trModule
                   Types.$tcCard1
                   0#
                   GHC.Types.krep$*) -}
2ef27fd0c57c039c90c4db5e78f025f1
  $tcCard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCard2) -}
9f628cf44200115a523d81be5df3dca0
  $tcCard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Card"#) -}
8f843ccf6c920ce9b1b530a7ac5fca5d
  $tcChanges :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6389905893261164123##
                   7239393833556589243##
                   Types.$trModule
                   Types.$tcChanges1
                   0#
                   GHC.Types.krep$*) -}
dac226adfb7560d182f6282c6e76e16b
  $tcChanges1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcChanges2) -}
717cf9b25bfaea21201433aa9fb7f9f5
  $tcChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Changes"#) -}
0ed1bb91a914021470d8c2200c6dba61
  $tcClientState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15864896811394483092##
                   5135343222367270482##
                   Types.$trModule
                   Types.$tcClientState1
                   0#
                   GHC.Types.krep$*) -}
5eb2cabbd03c30abd57e6d188a7442ad
  $tcClientState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcClientState2) -}
07ab9b8eb20dad735d74a86b450593d6
  $tcClientState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ClientState"#) -}
cd960640c858520958be679a7c9a1bc5
  $tcCombo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14581936459623606641##
                   18178744308114921872##
                   Types.$trModule
                   Types.$tcCombo1
                   0#
                   GHC.Types.krep$*) -}
eb5eea3c5195c73a9f46c20bff9de2f1
  $tcCombo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCombo2) -}
c8f17e1c0ab39f97631393c22f24b560
  $tcCombo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Combo"#) -}
5bde8c367a158f7017f2b8104a979743
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   456850473774875856##
                   17652620945375174418##
                   Types.$trModule
                   Types.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
23a147bd2029db3dd058dd95883efb34
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCommand2) -}
84017ff72398755d62be6997674cc223
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
ed8f5cb103c4a9561f7b6e32feb6455d
  $tcField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17379589446239669837##
                   12107475641999359753##
                   Types.$trModule
                   Types.$tcField1
                   0#
                   GHC.Types.krep$*) -}
97121c7b4f75590f457849995dc94441
  $tcField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcField2) -}
e0ed7009f1e636f8c93ef2ca9112267d
  $tcField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field"#) -}
502be5faaa2da19c7957bf22ebb968cd
  $tcFieldState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12497441230989512181##
                   18182681664744811943##
                   Types.$trModule
                   Types.$tcFieldState1
                   0#
                   GHC.Types.krep$*) -}
d2c709c12d5efbca3495c92159e72d16
  $tcFieldState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcFieldState2) -}
ebfa4f3c0c0db45790b55d8f26d7dd27
  $tcFieldState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldState"#) -}
0c319d2d04fb3d30ff973b5b11de7a06
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13000679221824402177##
                   8611935371187333971##
                   Types.$trModule
                   Types.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
7c46f61a01bc9dc6db24f250cc0393c1
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcPlayer2) -}
0ae51f29fe713a60edac0c6984f86cc1
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
b29523715331aade6295344a76e6d1b9
  $tcStateChanges :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9650038002989123356##
                   12711264656998117549##
                   Types.$trModule
                   Types.$tcStateChanges1
                   0#
                   GHC.Types.krep$*) -}
ac45301fd5c678b8e7b912c6c5ade44f
  $tcStateChanges1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcStateChanges2) -}
254c0ef9d3e6066e621dd6af753fc19d
  $tcStateChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StateChanges"#) -}
3551f1c7c590bbc78b1411c1b6c518f3
  $tcSuit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17257066127467468790##
                   6606077164262661112##
                   Types.$trModule
                   Types.$tcSuit1
                   0#
                   GHC.Types.krep$*) -}
9d3d971154b6e5a56b78af54574d8427
  $tcSuit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcSuit2) -}
c8e7f9243a2e1b399a4381c2cb717327
  $tcSuit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Suit"#) -}
08138d825d3b8faeb38cc9e2b2bbddb3
  $tcTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5166697245312082956##
                   9585051647349739974##
                   Types.$trModule
                   Types.$tcTurn1
                   0#
                   GHC.Types.krep$*) -}
4741ecc54e12ea684c2448eca9908056
  $tcTurn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcTurn2) -}
ff7b6690c2a826e9c54d0ef0e20382af
  $tcTurn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Turn"#) -}
dca74e9b35dfb045f0ff0e5eebbd9b90
  $tcTurnState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4052803332098904540##
                   16136508595302734813##
                   Types.$trModule
                   Types.$tcTurnState1
                   0#
                   GHC.Types.krep$*) -}
34032537af7265ee10e9c7b6a6227ac2
  $tcTurnState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcTurnState2) -}
ff5a00b0731eace2908e205afa7e09c7
  $tcTurnState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TurnState"#) -}
6d6df60aa72126cb424797f7a3a5db0a
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6712459562296994865##
                   5733927462126963857##
                   Types.$trModule
                   Types.$tcWorld1
                   0#
                   GHC.Types.krep$*) -}
aac66b017f55737b7853d6600525281c
  $tcWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcWorld2) -}
d05e9ee8f0b0cdacc4622666e5095059
  $tcWorld2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World"#) -}
2c9393f66e2782a347ebff0e481c42c4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule3 Types.$trModule1) -}
4d4c3cdfadbe47f22aa518274a23d147
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$trModule2) -}
434ad471dbb82fe89e6e134651e41be6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Types"#) -}
30924d767cd1bbb3c65a966759029bbf
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$trModule4) -}
322201ff9a05ce92a4d2eb02cd2e20ca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("battlefield-0.1.0.0-8CmZqnTevv4DQlKkYwSBkE"#) -}
0301f2b833d06594d6e057b48294084a
  $w$c== ::
    Types.Suit
    -> GHC.Types.Int -> Types.Suit -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: Types.Suit)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Types.Suit)
                   (ww3 :: GHC.Types.Int) ->
                 case ww of wild {
                   Types.Red
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Red -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Blue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Blue -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Yellow
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Yellow -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Green
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Green -> GHC.Classes.eqInt ww1 ww3 }
                   Types.White
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.White -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Black
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Black -> GHC.Classes.eqInt ww1 ww3 } }) -}
1d67de0b42722d07c30abe8771aa949f
  $w$c==1 ::
    Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: Types.Player)
                   (ww1 :: Network.Socket.Types.Socket)
                   (ww2 :: [Types.Field])
                   (ww3 :: [Types.Card])
                   (ww4 :: Types.TurnState)
                   (ww5 :: Types.Player)
                   (ww6 :: Network.Socket.Types.Socket)
                   (ww7 :: [Types.Field])
                   (ww8 :: [Types.Card])
                   (ww9 :: Types.TurnState) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = case ww1 of wild { Network.Socket.Types.MkSocket ds2 ds3 ds4 ds5 m1 ->
                     case ww6 of wild1 { Network.Socket.Types.MkSocket ds6 ds7 ds8 ds9 m2 ->
                     case m1 of wild2 { GHC.MVar.MVar mvar1# ->
                     case m2 of wild3 { GHC.MVar.MVar mvar2# ->
                     case GHC.Prim.sameMVar#
                            @ GHC.Prim.RealWorld
                            @ Network.Socket.Types.SocketStatus
                            mvar1#
                            mvar2# of lwild {
                       DEFAULT -> GHC.Types.False
                       1#
                       -> case GHC.Classes.$fEq[]_$c==
                                 @ Types.Field
                                 Types.$fEqField
                                 ww2
                                 ww7 of wild4 {
                            GHC.Types.False -> GHC.Types.False
                            GHC.Types.True
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ Types.Card
                                      Types.$fEqCard
                                      ww3
                                      ww8 of wild5 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True -> Types.$fEqClientState_$c==1 ww4 ww9 } } } } } } }
                 } in
                 case ww of wild {
                   Types.One
                   -> case ww5 of wild1 {
                        Types.One -> $j Types.Two -> GHC.Types.False }
                   Types.Two
                   -> case ww5 of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> $j } }) -}
cfe935b8ce64874d92fbb408b1eaa5d9
  $w$c==2 ::
    [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: [Types.Card])
                   (ww1 :: [Types.Card])
                   (ww2 :: Types.FieldState)
                   (ww3 :: [Types.Card])
                   (ww4 :: [Types.Card])
                   (ww5 :: Types.FieldState) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.Card
                        Types.$fEqCard
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Card
                             Types.$fEqCard
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Types.$fEqField_$c==1 ww2 ww5 } }) -}
cd2b544ecda8c40e62f815e4bfe00b03
  $w$c==3 ::
    [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: [Types.Field])
                   (ww1 :: [Types.Card])
                   (ww2 :: [Types.StateChanges])
                   (ww3 :: [Types.Field])
                   (ww4 :: [Types.Card])
                   (ww5 :: [Types.StateChanges]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.Field
                        Types.$fEqField
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Card
                             Types.$fEqCard
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ Types.StateChanges
                             Types.$fEqStateChanges
                             ww2
                             ww5 } }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Card r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
515356681dafb1bc1613cb131376071f
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Changes r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Changes r) ->
                 Data.Binary.Class.$w$cget13
                   @ Types.StateChanges
                   Types.$fBinaryStateChanges
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Types.StateChanges])[OneShot] ->
                    w i' (Types.Changes a1))) -}
5043523029050ca061da751fab5b88a6
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.StateChanges r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
b3ed86649415f10276c18bbf46384874
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Command r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Command r) ->
                 let {
                   lvl6 :: Data.ByteString.Internal.ByteString
                           -> Types.Player -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Types.Player)[OneShot] ->
                     w i' (Types.Win a1)
                 } in
                 let {
                   lvl7 :: Data.ByteString.Internal.ByteString
                           -> Types.Card -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Types.Card)[OneShot] ->
                     w i' (Types.Take a1)
                 } in
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,1*U>, Inline: [2] -}
                   = \ (w1 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     case ww4 of wild {
                       DEFAULT -> w w1 Types.EmptyCommand
                       0## -> w w1 Types.Put
                       1##
                       -> case w1 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                          Types.$w$cget @ r ww6 ww7 ww8 ww9 lvl7 }
                       2##
                       -> case w1 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                          Types.$w$cget4 @ r ww6 ww7 ww8 ww9 lvl6 } }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Types.$fBinaryCommand9
                        Types.$fBinaryCommand8
                        Types.$fBinaryCommand7
                        Types.$fBinaryCommand4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        ipv1 } } }) -}
084e809b613707d9daac3e7dc5838ec3
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Player r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Player r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Types.$fBinaryCommand9
                        Types.$fBinaryCommand8
                        Types.$fBinaryCommand7
                        Types.$fBinaryCommand4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Types.Two
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Types.One } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Types.Two
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Types.One } } } }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Turn r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
03a617370f0cc441016975b7cb717e42
  $w$cput ::
    Types.Suit
    -> GHC.Types.Int
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [2] -}
5043523029050ca061da751fab5b88a6
  $w$cput1 ::
    Types.StateChanges
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
b3ed86649415f10276c18bbf46384874
  $w$cput2 ::
    Types.Command -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Command) ->
                 case w of wild {
                   Types.Put
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryCommand2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.Take c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.Win p
                   -> (# case p of wild1 { DEFAULT -> GHC.Tuple.() },
                         (\ @ r
                            (x :: Data.ByteString.Builder.Internal.BuildStep r)
                            (eta :: Data.ByteString.Builder.Internal.BufferRange)
                            (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     2##
                                     eta2 of s2 { DEFAULT ->
                              (x (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          let {
                            lvl7 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta2 of s2 { DEFAULT ->
                              (x (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                            DEFAULT
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      2##
                                      eta1 of s2 { DEFAULT ->
                               let {
                                 karg :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 1#
                               } in
                               case p of wild2 {
                                 Types.One
                                 -> case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 karg) 1# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                karg
                                                0#
                                                1##
                                                s2 of s1 { DEFAULT ->
                                         (x (Data.ByteString.Builder.Internal.BufferRange
                                               (GHC.Prim.plusAddr# karg 1#)
                                               dt1))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s1 }
                                      1#
                                      -> (# s2,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              karg
                                              lvl7
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) }
                                 Types.Two
                                 -> case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 karg) 1# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                karg
                                                0#
                                                2##
                                                s2 of s1 { DEFAULT ->
                                         (x (Data.ByteString.Builder.Internal.BufferRange
                                               (GHC.Prim.plusAddr# karg 1#)
                                               dt1))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s1 }
                                      1#
                                      -> (# s2,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              karg
                                              lvl6
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) } } }
                            1#
                            -> (# eta1,
                                  Data.ByteString.Builder.Internal.BufferFull
                                    @ r
                                    1#
                                    dt
                                    (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            2##
                                            eta2 of s2 { DEFAULT ->
                                     let {
                                       karg :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 1#
                                     } in
                                     case p of wild3 {
                                       Types.One
                                       -> case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# dt3 karg)
                                                 1# of lwild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      karg
                                                      0#
                                                      1##
                                                      s2 of s1 { DEFAULT ->
                                               (x (Data.ByteString.Builder.Internal.BufferRange
                                                     (GHC.Prim.plusAddr# karg 1#)
                                                     dt3))
                                                 `cast`
                                               (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)
                                                 s1 }
                                            1#
                                            -> (# s2,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r
                                                    1#
                                                    karg
                                                    lvl7
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r>_R)) #) }
                                       Types.Two
                                       -> case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# dt3 karg)
                                                 1# of lwild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      karg
                                                      0#
                                                      2##
                                                      s2 of s1 { DEFAULT ->
                                               (x (Data.ByteString.Builder.Internal.BufferRange
                                                     (GHC.Prim.plusAddr# karg 1#)
                                                     dt3))
                                                 `cast`
                                               (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)
                                                 s1 }
                                            1#
                                            -> (# s2,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r
                                                    1#
                                                    karg
                                                    lvl6
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r>_R)) #) } } } })
                                      `cast`
                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)) #) } })
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.EmptyCommand
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryCommand1
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
0e2ae9855bfb72b4e999f5c10b60ae83
  $w$cput3 ::
    Types.Turn -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Turn) ->
                 case w of wild {
                   Types.PutCard f4 p c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r ->
                          let {
                            f5 :: Data.ByteString.Builder.Internal.BuildStep r
                                  -> Data.ByteString.Builder.Internal.BuildStep r
                            = case Data.Binary.Class.$w$cput9 f4 of ww { (#,#) ww1 ww2 ->
                              ww2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                          } in
                          \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = f5
                                (case p of wild1 {
                                   Types.One
                                   -> let {
                                        w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        = case k `cast`
                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild2 { Data.Binary.Put.PairS b1 w' ->
                                          w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                            @ r
                                            x }
                                      } in
                                      (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w2 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                       Types.$wlvl3 @ r w1 ww1 ww2 w3 })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R))
                                   Types.Two
                                   -> let {
                                        w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        = case k `cast`
                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild2 { Data.Binary.Put.PairS b1 w' ->
                                          w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                            @ r
                                            x }
                                      } in
                                      (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w2 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                       Types.$wlvl2 @ r w1 ww1 ww2 w3 })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)) })
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.FinishTurn
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryPlayer2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.TakeCard c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
ff27c14f0e486b1c474aea876a2dd7dd
  $w$cshow :: Types.Suit -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: Types.Suit) (ww1 :: GHC.Types.Int) ->
                 GHC.CString.unpackAppendCString#
                   Types.$fShowCard14
                   (Types.$w$cshowsPrec1
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 11#
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))) -}
d9ed6a42c6bc83cc75b77b91495f53c9
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.Suit
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Suit)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Types.$fShowCard14
                       (Types.$w$cshowsPrec1
                          ww1
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of ww3 { GHC.Types.I# ww4 ->
                              case GHC.Show.$wshowSignedInt 11# ww4 x of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
af79efce59a770f994dca4817077d740
  $w$cshowsPrec1 :: Types.Suit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Suit) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.Red -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard12 w1
                   Types.Blue -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard10 w1
                   Types.Yellow -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard8 w1
                   Types.Green -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard6 w1
                   Types.White -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard4 w1
                   Types.Black
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard2 w1 }) -}
57538a81b25733d4072205b0e4a3359d
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [Types.StateChanges] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.StateChanges])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Types.$fShowChanges2
                       (case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Types.$w$cshowsPrec3
                                  0#
                                  x1
                                  (let {
                                     lvl43 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                   } in
                                   letrec {
                                     showl :: [Types.StateChanges] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Types.StateChanges]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl43
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Types.$w$cshowsPrec3 0# y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
5043523029050ca061da751fab5b88a6
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Types.StateChanges -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
6d0b697b8d91b696d1cea8004590b681
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U><L,U(U(U),A,A,A,A)><L,U><L,U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Player)
                   (ww2 :: Network.Socket.Types.Socket)
                   (ww3 :: [Types.Field])
                   (ww4 :: [Types.Card])
                   (ww5 :: Types.TurnState) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Types.$fShowClientState_$cshowsPrec1
                       Types.$fShowClientState11
                       ww5
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     let {
                       karg :: [GHC.Types.Char]
                       = case ww2 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                         Network.Socket.Types.$w$cshowsPrec1
                           ww7
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showList__
                                 @ Types.Field
                                 Types.$fShowClientState8
                                 ww3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (GHC.Show.showList__
                                       @ Types.Card
                                       Types.$fShowCard1
                                       ww4
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.showSpace1
                                          (g x)))))) }
                     } in
                     case ww1 of wild {
                       Types.One
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowClientState6
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 karg)
                       Types.Two
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowClientState4
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 karg) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState2 (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowClientState2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
9d3058bca06999bb54b1baa0b274e4db
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.Card])
                   (ww2 :: [Types.Card])
                   (ww3 :: Types.FieldState)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ Types.Card
                       Types.$fShowCard1
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Types.Card
                             Types.$fShowCard1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Types.$fShowClientState_$cshowsPrec
                                   Types.$fShowClientState11
                                   ww3
                                   x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState9 (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowClientState9
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
388233bee3b11c60d120bec3b23e9393
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Types.Combo -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,1*U><L,U>,
     Inline: [2] -}
1e2c43f17874ce903cd17d34cf0eadf8
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.Field])
                   (ww2 :: [Types.Card])
                   (ww3 :: [Types.StateChanges])
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ Types.Field
                       Types.$fShowClientState8
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Types.Card
                             Types.$fShowCard1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Types.$fShowStateChanges_$cshowList ww3 x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> GHC.Base.++ @ GHC.Types.Char Types.$fShowWorld2 (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowWorld2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
c15dd095f97b35662137aca3feeb6335
  $wlvl ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             3##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   3##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
25530f785926dd640da5d3badacfaa95
  $wlvl1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
7f9a961401f653f816de28d38eb9c8c0
  $wlvl2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             2##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   2##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
95684a2fafac53a76c750d3bebaa31aa
  $wlvl3 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
2eddaddf45f0295f5fbfbba779a9e7e1
  data Card = Card Types.Suit GHC.Types.Int
515356681dafb1bc1613cb131376071f
  data Changes = Changes [Types.StateChanges]
586c146c5067841fed3bfc4158a846ed
  data ClientState
    = ClientState Types.Player
                  Network.Socket.Types.Socket
                  [Types.Field]
                  [Types.Card]
                  Types.TurnState
388233bee3b11c60d120bec3b23e9393
  data Combo
    = Host GHC.Types.Int
    | Skirmish GHC.Types.Int
    | Batallion GHC.Types.Int
    | Phalanx GHC.Types.Int
    | Wedge GHC.Types.Int
b3ed86649415f10276c18bbf46384874
  data Command
    = Put | Take Types.Card | Win Types.Player | EmptyCommand
a5e8e31ebd654aed1c51bdce89a1e481
  data Field = Field [Types.Card] [Types.Card] Types.FieldState
f12da4d7d8e72658efbb06ea080c6269
  data FieldState = Closed Types.Player | Open
084e809b613707d9daac3e7dc5838ec3
  data Player = One | Two
5043523029050ca061da751fab5b88a6
  data StateChanges
    = NewCard GHC.Types.Int Types.Player Types.Card
    | FieldClosed GHC.Types.Int Types.Player
    | Winner Types.Player
af79efce59a770f994dca4817077d740
  data Suit = Red | Blue | Yellow | Green | White | Black
0e2ae9855bfb72b4e999f5c10b60ae83
  data Turn
    = PutCard GHC.Types.Int Types.Player Types.Card
    | FinishTurn
    | TakeCard Types.Card
c3ef6fdb8f565da6b1dec0e11b9e56a9
  data TurnState
    = PutCardTurn (GHC.Maybe.Maybe Types.Card)
    | EmptyState
    | GameFinished Types.Player
10f8f66c1d98274e39bf00acb54b9bb9
  data World = World [Types.Field] [Types.Card] [Types.StateChanges]
b7dd2c6322613162549241beb970cb65
  defaultCard :: Types.Card
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Card Types.Black Types.$fShowChanges3) -}
d5d2ca90deee84e6084d21079b6b0d29
  messageSize :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10000#) -}
instance Data.Binary.Class.Binary [Types.Card] = Types.$fBinaryCard
instance Data.Binary.Class.Binary [Types.Changes]
  = Types.$fBinaryChanges
instance Data.Binary.Class.Binary [Types.Command]
  = Types.$fBinaryCommand
instance Data.Binary.Class.Binary [Types.Player]
  = Types.$fBinaryPlayer
instance Data.Binary.Class.Binary [Types.StateChanges]
  = Types.$fBinaryStateChanges
instance Data.Binary.Class.Binary [Types.Turn] = Types.$fBinaryTurn
instance GHC.Classes.Eq [Types.Card] = Types.$fEqCard
instance GHC.Classes.Eq [Types.Changes] = Types.$fEqChanges
instance GHC.Classes.Eq [Types.ClientState] = Types.$fEqClientState
instance GHC.Classes.Eq [Types.Combo] = Types.$fEqCombo
instance GHC.Classes.Eq [Types.Command] = Types.$fEqCommand
instance GHC.Classes.Eq [Types.Field] = Types.$fEqField
instance GHC.Classes.Eq [Types.FieldState] = Types.$fEqFieldState
instance GHC.Classes.Eq [Types.Player] = Types.$fEqPlayer
instance GHC.Classes.Eq [Types.StateChanges]
  = Types.$fEqStateChanges
instance GHC.Classes.Eq [Types.Suit] = Types.$fEqSuit
instance GHC.Classes.Eq [Types.Turn] = Types.$fEqTurn
instance GHC.Classes.Eq [Types.TurnState] = Types.$fEqTurnState
instance GHC.Classes.Eq [Types.World] = Types.$fEqWorld
instance GHC.Classes.Ord [Types.Combo] = Types.$fOrdCombo
instance GHC.Show.Show [Types.Card] = Types.$fShowCard
instance GHC.Show.Show [Types.Changes] = Types.$fShowChanges
instance GHC.Show.Show [Types.ClientState]
  = Types.$fShowClientState
instance GHC.Show.Show [Types.Combo] = Types.$fShowCombo
instance GHC.Show.Show [Types.Command] = Types.$fShowCommand
instance GHC.Show.Show [Types.Field] = Types.$fShowField
instance GHC.Show.Show [Types.FieldState] = Types.$fShowFieldState
instance GHC.Show.Show [Types.Player] = Types.$fShowPlayer
instance GHC.Show.Show [Types.StateChanges]
  = Types.$fShowStateChanges
instance GHC.Show.Show [Types.Suit] = Types.$fShowSuit
instance GHC.Show.Show [Types.Turn] = Types.$fShowTurn
instance GHC.Show.Show [Types.TurnState] = Types.$fShowTurnState
instance GHC.Show.Show [Types.World] = Types.$fShowWorld
"SPEC/Types defaultPutList @ Card" forall ($dBinary :: Data.Binary.Class.Binary
                                                         Types.Card)
  Data.Binary.Class.defaultPutList @ Types.Card $dBinary
  = Types.$fBinaryCard_$sdefaultPutList
"SPEC/Types defaultPutList @ Changes" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Types.Changes)
  Data.Binary.Class.defaultPutList @ Types.Changes $dBinary
  = Types.$fBinaryChanges_$sdefaultPutList
"SPEC/Types defaultPutList @ Command" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Types.Command)
  Data.Binary.Class.defaultPutList @ Types.Command $dBinary
  = Types.$fBinaryCommand_$sdefaultPutList
"SPEC/Types defaultPutList @ Player" forall ($dBinary :: Data.Binary.Class.Binary
                                                           Types.Player)
  Data.Binary.Class.defaultPutList @ Types.Player $dBinary
  = Types.$fBinaryPlayer_$sdefaultPutList
"SPEC/Types defaultPutList @ StateChanges" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Types.StateChanges)
  Data.Binary.Class.defaultPutList @ Types.StateChanges $dBinary
  = Types.$fBinaryChanges_$sdefaultPutList1
"SPEC/Types defaultPutList @ Turn" forall ($dBinary :: Data.Binary.Class.Binary
                                                         Types.Turn)
  Data.Binary.Class.defaultPutList @ Types.Turn $dBinary
  = Types.$fBinaryTurn_$sdefaultPutList
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

