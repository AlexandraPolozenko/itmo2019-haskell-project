
==================== FINAL INTERFACE ====================
2019-10-16 15:30:27.018788 UTC

interface battlefield-0.1.0.0-5FxjAk3MfUxBwzZHxsAwJJ:Types 8065
  interface hash: 28c1700637596583e6541be2b2cf29bb
  ABI hash: 043f08a974677789d65a44378a7017f6
  export-list hash: 7005e9ac06608dc00200eab6cb1a8f0b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.defaultCard
  Types.messageSize
  Types.Card{Types.Card}
  Types.Changes{Types.Changes}
  Types.ClientState{Types.ClientState}
  Types.Combo{Types.Batallion Types.Host Types.Phalanx Types.Skirmish Types.Wedge}
  Types.Command{Types.EmptyCommand Types.Put Types.Take Types.Win}
  Types.Field{Types.Field}
  Types.FieldState{Types.Closed Types.Open}
  Types.Player{Types.One Types.Two}
  Types.StateChanges{Types.FieldClosed Types.NewCard Types.Winner}
  Types.Suit{Types.Black Types.Blue Types.Green Types.Red Types.White Types.Yellow}
  Types.Turn{Types.FinishTurn Types.PutCard Types.TakeCard}
  Types.TurnState{Types.EmptyState Types.GameFinished Types.PutCardTurn}
  Types.World{Types.World}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 network-2.8.0.1 word8-0.1.3
orphans: network-2.8.0.1:Network.Socket
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  binary-0.8.6.0:Data.Binary 47a89cefaa44e49e7fd21d133fce6a7e
import  -/  binary-0.8.6.0:Data.Binary.Class 4a00b809573ad7c27e489f5b66886719
import  -/  binary-0.8.6.0:Data.Binary.Get.Internal d7b46ac8c27f3f91b18a28c57f9c8589
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  network-2.8.0.1:Network.Socket 2fb10212ee6ec3cda4f5f95de27378a3
import  -/  network-2.8.0.1:Network.Socket.Types b396f655f8272982c962f65e0eb004e1
import  -/  word8-0.1.3:Data.Word8 4c659cf945933bcecaaee8b1e623c7ae
f56ea284b75d643f0cf3516e9319b706
  $fBinaryCard :: Data.Binary.Class.Binary Types.Card
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card
                  Types.$fBinaryCard_$cput
                  Types.$fBinaryCard1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Card>_R))
                  Types.$fBinaryCard_$sdefaultPutList -}
f56ea284b75d643f0cf3516e9319b706
  $fBinaryCard1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Card r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Card r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
f56ea284b75d643f0cf3516e9319b706
  $fBinaryCard_$cput :: Types.Card -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U(U))>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
f56ea284b75d643f0cf3516e9319b706
  $fBinaryCard_$sdefaultPutList ::
    [Types.Card] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Card]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Card
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Card)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Card
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryCard_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Card]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fBinaryChanges :: Data.Binary.Class.Binary Types.Changes
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes
                  Types.$fBinaryChanges_$cput
                  Types.$fBinaryChanges1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Changes>_R))
                  Types.$fBinaryChanges_$sdefaultPutList -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fBinaryChanges1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Changes r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Changes r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fBinaryChanges_$cput :: Types.Changes -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Changes) ->
                 case ds of wild { Types.Changes c ->
                 Types.$fBinaryChanges_$sdefaultPutList1 c }) -}
e02657288c8c773ba607aa3907156598
  $fBinaryChanges_$cput1 :: Types.StateChanges -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.StateChanges) ->
                 case Types.$w$cput1 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fBinaryChanges_$sdefaultPutList ::
    [Types.Changes] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Changes]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Changes
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Changes)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Changes
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryChanges_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Changes]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
e02657288c8c773ba607aa3907156598
  $fBinaryChanges_$sdefaultPutList1 ::
    [Types.StateChanges] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.StateChanges]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.StateChanges
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.StateChanges)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.StateChanges
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryChanges_$cput1
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.StateChanges]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fBinaryCommand :: Data.Binary.Class.Binary Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command
                  Types.$fBinaryCommand_$cput
                  Types.$fBinaryCommand3
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Command>_R))
                  Types.$fBinaryCommand_$sdefaultPutList -}
3b2413ba183bf01d86b3cd015b296c1a
  $fBinaryCommand1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl @ r w ww1 ww2 w2 }) -}
4800ed688817682f1e1754499531fd46
  $fBinaryCommand2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl1 @ r w ww1 ww2 w2 }) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fBinaryCommand3 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Command r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Command r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
7f52c38c29b0e70b6df015c80b76ecc0
  $fBinaryCommand4 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail @ r dt Types.$fBinaryCommand5 }) -}
510d4ef530f4fd9134b28b1874d300a8
  $fBinaryCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fBinaryCommand6) -}
28890da3261465cf03c7c8480fb6e66d
  $fBinaryCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
e6281736c141b6484eb82a500e9da5dd
  $fBinaryCommand7 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
55ec82bc2b2fb324ba9aa31d334d0114
  $fBinaryCommand8 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt3 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt3))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
0f5cb0841cfdffe35d476ada7b8bda64
  $fBinaryCommand9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fBinaryCommand_$cput :: Types.Command -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Command) ->
                 case Types.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fBinaryCommand_$sdefaultPutList ::
    [Types.Command] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Command]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Command
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Command)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Command
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryCommand_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Command]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
c2322114e8ca9252b4ef834669bb1040
  $fBinaryPlayer :: Data.Binary.Class.Binary Types.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fBinaryPlayer_$cput
                  Types.$fBinaryPlayer5
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Player>_R))
                  Types.$fBinaryPlayer_$sdefaultPutList -}
04a6a54d0939a4c22304f4da05533a90
  $fBinaryPlayer1 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Types.$fBinaryPlayer2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
fbe636907e6e1e8db308097769052753
  $fBinaryPlayer2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl2 @ r w ww1 ww2 w2 }) -}
1248367b0fa2e8784520862cad042891
  $fBinaryPlayer3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Types.$fBinaryPlayer4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
adcf299d2628bc1a00b2f8fb883ed692
  $fBinaryPlayer4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl3 @ r w ww1 ww2 w2 }) -}
c2322114e8ca9252b4ef834669bb1040
  $fBinaryPlayer5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Player r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Player r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
c2322114e8ca9252b4ef834669bb1040
  $fBinaryPlayer_$cput :: Types.Player -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Player) ->
                 case ds of wild {
                   Types.One
                   -> Types.$fBinaryPlayer3
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Types.Two
                   -> Types.$fBinaryPlayer1
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
c2322114e8ca9252b4ef834669bb1040
  $fBinaryPlayer_$sdefaultPutList ::
    [Types.Player] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Player]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Player
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Player)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Player
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryPlayer_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Player]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
e02657288c8c773ba607aa3907156598
  $fBinaryStateChanges :: Data.Binary.Class.Binary Types.StateChanges
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fBinaryChanges_$cput1
                  Types.$fBinaryStateChanges1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.StateChanges>_R))
                  Types.$fBinaryChanges_$sdefaultPutList1 -}
e02657288c8c773ba607aa3907156598
  $fBinaryStateChanges1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.StateChanges r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.StateChanges r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fBinaryTurn :: Data.Binary.Class.Binary Types.Turn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn
                  Types.$fBinaryTurn_$cput
                  Types.$fBinaryTurn1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Turn>_R))
                  Types.$fBinaryTurn_$sdefaultPutList -}
875456fe529bfc92f6ebbdc3ba02487d
  $fBinaryTurn1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Turn r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Turn r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fBinaryTurn_$cput :: Types.Turn -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Turn) ->
                 case Types.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fBinaryTurn_$sdefaultPutList ::
    [Types.Turn] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Turn]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Turn
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Turn)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Turn
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryTurn_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Turn]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
f56ea284b75d643f0cf3516e9319b706
  $fEqCard :: GHC.Classes.Eq Types.Card
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card Types.$fEqCard_$c== Types.$fEqCard_$c/= -}
f56ea284b75d643f0cf3516e9319b706
  $fEqCard_$c/= :: Types.Card -> Types.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Card) (y :: Types.Card) ->
                 case Types.$fEqCard_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f56ea284b75d643f0cf3516e9319b706
  $fEqCard_$c== :: Types.Card -> Types.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Card) (w1 :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 case w1 of ww3 { Types.Card ww4 ww5 ->
                 Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fEqChanges :: GHC.Classes.Eq Types.Changes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes Types.$fEqChanges_$c== Types.$fEqChanges_$c/= -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fEqChanges_$c/= ::
    Types.Changes -> Types.Changes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Changes) (y :: Types.Changes) ->
                 case x of wild { Types.Changes a1 ->
                 case y of wild1 { Types.Changes b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.StateChanges
                        Types.$fEqStateChanges
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fEqChanges_$c== ::
    Types.Changes -> Types.Changes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Changes) (ds1 :: Types.Changes) ->
                 case ds of wild { Types.Changes a1 ->
                 case ds1 of wild1 { Types.Changes b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Types.StateChanges
                   Types.$fEqStateChanges
                   a1
                   b1 } }) -}
0d40de26a259108595bb117dcaf51e17
  $fEqClientState :: GHC.Classes.Eq Types.ClientState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.ClientState
                  Types.$fEqClientState_$c==
                  Types.$fEqClientState_$c/= -}
0d40de26a259108595bb117dcaf51e17
  $fEqClientState_$c/= ::
    Types.ClientState -> Types.ClientState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.ClientState) (y :: Types.ClientState) ->
                 case Types.$fEqClientState_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0d40de26a259108595bb117dcaf51e17
  $fEqClientState_$c== ::
    Types.ClientState -> Types.ClientState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.ClientState) (w1 :: Types.ClientState) ->
                 case w of ww { Types.ClientState ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Types.ClientState ww7 ww8 ww9 ww10 ww11 ->
                 Types.$w$c==1 ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
762f0804cd5c6af2edad132d5a758c34
  $fEqClientState_$c==1 ::
    Types.TurnState -> Types.TurnState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.TurnState) (ds1 :: Types.TurnState) ->
                 case ds of wild {
                   Types.PutCardTurn a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PutCardTurn b1
                        -> case a1 of wild2 {
                             GHC.Maybe.Nothing
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.True
                                  GHC.Maybe.Just ipv -> GHC.Types.False }
                             GHC.Maybe.Just a2
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.False
                                  GHC.Maybe.Just b2 -> Types.$fEqCard_$c== a2 b2 } } }
                   Types.EmptyState
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.EmptyState -> GHC.Types.True }
                   Types.GameFinished a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.GameFinished b1 -> Types.$fEqStateChanges_$c==1 a1 b1 } }) -}
ee57e920b91561024e8ad25d212333cb
  $fEqCombo :: GHC.Classes.Eq Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo Types.$fEqCombo_$c== Types.$fEqCombo_$c/= -}
ee57e920b91561024e8ad25d212333cb
  $fEqCombo_$c/= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fEqCombo_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ee57e920b91561024e8ad25d212333cb
  $fEqCombo_$c== :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Combo) (ds1 :: Types.Combo) ->
                 case ds of wild {
                   Types.Host a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Host b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Skirmish a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Skirmish b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Batallion a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Batallion b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Phalanx a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Phalanx b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Wedge a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Wedge b1 -> GHC.Classes.eqInt a1 b1 } }) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fEqCommand :: GHC.Classes.Eq Types.Command
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command Types.$fEqCommand_$c== Types.$fEqCommand_$c/= -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fEqCommand_$c/= ::
    Types.Command -> Types.Command -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Command) (y :: Types.Command) ->
                 case x of wild {
                   Types.Put
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Put -> GHC.Types.False }
                   Types.Take a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.Take b1
                        -> case Types.$fEqCard_$c== a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Types.Win a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.Win b1
                        -> case a1 of wild2 {
                             Types.One
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                             Types.Two
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } } }
                   Types.EmptyCommand
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.EmptyCommand -> GHC.Types.False } }) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fEqCommand_$c== ::
    Types.Command -> Types.Command -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Command) (ds1 :: Types.Command) ->
                 case ds of wild {
                   Types.Put
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Put -> GHC.Types.True }
                   Types.Take a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Take b1 -> Types.$fEqCard_$c== a1 b1 }
                   Types.Win a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Win b1 -> Types.$fEqStateChanges_$c==1 a1 b1 }
                   Types.EmptyCommand
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.EmptyCommand -> GHC.Types.True } }) -}
bc869bdca4fff34b50ca5746463a585a
  $fEqField :: GHC.Classes.Eq Types.Field
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Field Types.$fEqField_$c== Types.$fEqField_$c/= -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fEqFieldState :: GHC.Classes.Eq Types.FieldState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.FieldState
                  Types.$fEqField_$c==1
                  Types.$fEqFieldState_$c/= -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fEqFieldState_$c/= ::
    Types.FieldState -> Types.FieldState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.FieldState) (y :: Types.FieldState) ->
                 case x of wild {
                   Types.Closed a1
                   -> case y of wild1 {
                        Types.Closed b1
                        -> case a1 of wild2 {
                             Types.One
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                             Types.Two
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } }
                        Types.Open -> GHC.Types.True }
                   Types.Open
                   -> case y of wild1 {
                        Types.Closed ipv -> GHC.Types.True
                        Types.Open -> GHC.Types.False } }) -}
bc869bdca4fff34b50ca5746463a585a
  $fEqField_$c/= :: Types.Field -> Types.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Field) (y :: Types.Field) ->
                 case Types.$fEqField_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bc869bdca4fff34b50ca5746463a585a
  $fEqField_$c== :: Types.Field -> Types.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Field) (w1 :: Types.Field) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Field ww5 ww6 ww7 ->
                 Types.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fEqField_$c==1 ::
    Types.FieldState -> Types.FieldState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.FieldState) (ds1 :: Types.FieldState) ->
                 case ds of wild {
                   Types.Closed a1
                   -> case ds1 of wild1 {
                        Types.Closed b1 -> Types.$fEqStateChanges_$c==1 a1 b1
                        Types.Open -> GHC.Types.False }
                   Types.Open
                   -> case ds1 of wild1 {
                        Types.Closed ipv -> GHC.Types.False
                        Types.Open -> GHC.Types.True } }) -}
c2322114e8ca9252b4ef834669bb1040
  $fEqPlayer :: GHC.Classes.Eq Types.Player
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fEqStateChanges_$c==1
                  Types.$fEqPlayer_$c/= -}
c2322114e8ca9252b4ef834669bb1040
  $fEqPlayer_$c/= :: Types.Player -> Types.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Player) (y :: Types.Player) ->
                 case x of wild {
                   Types.One
                   -> case y of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                   Types.Two
                   -> case y of wild1 {
                        Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } }) -}
e02657288c8c773ba607aa3907156598
  $fEqStateChanges :: GHC.Classes.Eq Types.StateChanges
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fEqStateChanges_$c==
                  Types.$fEqStateChanges_$c/= -}
e02657288c8c773ba607aa3907156598
  $fEqStateChanges_$c/= ::
    Types.StateChanges -> Types.StateChanges -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.StateChanges) (y :: Types.StateChanges) ->
                 case Types.$fEqStateChanges_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e02657288c8c773ba607aa3907156598
  $fEqStateChanges_$c== ::
    Types.StateChanges -> Types.StateChanges -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.StateChanges)
                   (ds1 :: Types.StateChanges) ->
                 case ds of wild {
                   Types.NewCard a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.NewCard b1 b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a2 of wild4 {
                                  Types.One
                                  -> case b2 of wild5 {
                                       Types.One -> Types.$fEqCard_$c== a3 b3
                                       Types.Two -> GHC.Types.False }
                                  Types.Two
                                  -> case b2 of wild5 {
                                       Types.One -> GHC.Types.False
                                       Types.Two -> Types.$fEqCard_$c== a3 b3 } } } } } }
                   Types.FieldClosed a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FieldClosed b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1# -> Types.$fEqStateChanges_$c==1 a2 b2 } } } }
                   Types.Winner a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Winner b1 -> Types.$fEqStateChanges_$c==1 a1 b1 } }) -}
c2322114e8ca9252b4ef834669bb1040
  $fEqStateChanges_$c==1 ::
    Types.Player -> Types.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Player) (ds1 :: Types.Player) ->
                 case ds of wild {
                   Types.One
                   -> case ds1 of wild1 {
                        Types.One -> GHC.Types.True Types.Two -> GHC.Types.False }
                   Types.Two
                   -> case ds1 of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> GHC.Types.True } }) -}
41e4a898b0aab1c62810f486f4b4e31a
  $fEqSuit :: GHC.Classes.Eq Types.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Suit Types.$fEqSuit_$c== Types.$fEqSuit_$c/= -}
41e4a898b0aab1c62810f486f4b4e31a
  $fEqSuit_$c/= :: Types.Suit -> Types.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Suit) (y :: Types.Suit) ->
                 case x of wild {
                   Types.Red
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Red -> GHC.Types.False }
                   Types.Blue
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Blue -> GHC.Types.False }
                   Types.Yellow
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Yellow -> GHC.Types.False }
                   Types.Green
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Green -> GHC.Types.False }
                   Types.White
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.White -> GHC.Types.False }
                   Types.Black
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Black -> GHC.Types.False } }) -}
41e4a898b0aab1c62810f486f4b4e31a
  $fEqSuit_$c== :: Types.Suit -> Types.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Suit) (ds1 :: Types.Suit) ->
                 case ds of wild {
                   Types.Red
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Red -> GHC.Types.True }
                   Types.Blue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Blue -> GHC.Types.True }
                   Types.Yellow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Yellow -> GHC.Types.True }
                   Types.Green
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Green -> GHC.Types.True }
                   Types.White
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.White -> GHC.Types.True }
                   Types.Black
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Black -> GHC.Types.True } }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fEqTurn :: GHC.Classes.Eq Types.Turn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn Types.$fEqTurn_$c== Types.$fEqTurn_$c/= -}
762f0804cd5c6af2edad132d5a758c34
  $fEqTurnState :: GHC.Classes.Eq Types.TurnState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.TurnState
                  Types.$fEqClientState_$c==1
                  Types.$fEqTurnState_$c/= -}
762f0804cd5c6af2edad132d5a758c34
  $fEqTurnState_$c/= ::
    Types.TurnState -> Types.TurnState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.TurnState) (y :: Types.TurnState) ->
                 case Types.$fEqClientState_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fEqTurn_$c/= :: Types.Turn -> Types.Turn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Turn) (y :: Types.Turn) ->
                 case Types.$fEqTurn_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fEqTurn_$c== :: Types.Turn -> Types.Turn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Turn) (ds1 :: Types.Turn) ->
                 case ds of wild {
                   Types.PutCard a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PutCard b1 b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a2 of wild4 {
                                  Types.One
                                  -> case b2 of wild5 {
                                       Types.One -> Types.$fEqCard_$c== a3 b3
                                       Types.Two -> GHC.Types.False }
                                  Types.Two
                                  -> case b2 of wild5 {
                                       Types.One -> GHC.Types.False
                                       Types.Two -> Types.$fEqCard_$c== a3 b3 } } } } } }
                   Types.FinishTurn
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.FinishTurn -> GHC.Types.True }
                   Types.TakeCard a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.TakeCard b1 -> Types.$fEqCard_$c== a1 b1 } }) -}
6014835ff5e109d16d91c6a268537c94
  $fEqWorld :: GHC.Classes.Eq Types.World
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.World Types.$fEqWorld_$c== Types.$fEqWorld_$c/= -}
6014835ff5e109d16d91c6a268537c94
  $fEqWorld_$c/= :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.World) (y :: Types.World) ->
                 case Types.$fEqWorld_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6014835ff5e109d16d91c6a268537c94
  $fEqWorld_$c== :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.World) (w1 :: Types.World) ->
                 case w of ww { Types.World ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.World ww5 ww6 ww7 ->
                 Types.$w$c==3 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo :: GHC.Classes.Ord Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo
                  Types.$fEqCombo
                  Types.$fOrdCombo_$ccompare
                  Types.$fOrdCombo_$c<
                  Types.$fOrdCombo_$c<=
                  Types.$fOrdCombo_$c>
                  Types.$fOrdCombo_$c>=
                  Types.$fOrdCombo_$cmax
                  Types.$fOrdCombo_$cmin -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$c< :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$c<= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$c> :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$c>= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$ccompare ::
    Types.Combo -> Types.Combo -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Combo) (b :: Types.Combo) ->
                 case a of wild {
                   Types.Host a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Types.Host b1 -> GHC.Classes.compareInt a1 b1 }
                   Types.Skirmish a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Types.Host ds -> GHC.Types.GT
                        Types.Skirmish b1 -> GHC.Classes.compareInt a1 b1 }
                   Types.Batallion a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Batallion ds -> GHC.Classes.compareInt a1 ds
                        Types.Phalanx ds -> GHC.Types.LT
                        Types.Wedge ds -> GHC.Types.LT }
                   Types.Phalanx a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Phalanx b1 -> GHC.Classes.compareInt a1 b1
                        Types.Wedge ds -> GHC.Types.LT }
                   Types.Wedge a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Wedge b1 -> GHC.Classes.compareInt a1 b1 } }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$cmax :: Types.Combo -> Types.Combo -> Types.Combo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
ee57e920b91561024e8ad25d212333cb
  $fOrdCombo_$cmin :: Types.Combo -> Types.Combo -> Types.Combo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
f56ea284b75d643f0cf3516e9319b706
  $fShowCard :: GHC.Show.Show Types.Card
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card
                  Types.$fShowCard_$cshowsPrec
                  Types.$fShowCard_$cshow
                  Types.$fShowCard_$cshowList -}
f56ea284b75d643f0cf3516e9319b706
  $fShowCard1 :: Types.Card -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U))><L,U>,
     Unfolding: (\ (w :: Types.Card) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 Types.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
3f1cbb6c70050b3488fba1b640fe8dfa
  $fShowCard10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard11) -}
f357850ffe57c0c960c1b8fb223e7943
  $fShowCard11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Blue"#) -}
004e136a24bdcc6b4a84126e214c9a14
  $fShowCard12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard13) -}
95870c4afa2326237587328704078d90
  $fShowCard13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Red"#) -}
29c5b7c226f92d7c6e32b87368e213af
  $fShowCard14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Card "#) -}
547859f95ba189c24d6b229b66343287
  $fShowCard2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard3) -}
28cd2e3045aecff2a58c1a54b8ec4c4a
  $fShowCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Black"#) -}
77ef3506ac82872028fe13128912dce8
  $fShowCard4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard5) -}
a206db319580957649786d568f341c0e
  $fShowCard5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("White"#) -}
b9c90b0c3d9535f4cced36341d812de8
  $fShowCard6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard7) -}
8f756c0c26a4f0586524b0abf21a5bb2
  $fShowCard7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Green"#) -}
aa2e9a8f46478df4fb7ad514e29ee191
  $fShowCard8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard9) -}
29fc1f6a6b1f78e29e727661a703d6ef
  $fShowCard9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Yellow"#) -}
f56ea284b75d643f0cf3516e9319b706
  $fShowCard_$cshow :: Types.Card -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 -> Types.$w$cshow ww1 ww2 }) -}
f56ea284b75d643f0cf3516e9319b706
  $fShowCard_$cshowList :: [Types.Card] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Card]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Card Types.$fShowCard1 ls s) -}
f56ea284b75d643f0cf3516e9319b706
  $fShowCard_$cshowsPrec ::
    GHC.Types.Int -> Types.Card -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Card)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Card ww3 ww4 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fShowChanges :: GHC.Show.Show Types.Changes
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes
                  Types.$fShowChanges_$cshowsPrec
                  Types.$fShowChanges_$cshow
                  Types.$fShowChanges_$cshowList -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fShowChanges1 :: Types.Changes -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Types.Changes) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Changes ww1 ->
                 Types.$w$cshowsPrec2 0# ww1 w1 }) -}
593cd4efbcf4998a4c9b8743100de160
  $fShowChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Changes "#) -}
15c782c1c7e09986da26e863e9b03f92
  $fShowChanges3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fShowChanges_$cshow :: Types.Changes -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Changes) ->
                 Types.$fShowChanges_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fShowChanges_$cshowList :: [Types.Changes] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Changes]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Changes Types.$fShowChanges1 ls s) -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $fShowChanges_$cshowsPrec ::
    GHC.Types.Int -> Types.Changes -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Changes)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Changes ww3 ->
                 Types.$w$cshowsPrec2 ww1 ww3 w2 } }) -}
0d40de26a259108595bb117dcaf51e17
  $fShowClientState :: GHC.Show.Show Types.ClientState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.ClientState
                  Types.$fShowClientState_$cshowsPrec2
                  Types.$fShowClientState_$cshow
                  Types.$fShowClientState_$cshowList -}
0d40de26a259108595bb117dcaf51e17
  $fShowClientState1 :: Types.ClientState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Unfolding: (\ (w :: Types.ClientState) ->
                 case w of ww { Types.ClientState ww1 ww2 ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 ww5 }) -}
154476d94f60d913044523d3b6764e2e
  $fShowClientState10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field "#) -}
83276893124fafe1975bbe127ea3730f
  $fShowClientState11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d191e1ca800c453ef2f8375d26953f84
  $fShowClientState12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState13) -}
ca290995f321aaf1c271c443a6044d65
  $fShowClientState13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Open"#) -}
a9c3868ac9b75c0011070eb22080b205
  $fShowClientState14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState15) -}
5970d9f70bfbd422490f737f9b0913d5
  $fShowClientState15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Closed "#) -}
2947e9a2543d929a03748c73aaa0039d
  $fShowClientState16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState17) -}
eb5973f3058bd13e0ed6815ec28f1ed2
  $fShowClientState17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameFinished "#) -}
e352f233b1ee31fab938e69544b0d74a
  $fShowClientState18 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState19) -}
f6baac664b8617c166794a3c7bd3a464
  $fShowClientState19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState20) -}
197c6331e44be81b35586c6d7a6c8d61
  $fShowClientState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState3) -}
b291d5ef08efd5a5c44a55e261bd3edb
  $fShowClientState20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyState"#) -}
6f56a2027ea7a5e42606d89a341c31d8
  $fShowClientState21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState22) -}
f7a150fa33e8df7aa1d422fbad4be35a
  $fShowClientState22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PutCardTurn "#) -}
6362dba729f46906b7b45bf2d5777fce
  $fShowClientState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ClientState "#) -}
fea409a8877522ce1e5a3a4aa5e38ed9
  $fShowClientState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState5) -}
bef72a212687eef6d908cbb5b0bc5c15
  $fShowClientState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
28c8b2d12744720102d83ae7ef539624
  $fShowClientState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState7) -}
6d82f9608a6595350d9a75e6e9646720
  $fShowClientState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("One"#) -}
bc869bdca4fff34b50ca5746463a585a
  $fShowClientState8 :: Types.Field -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Types.Field) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec5 0# ww1 ww2 ww3 w1 }) -}
fb73a49a8948b4745a2d36362a875d09
  $fShowClientState9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState10) -}
0d40de26a259108595bb117dcaf51e17
  $fShowClientState_$cshow :: Types.ClientState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.ClientState) ->
                 Types.$fShowClientState_$cshowsPrec2
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0d40de26a259108595bb117dcaf51e17
  $fShowClientState_$cshowList ::
    [Types.ClientState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.ClientState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.ClientState
                   Types.$fShowClientState1
                   ls
                   s) -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fShowClientState_$cshowsPrec ::
    GHC.Types.Int -> Types.FieldState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.FieldState)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.Closed b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowClientState14
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 eta
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState14
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) })) } }
                   Types.Open
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState12 eta }) -}
762f0804cd5c6af2edad132d5a758c34
  $fShowClientState_$cshowsPrec1 ::
    GHC.Types.Int -> Types.TurnState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Types.TurnState) ->
                 case ds of wild {
                   Types.PutCardTurn b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Types.Card
                            Types.$fShowCard
                            Types.$fShowClientState11
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState21 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState21
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Types.EmptyState -> Types.$fShowClientState18
                   Types.GameFinished b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowClientState16
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 x1
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 x1 })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState16
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x1) })) } } }) -}
0d40de26a259108595bb117dcaf51e17
  $fShowClientState_$cshowsPrec2 ::
    GHC.Types.Int -> Types.ClientState -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.ClientState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.ClientState ww3 ww4 ww5 ww6 ww7 ->
                 Types.$w$cshowsPrec4 ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
ee57e920b91561024e8ad25d212333cb
  $fShowCombo :: GHC.Show.Show Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo
                  Types.$fShowCombo_$cshowsPrec
                  Types.$fShowCombo_$cshow
                  Types.$fShowCombo_$cshowList -}
ee57e920b91561024e8ad25d212333cb
  $fShowCombo1 :: Types.Combo -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Types.Combo) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec6 0# w w1) -}
ee57e920b91561024e8ad25d212333cb
  $fShowCombo_$cshow :: Types.Combo -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Combo) ->
                 Types.$fShowCombo_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ee57e920b91561024e8ad25d212333cb
  $fShowCombo_$cshowList :: [Types.Combo] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Combo]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Combo Types.$fShowCombo1 ls s) -}
ee57e920b91561024e8ad25d212333cb
  $fShowCombo_$cshowsPrec ::
    GHC.Types.Int -> Types.Combo -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Combo)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec6 ww1 w1 w2 }) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fShowCommand :: GHC.Show.Show Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command
                  Types.$fShowCommand_$cshowsPrec
                  Types.$fShowCommand_$cshow
                  Types.$fShowCommand_$cshowList -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fShowCommand1 :: Types.Command -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowCommand_$cshowsPrec
                   Types.$fShowChanges3) -}
b8fc75a2dd49f7560ac2af988bb4510e
  $fShowCommand10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
edc5cb22431c9481fb1628eb44626e8e
  $fShowCommand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand3) -}
8832876713342af92721183c2f0a1d9f
  $fShowCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyCommand"#) -}
dd2e6976f44b3641f266fed56d977b3c
  $fShowCommand4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand5) -}
c386a318092da7bc298583face1f5676
  $fShowCommand5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Win "#) -}
3236b69bea9c434ba604c7bcfc776cc0
  $fShowCommand6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand7) -}
c29874e53641e5511b4f399bbd1b8019
  $fShowCommand7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Take "#) -}
bbcbfe924a6f163e60f2c7e25913ff87
  $fShowCommand8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand9) -}
fcb32677de9b316a18475f4f3d6673bb
  $fShowCommand9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Put"#) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fShowCommand_$cshow :: Types.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.Command) ->
                 case x of wild {
                   Types.Put -> Types.$fShowCommand8
                   Types.Take b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCommand6
                        (case b1 of wild1 { Types.Card b2 b3 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.CString.unpackAppendCString#
                              Types.$fShowCard14
                              (Types.$w$cshowsPrec1
                                 b2
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (case b3 of ww2 { GHC.Types.I# ww3 ->
                                     case GHC.Show.$wshowSignedInt
                                            11#
                                            ww3
                                            Types.$fShowCommand10 of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))) })
                   Types.Win b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCommand4
                        (case b1 of wild1 {
                           Types.One -> Types.$fShowClientState6
                           Types.Two -> Types.$fShowClientState4 })
                   Types.EmptyCommand -> Types.$fShowCommand2 }) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fShowCommand_$cshowList :: [Types.Command] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Command]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Command Types.$fShowCommand1 ls s) -}
972948a7bc6a3f55f0e606c1cf6d121a
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int -> Types.Command -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Command)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.Put -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCommand8 eta
                   Types.Take b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCommand6
                             (case b1 of ww { Types.Card ww1 ww2 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCommand6
                                (case b1 of ww { Types.Card ww1 ww2 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta) })) } }
                   Types.Win b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCommand4
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 eta
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCommand4
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) })) } }
                   Types.EmptyCommand
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCommand2 eta }) -}
bc869bdca4fff34b50ca5746463a585a
  $fShowField :: GHC.Show.Show Types.Field
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Field
                  Types.$fShowField_$cshowsPrec
                  Types.$fShowField_$cshow
                  Types.$fShowField_$cshowList -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fShowFieldState :: GHC.Show.Show Types.FieldState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.FieldState
                  Types.$fShowClientState_$cshowsPrec
                  Types.$fShowFieldState_$cshow
                  Types.$fShowFieldState_$cshowList -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fShowFieldState1 :: Types.FieldState -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowClientState_$cshowsPrec
                   Types.$fShowChanges3) -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fShowFieldState_$cshow :: Types.FieldState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.FieldState) ->
                 Types.$fShowClientState_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5d2bff0cd35152ac0d84f794d4df1e90
  $fShowFieldState_$cshowList :: [Types.FieldState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.FieldState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.FieldState
                   Types.$fShowFieldState1
                   ls
                   s) -}
bc869bdca4fff34b50ca5746463a585a
  $fShowField_$cshow :: Types.Field -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Field) ->
                 Types.$fShowField_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bc869bdca4fff34b50ca5746463a585a
  $fShowField_$cshowList :: [Types.Field] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Field]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Field Types.$fShowClientState8 ls s) -}
bc869bdca4fff34b50ca5746463a585a
  $fShowField_$cshowsPrec ::
    GHC.Types.Int -> Types.Field -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Field)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Field ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec5 ww1 ww3 ww4 ww5 w2 } }) -}
c2322114e8ca9252b4ef834669bb1040
  $fShowPlayer :: GHC.Show.Show Types.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fShowPlayer_$cshowsPrec
                  Types.$fShowPlayer_$cshow
                  Types.$fShowPlayer_$cshowList -}
c2322114e8ca9252b4ef834669bb1040
  $fShowPlayer1 :: Types.Player -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Player) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState6)
                        eta
                   Types.Two
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState4)
                        eta }) -}
c2322114e8ca9252b4ef834669bb1040
  $fShowPlayer_$cshow :: Types.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Player) ->
                 case x of wild {
                   Types.One -> Types.$fShowClientState6
                   Types.Two -> Types.$fShowClientState4 }) -}
c2322114e8ca9252b4ef834669bb1040
  $fShowPlayer_$cshowList :: [Types.Player] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Player]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Player Types.$fShowPlayer1 ls s) -}
c2322114e8ca9252b4ef834669bb1040
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Types.Player -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Player)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState6)
                        eta
                   Types.Two
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState4)
                        eta }) -}
e02657288c8c773ba607aa3907156598
  $fShowStateChanges :: GHC.Show.Show Types.StateChanges
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fShowStateChanges_$cshowsPrec
                  Types.$fShowStateChanges_$cshow
                  Types.$fShowStateChanges_$cshowList -}
e02657288c8c773ba607aa3907156598
  $fShowStateChanges1 :: Types.StateChanges -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Types.StateChanges) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec3 0# w w1) -}
e02657288c8c773ba607aa3907156598
  $fShowStateChanges_$cshow :: Types.StateChanges -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.StateChanges) ->
                 Types.$fShowStateChanges_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e02657288c8c773ba607aa3907156598
  $fShowStateChanges_$cshowList ::
    [Types.StateChanges] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.StateChanges]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.StateChanges
                   Types.$fShowStateChanges1
                   ls
                   s) -}
e02657288c8c773ba607aa3907156598
  $fShowStateChanges_$cshowsPrec ::
    GHC.Types.Int -> Types.StateChanges -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.StateChanges)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 w2 }) -}
41e4a898b0aab1c62810f486f4b4e31a
  $fShowSuit :: GHC.Show.Show Types.Suit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Suit
                  Types.$fShowSuit_$cshowsPrec
                  Types.$fShowSuit_$cshow
                  Types.$fShowSuit_$cshowList -}
41e4a898b0aab1c62810f486f4b4e31a
  $fShowSuit_$cshow :: Types.Suit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Suit) ->
                 case x of wild {
                   Types.Red -> Types.$fShowCard12
                   Types.Blue -> Types.$fShowCard10
                   Types.Yellow -> Types.$fShowCard8
                   Types.Green -> Types.$fShowCard6
                   Types.White -> Types.$fShowCard4
                   Types.Black -> Types.$fShowCard2 }) -}
41e4a898b0aab1c62810f486f4b4e31a
  $fShowSuit_$cshowList :: [Types.Suit] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Suit]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Suit Types.$w$cshowsPrec1 ls s) -}
41e4a898b0aab1c62810f486f4b4e31a
  $fShowSuit_$cshowsPrec ::
    GHC.Types.Int -> Types.Suit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Suit)
                   (w2 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec1 w1 w2) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fShowTurn :: GHC.Show.Show Types.Turn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn
                  Types.$fShowTurn_$cshowsPrec
                  Types.$fShowTurn_$cshow
                  Types.$fShowTurn_$cshowList -}
875456fe529bfc92f6ebbdc3ba02487d
  $fShowTurn1 :: Types.Turn -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowTurn_$cshowsPrec Types.$fShowChanges3) -}
2b73b83f20d612d41fe68c21d42f37e4
  $fShowTurn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn3) -}
2262c6fe234df249e2be18fb558b8238
  $fShowTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TakeCard "#) -}
8d3dbe6d8fe6ab0663ccc59bddfeb167
  $fShowTurn4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn5) -}
1ca05b8a9045340b3e2fe008209a3d09
  $fShowTurn5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FinishTurn"#) -}
c8eece71470e51156f91fec32a3bbd1b
  $fShowTurn6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn7) -}
76210f6d5063d2b438d5307a1eca42e8
  $fShowTurn7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PutCard "#) -}
762f0804cd5c6af2edad132d5a758c34
  $fShowTurnState :: GHC.Show.Show Types.TurnState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.TurnState
                  Types.$fShowClientState_$cshowsPrec1
                  Types.$fShowTurnState_$cshow
                  Types.$fShowTurnState_$cshowList -}
762f0804cd5c6af2edad132d5a758c34
  $fShowTurnState1 :: Types.TurnState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Types.$fShowClientState_$cshowsPrec1
                   Types.$fShowChanges3) -}
ca08433347ee1e03d8ed30ec063d45d3
  $fShowTurnState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
95f76dd3ef33001cb17389f52a205fb5
  $fShowTurnState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
67c77c826b23c31713ffdc1f34611b48
  $fShowTurnState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState19
                   (GHC.Types.[] @ GHC.Types.Char)) -}
19676220a7aaa7db02d06c176d4d8603
  $fShowTurnState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
762f0804cd5c6af2edad132d5a758c34
  $fShowTurnState_$cshow :: Types.TurnState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.TurnState) ->
                 case x of wild {
                   Types.PutCardTurn b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowClientState21
                        (case b1 of wild1 {
                           GHC.Maybe.Nothing -> Types.$fShowTurnState5
                           GHC.Maybe.Just b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowMaybe1
                                   (case b2 of ww { Types.Card ww1 ww2 ->
                                    Types.$w$cshowsPrec 11# ww1 ww2 Types.$fShowCommand10 })) })
                   Types.EmptyState -> Types.$fShowTurnState4
                   Types.GameFinished b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowClientState16
                        (case b1 of wild1 {
                           Types.One -> Types.$fShowTurnState3
                           Types.Two -> Types.$fShowTurnState2 }) }) -}
762f0804cd5c6af2edad132d5a758c34
  $fShowTurnState_$cshowList :: [Types.TurnState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.TurnState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.TurnState
                   Types.$fShowTurnState1
                   ls
                   s) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fShowTurn_$cshow :: Types.Turn -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Turn) ->
                 Types.$fShowTurn_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fShowTurn_$cshowList :: [Types.Turn] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Turn]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Turn Types.$fShowTurn1 ls s) -}
875456fe529bfc92f6ebbdc3ba02487d
  $fShowTurn_$cshowsPrec ::
    GHC.Types.Int -> Types.Turn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.Turn)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.PutCard b1 b2 b3
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          case b1 of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 11#
                                 ww3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (case b2 of wild2 {
                                       Types.One
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowClientState6
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (case b3 of ww { Types.Card ww1 ww5 ->
                                                Types.$w$cshowsPrec 11# ww1 ww5 x1 }))
                                       Types.Two
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowClientState4
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (case b3 of ww { Types.Card ww1 ww5 ->
                                                Types.$w$cshowsPrec
                                                  11#
                                                  ww1
                                                  ww5
                                                  x1 })) })) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTurn6 (g eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTurn6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta))) } }
                   Types.FinishTurn
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTurn4 eta
                   Types.TakeCard b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowTurn2
                             (case b1 of ww { Types.Card ww1 ww2 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTurn2
                                (case b1 of ww { Types.Card ww1 ww2 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta) })) } } }) -}
6014835ff5e109d16d91c6a268537c94
  $fShowWorld :: GHC.Show.Show Types.World
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.World
                  Types.$fShowWorld_$cshowsPrec
                  Types.$fShowWorld_$cshow
                  Types.$fShowWorld_$cshowList -}
6014835ff5e109d16d91c6a268537c94
  $fShowWorld1 :: Types.World -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Types.World) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.World ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec7 0# ww1 ww2 ww3 w1 }) -}
4e8610b6be9300b90302c52f4b4eec9a
  $fShowWorld2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowWorld3) -}
7803625271b58ce2368233a62a123523
  $fShowWorld3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World "#) -}
6014835ff5e109d16d91c6a268537c94
  $fShowWorld_$cshow :: Types.World -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.World) ->
                 Types.$fShowWorld_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6014835ff5e109d16d91c6a268537c94
  $fShowWorld_$cshowList :: [Types.World] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.World]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.World Types.$fShowWorld1 ls s) -}
6014835ff5e109d16d91c6a268537c94
  $fShowWorld_$cshowsPrec ::
    GHC.Types.Int -> Types.World -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.World)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.World ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec7 ww1 ww3 ww4 ww5 w2 } }) -}
85de2aaaa6f9068c2ad90d3d49aba5be
  $tc'Batallion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3788905735620177015##
                   16390476013009308224##
                   Types.$trModule
                   Types.$tc'Batallion2
                   0#
                   Types.$tc'Batallion1) -}
04a3152da35783c1cf243708592b12f3
  $tc'Batallion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e6b4bb7edbdbb3493250a0b2ed655734
  $tc'Batallion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Batallion3) -}
ae0b93bd71096e083a295598a0ece898
  $tc'Batallion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Batallion"#) -}
99046a59a154c7029fe7e238dcad10f1
  $tc'Black :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6724620437397911510##
                   3779226188106351223##
                   Types.$trModule
                   Types.$tc'Black2
                   0#
                   Types.$tc'Black1) -}
70a20fa16aa48f82d0a37977edc0f2b4
  $tc'Black1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
9c81a710b1f009afe4788dd447173b5e
  $tc'Black2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Black3) -}
dfa19c66f2c3811d2ff13f8b291594bb
  $tc'Black3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Black"#) -}
d908f2670e6aadcade05f1b1cb670e77
  $tc'Blue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9088263095915562004##
                   4717958900564195598##
                   Types.$trModule
                   Types.$tc'Blue1
                   0#
                   Types.$tc'Black1) -}
e409e0a08b80c4fae89631c1f8e610e9
  $tc'Blue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Blue2) -}
eeb8a228434728057c18da8f78dd9877
  $tc'Blue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Blue"#) -}
e3ef887163a0c20510d3c2e1561fa6ff
  $tc'Card :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12183670077058160380##
                   10522856224403476942##
                   Types.$trModule
                   Types.$tc'Card2
                   0#
                   Types.$tc'Card1) -}
566f149ab614b2824fe37b4b62bf56b7
  $tc'Card1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
103aecc24d15d9fe4486d135699805da
  $tc'Card2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Card3) -}
725a85717c3eda044641e37165e519fd
  $tc'Card3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Card"#) -}
3f0e8cd2933626511445adb2b6819810
  $tc'Changes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1277208228500787065##
                   13774745032446992998##
                   Types.$trModule
                   Types.$tc'Changes2
                   0#
                   Types.$tc'Changes1) -}
4292cf667a9115e4e04fdb40f7c67c36
  $tc'Changes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
160eacbb6e60472d9144257a45538dec
  $tc'Changes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Changes3) -}
eaca1fcdcc2a259cb8b6d678bae34298
  $tc'Changes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Changes"#) -}
f02f9cdf49278e19a5c52dffb1ed6780
  $tc'ClientState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17939842812354294207##
                   1522819428057362947##
                   Types.$trModule
                   Types.$tc'ClientState2
                   0#
                   Types.$tc'ClientState1) -}
a086f6f05432e065429fb9d60236c071
  $tc'ClientState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
80e54443b9850094f2e52701f2681f36
  $tc'ClientState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'ClientState3) -}
c93cdf4112bd86d0347d27544b9fa085
  $tc'ClientState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClientState"#) -}
855b1c6a247a0d892e06aba47d3a3578
  $tc'Closed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15190759590131286837##
                   17763185072717822368##
                   Types.$trModule
                   Types.$tc'Closed2
                   0#
                   Types.$tc'Closed1) -}
b7242be3a704eddc865844b2faa7614f
  $tc'Closed1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
49b4c7e62f1039f8715b36057066ad23
  $tc'Closed2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Closed3) -}
03ee019c3e7427c01ba1aa009ade0555
  $tc'Closed3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Closed"#) -}
8f0bafcd46dc330084a6ec8854b6e057
  $tc'EmptyCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8205294450203539004##
                   353616697135322500##
                   Types.$trModule
                   Types.$tc'EmptyCommand2
                   0#
                   Types.$tc'EmptyCommand1) -}
ffe164f071f8cd414e64e0b776e357af
  $tc'EmptyCommand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b8c903fc66a229caddb02c9bb8e4ed7f
  $tc'EmptyCommand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'EmptyCommand3) -}
4e96b5e5eb337b58f526fd06bf62872e
  $tc'EmptyCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyCommand"#) -}
987f8bada6a93386b871d03d64a6f266
  $tc'EmptyState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6722037953529360082##
                   12825149402225722242##
                   Types.$trModule
                   Types.$tc'EmptyState2
                   0#
                   Types.$tc'EmptyState1) -}
5bdb9c38a92e1c1ebd6d8347820f8a2f
  $tc'EmptyState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
2dace684ecebb5c7336c9db093f16028
  $tc'EmptyState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'EmptyState3) -}
3025512cc516668788da06df5b889087
  $tc'EmptyState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyState"#) -}
74063a7d4f1fa44cfb6437a26763f506
  $tc'Field :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7951996483345123779##
                   4529908904466884224##
                   Types.$trModule
                   Types.$tc'Field2
                   0#
                   Types.$tc'Field1) -}
46654499f3be67b67815d22b81e033ea
  $tc'Field1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b1c461a284563a16106b7f0f8620eb2
  $tc'Field2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Field3) -}
5f292747e497922737d3df36831dbe1e
  $tc'Field3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Field"#) -}
462b8e638fc4ca61d17e34ea3a618af0
  $tc'FieldClosed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4490155115289774723##
                   13613721714857043927##
                   Types.$trModule
                   Types.$tc'FieldClosed2
                   0#
                   Types.$tc'FieldClosed1) -}
596babfb0ad4706bab113221101b231b
  $tc'FieldClosed1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5fd95d3a7ddea3c2722a8bf9d7094a6a
  $tc'FieldClosed2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'FieldClosed3) -}
bd54fb26f55f806b04f1b5a16f050204
  $tc'FieldClosed3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FieldClosed"#) -}
3e3800aa7cdb22c67a24d15bd91c631e
  $tc'FinishTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11033821279192252932##
                   4779197793370268926##
                   Types.$trModule
                   Types.$tc'FinishTurn2
                   0#
                   Types.$tc'FinishTurn1) -}
788158a65822c429eed1c8543f983b18
  $tc'FinishTurn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
c219783f59389bc4c674a0a67e3693ce
  $tc'FinishTurn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'FinishTurn3) -}
452382ee0d2684d9908e17821d7b0716
  $tc'FinishTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FinishTurn"#) -}
f68513272ab352f1fc3af56a8d37c911
  $tc'GameFinished :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5372719738519974271##
                   13775881716950119967##
                   Types.$trModule
                   Types.$tc'GameFinished2
                   0#
                   Types.$tc'GameFinished1) -}
f9d94aba71bc48ac562fc70e174ebe90
  $tc'GameFinished1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0b2d82f2cfecd891db266da570884ec1
  $tc'GameFinished2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'GameFinished3) -}
0767217a749769d251f0910e21d07520
  $tc'GameFinished3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameFinished"#) -}
a90794b19fcc9f269ceda267cb5cdc4a
  $tc'Green :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9420675458043799555##
                   9447296229023176154##
                   Types.$trModule
                   Types.$tc'Green1
                   0#
                   Types.$tc'Black1) -}
a2e61dd00ab887f70c03eb941aefc52a
  $tc'Green1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Green2) -}
69651dec208cd3b02575d44f30809e54
  $tc'Green2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Green"#) -}
1e0585df3e5b4b0b8153a93d28fa1b49
  $tc'Host :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7580259799375059147##
                   2962878996875459658##
                   Types.$trModule
                   Types.$tc'Host1
                   0#
                   Types.$tc'Batallion1) -}
c6382e8426a47b438f53c95bebccc307
  $tc'Host1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Host2) -}
1ee2a65fbceca568e5b1d81358b68239
  $tc'Host2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Host"#) -}
efef5030957e1e81e12ca7435f10c589
  $tc'NewCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11535841324114935254##
                   468506678198477090##
                   Types.$trModule
                   Types.$tc'NewCard2
                   0#
                   Types.$tc'NewCard1) -}
60b4ea22599d7341b85a34482b7c1549
  $tc'NewCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d02d430c5fd651daa25fe07f36f67095
  $tc'NewCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'NewCard3) -}
3b82bc3302db80c53f9b99d3cbfe2175
  $tc'NewCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewCard"#) -}
d64c1cfedc73761f34932ae369731fbf
  $tc'One :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8533810532223945502##
                   10656063998664537115##
                   Types.$trModule
                   Types.$tc'One2
                   0#
                   Types.$tc'One1) -}
c2aeef7b9df339a9e010fb6e0f1e1038
  $tc'One1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
9dd079526dfd8e9b5bb577a6e736de56
  $tc'One2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'One3) -}
2af2fd88ead8e5c9d1b29c2442ca4a13
  $tc'One3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'One"#) -}
0395c455ee96478f649018c45e7cc568
  $tc'Open :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12786993651476726311##
                   5113064098593406901##
                   Types.$trModule
                   Types.$tc'Open2
                   0#
                   Types.$tc'Open1) -}
a6be39d11aa55bdfc83340a51abc1c63
  $tc'Open1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
185efa90199425da9cac0c60851683c3
  $tc'Open2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Open3) -}
7f8cba04d22f2c72cddab231c9f9e60c
  $tc'Open3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Open"#) -}
37836da6ea44a8d56b9648904749e996
  $tc'Phalanx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7461645708808263189##
                   14522538725575723938##
                   Types.$trModule
                   Types.$tc'Phalanx1
                   0#
                   Types.$tc'Batallion1) -}
06dd7238000137a071b8a45d1ec93931
  $tc'Phalanx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Phalanx2) -}
bb9e4ea70419976b9f4969cfdbfb6576
  $tc'Phalanx2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Phalanx"#) -}
c473c41a3503fb2d41dd3744a5055d34
  $tc'Put :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12710806372429882390##
                   13151600060478672581##
                   Types.$trModule
                   Types.$tc'Put1
                   0#
                   Types.$tc'EmptyCommand1) -}
f902357b9aba1e2dcee8846d571a8ddb
  $tc'Put1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Put2) -}
d97148796e80ff81a5b7c796c3168fe3
  $tc'Put2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Put"#) -}
b39f375567297c4b35e0004585f48c42
  $tc'PutCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4199726201318673899##
                   15530957266885082173##
                   Types.$trModule
                   Types.$tc'PutCard2
                   0#
                   Types.$tc'PutCard1) -}
774cfae76f91449f48a9b841a72ad615
  $tc'PutCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a4b7df2356528c00222ec1bff40cac98
  $tc'PutCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'PutCard3) -}
bf5e7518ff0d551373dfeccc142ad0b5
  $tc'PutCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PutCard"#) -}
f4ae48e7efebdd3ddfc74dfb7c2926a5
  $tc'PutCardTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3013869250094230468##
                   16216923554938938577##
                   Types.$trModule
                   Types.$tc'PutCardTurn2
                   0#
                   Types.$tc'PutCardTurn1) -}
c6cf1e339ebf0718c72010901103c1ab
  $tc'PutCardTurn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ff1559e2f9aaf6a8e88661694d7cc618
  $tc'PutCardTurn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'PutCardTurn3) -}
f42d8361b3e807fb95a71bc999fe2820
  $tc'PutCardTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PutCardTurn"#) -}
8b75116656ae14816065875fb68b7476
  $tc'Red :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6651664919054313004##
                   8158272589586604129##
                   Types.$trModule
                   Types.$tc'Red1
                   0#
                   Types.$tc'Black1) -}
1e5940578a5ac673f9dcaeb1df503d28
  $tc'Red1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Red2) -}
20171c9c7d75878ea04b13331a96403f
  $tc'Red2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Red"#) -}
1555b5fbe330d2fd2405cd0127add38a
  $tc'Skirmish :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7844488559965919362##
                   11665859931170099376##
                   Types.$trModule
                   Types.$tc'Skirmish1
                   0#
                   Types.$tc'Batallion1) -}
c4dc531bc9454246e49b5251aa6c12d7
  $tc'Skirmish1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Skirmish2) -}
83f77b6e8ae55ccf74790f389819ee43
  $tc'Skirmish2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Skirmish"#) -}
a77c2282710331bcc45623f8ddab8b96
  $tc'Take :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17829306823432568290##
                   265597759252301471##
                   Types.$trModule
                   Types.$tc'Take2
                   0#
                   Types.$tc'Take1) -}
f4a5ecc17c1b0f35a2587e6a7e1e55a0
  $tc'Take1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d9aae0c3a30ee44c0e51ecbeec34cc5d
  $tc'Take2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Take3) -}
91ed04ae7b014f4a64824438239a4ad5
  $tc'Take3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Take"#) -}
850ab727dd781b4a7be489dca6803a8c
  $tc'TakeCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3509141559117985718##
                   6646635381612866928##
                   Types.$trModule
                   Types.$tc'TakeCard2
                   0#
                   Types.$tc'TakeCard1) -}
adfc96fac6b580263ec09674e7220cc7
  $tc'TakeCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
02a19eda9dbe9f870795bf1acd0a2c34
  $tc'TakeCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'TakeCard3) -}
aafbc57c577cbb6d6242fc6a239a21c7
  $tc'TakeCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TakeCard"#) -}
d83645ba47b157e0d333fc99e8742083
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13568255138674049976##
                   5734524673377609428##
                   Types.$trModule
                   Types.$tc'Two1
                   0#
                   Types.$tc'One1) -}
7e95951e853643df2b66a5a9a899fc09
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Two2) -}
28da221259ed3bca21f8bf165a0ec677
  $tc'Two2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
d3099f4e91c3d8aa4ba4b1aca116adfb
  $tc'Wedge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17617004684520944846##
                   4310578509989060515##
                   Types.$trModule
                   Types.$tc'Wedge1
                   0#
                   Types.$tc'Batallion1) -}
812537256bf3f04b8105b8fc04b7374c
  $tc'Wedge1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Wedge2) -}
1f7c02b7c832a7b22b5f014c7557e902
  $tc'Wedge2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Wedge"#) -}
105fb20e986527bbcf0e9062a334e73c
  $tc'White :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4300796615519931808##
                   9654743117568508402##
                   Types.$trModule
                   Types.$tc'White1
                   0#
                   Types.$tc'Black1) -}
b15a580b6279dd8951f33169b11fd0f5
  $tc'White1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'White2) -}
9610f367eaed93879b0df6b79effaa35
  $tc'White2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'White"#) -}
b0f49f26fd6366e91ca46d04c272d4a5
  $tc'Win :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12743139372659582036##
                   4133125528696763347##
                   Types.$trModule
                   Types.$tc'Win2
                   0#
                   Types.$tc'Win1) -}
8dcb0740d98b6bcbad3c5febd82da2a7
  $tc'Win1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ff363e1fbd54a96377d764eeb032c4a6
  $tc'Win2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Win3) -}
7d1ca054978b337528f078c783f7fe76
  $tc'Win3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Win"#) -}
4db2fdaa40902b9e1e6218743f12c089
  $tc'Winner :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10147614454215265571##
                   18131167939115496205##
                   Types.$trModule
                   Types.$tc'Winner2
                   0#
                   Types.$tc'Winner1) -}
8208521bbbb6e7f21f2b3a435deff1db
  $tc'Winner1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4a362071b2b59dee6a3fe615db0bd4eb
  $tc'Winner2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Winner3) -}
77a1c16c826011e7e609bb765b2a18cb
  $tc'Winner3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Winner"#) -}
af540c0f1646f8546d3a86d3ef40d092
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1259895906184571378##
                   12156001119043518502##
                   Types.$trModule
                   Types.$tc'World2
                   0#
                   Types.$tc'World1) -}
fbf7385ec2163dfd95ba7d94f88fef69
  $tc'World1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
391d207a2a488a3ca4823a675d047a30
  $tc'World2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'World3) -}
ab49138d328b5db15c1cbb851cafd33b
  $tc'World3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'World"#) -}
b8055dca71377b1a718908933827f627
  $tc'Yellow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8862174367035844998##
                   12231673577346251720##
                   Types.$trModule
                   Types.$tc'Yellow1
                   0#
                   Types.$tc'Black1) -}
ac93413d5f93ab2a4ca1038dc0e7e05f
  $tc'Yellow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Yellow2) -}
76160daf6e023c9a10227cd03097b8d5
  $tc'Yellow2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Yellow"#) -}
b942781254366be3ee5b451643c86d48
  $tcCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17255906393135062387##
                   10839510697925122391##
                   Types.$trModule
                   Types.$tcCard1
                   0#
                   GHC.Types.krep$*) -}
2b648e82f6b7ba6e84ec5e1aac3b2ba3
  $tcCard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCard2) -}
204d17be699db86eb451576778344068
  $tcCard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Card"#) -}
38ea18f2a71f0d2491cc704a00e3d470
  $tcChanges :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5911384429051707301##
                   939086824439206783##
                   Types.$trModule
                   Types.$tcChanges1
                   0#
                   GHC.Types.krep$*) -}
987783b944c2744718c8c11e931ff3c2
  $tcChanges1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcChanges2) -}
24323e984703197f0a8d38bc99015c05
  $tcChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Changes"#) -}
4d38fb5da03512eac55ef285e80d3663
  $tcClientState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10998550440066959677##
                   10272115863006062339##
                   Types.$trModule
                   Types.$tcClientState1
                   0#
                   GHC.Types.krep$*) -}
8d740c949fc11f67f1bb88aed0770ded
  $tcClientState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcClientState2) -}
4b5f0552d9510eb121374dfa4d699c64
  $tcClientState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ClientState"#) -}
d27b03eb05253e286f908e9bcae7f0c9
  $tcCombo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   814152437581128110##
                   11567353502293045585##
                   Types.$trModule
                   Types.$tcCombo1
                   0#
                   GHC.Types.krep$*) -}
b447b759b1d795537cedcf949a1c9992
  $tcCombo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCombo2) -}
8b12b818ecda3f65c34897b65e412489
  $tcCombo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Combo"#) -}
7e6f1a3fdcd5014d3d8b62b42ac09463
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1511560586004378715##
                   15668935494243080856##
                   Types.$trModule
                   Types.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
5ce5f0ef86e3ae364d9fe787847dd0af
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCommand2) -}
0ec8928e334922a1dc6ac1f74d439656
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
c1203bafc2f6d2ecbeaa9c2de959e428
  $tcField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11942011153384532287##
                   163780720280788611##
                   Types.$trModule
                   Types.$tcField1
                   0#
                   GHC.Types.krep$*) -}
6cdb0a000f01f222bb239784dc10db36
  $tcField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcField2) -}
ac42ea038909ef4d9ab0c26be856d021
  $tcField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field"#) -}
093da3a58ccb524ae1f5ac4740084f46
  $tcFieldState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1255078509915626216##
                   5365178298107522306##
                   Types.$trModule
                   Types.$tcFieldState1
                   0#
                   GHC.Types.krep$*) -}
a565618beec9f026c3f33d8202edb847
  $tcFieldState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcFieldState2) -}
c3eda38ad98e28c492437ec321796c2e
  $tcFieldState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldState"#) -}
01aed6a0c4248bbd8cae276a1f9cb4b3
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7411009284478809113##
                   16489557808591867180##
                   Types.$trModule
                   Types.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
ee2bc772a6449650f49443c867ca0caa
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcPlayer2) -}
2905a556373c7ec8ab39b97ab6fefced
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
5b0ad72aa80e8ef6f8e102afe486ff72
  $tcStateChanges :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1151753834909681310##
                   449306937274183865##
                   Types.$trModule
                   Types.$tcStateChanges1
                   0#
                   GHC.Types.krep$*) -}
b5a11263d2d5958203e28be971f3417d
  $tcStateChanges1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcStateChanges2) -}
f342c15c3049f12f9bc6eac7aa16c49c
  $tcStateChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StateChanges"#) -}
5fe7eccfedcfbb629c28e33a42fcf706
  $tcSuit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17643781095539700372##
                   1404030891539238880##
                   Types.$trModule
                   Types.$tcSuit1
                   0#
                   GHC.Types.krep$*) -}
e63b48fde2eca958a61302a639705d75
  $tcSuit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcSuit2) -}
4c5dd8677f14b5c64a89fec9ca18aa63
  $tcSuit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Suit"#) -}
31a2ad4bca394566f89a1eb30f4683fc
  $tcTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10263662677208509627##
                   10179445830744743830##
                   Types.$trModule
                   Types.$tcTurn1
                   0#
                   GHC.Types.krep$*) -}
cc8d05c3b01d66dcf68b0d86997c7b79
  $tcTurn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcTurn2) -}
54fa36bf5ad66eea2d1dbf2c0f713d15
  $tcTurn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Turn"#) -}
7265887e1feaca47c8ccb63351a934e7
  $tcTurnState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9319310183772091833##
                   3051448963982468158##
                   Types.$trModule
                   Types.$tcTurnState1
                   0#
                   GHC.Types.krep$*) -}
42ffc458ed382648d7dc37d62ea81b42
  $tcTurnState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcTurnState2) -}
8b968a93fa0f2d0da4a5c4d0ac6d95fb
  $tcTurnState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TurnState"#) -}
5b34646a5789d69b14d31e410aa7ffeb
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6120273098559261455##
                   2141959844872552238##
                   Types.$trModule
                   Types.$tcWorld1
                   0#
                   GHC.Types.krep$*) -}
cf40eb138339a12126e9c5eb09240b6b
  $tcWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcWorld2) -}
01c5f54b1deb81bd5c10f2915eae56b2
  $tcWorld2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World"#) -}
1661f24b4a0496ed45fabc1fd9e772c5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule3 Types.$trModule1) -}
915d2557e37aebf5f86405b357bdb0bd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$trModule2) -}
a90381da797f6cd8a48906a33dbc42b1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Types"#) -}
dd8eb7d561af4606b0e092cb5f6e6240
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$trModule4) -}
2f409b0b493e4d40ab80d3d939db84b6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("battlefield-0.1.0.0-5FxjAk3MfUxBwzZHxsAwJJ"#) -}
e9f88423f85b87de6b4719bc4ac89dc3
  $w$c== ::
    Types.Suit
    -> GHC.Types.Int -> Types.Suit -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: Types.Suit)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Types.Suit)
                   (ww3 :: GHC.Types.Int) ->
                 case ww of wild {
                   Types.Red
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Red -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Blue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Blue -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Yellow
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Yellow -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Green
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Green -> GHC.Classes.eqInt ww1 ww3 }
                   Types.White
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.White -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Black
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Black -> GHC.Classes.eqInt ww1 ww3 } }) -}
c1523bb433cfa1ad46477ecf0c0fff39
  $w$c==1 ::
    Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: Types.Player)
                   (ww1 :: Network.Socket.Types.Socket)
                   (ww2 :: [Types.Field])
                   (ww3 :: [Types.Card])
                   (ww4 :: Types.TurnState)
                   (ww5 :: Types.Player)
                   (ww6 :: Network.Socket.Types.Socket)
                   (ww7 :: [Types.Field])
                   (ww8 :: [Types.Card])
                   (ww9 :: Types.TurnState) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = case ww1 of wild { Network.Socket.Types.MkSocket ds2 ds3 ds4 ds5 m1 ->
                     case ww6 of wild1 { Network.Socket.Types.MkSocket ds6 ds7 ds8 ds9 m2 ->
                     case m1 of wild2 { GHC.MVar.MVar mvar1# ->
                     case m2 of wild3 { GHC.MVar.MVar mvar2# ->
                     case GHC.Prim.sameMVar#
                            @ GHC.Prim.RealWorld
                            @ Network.Socket.Types.SocketStatus
                            mvar1#
                            mvar2# of lwild {
                       DEFAULT -> GHC.Types.False
                       1#
                       -> case GHC.Classes.$fEq[]_$c==
                                 @ Types.Field
                                 Types.$fEqField
                                 ww2
                                 ww7 of wild4 {
                            GHC.Types.False -> GHC.Types.False
                            GHC.Types.True
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ Types.Card
                                      Types.$fEqCard
                                      ww3
                                      ww8 of wild5 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True -> Types.$fEqClientState_$c==1 ww4 ww9 } } } } } } }
                 } in
                 case ww of wild {
                   Types.One
                   -> case ww5 of wild1 {
                        Types.One -> $j Types.Two -> GHC.Types.False }
                   Types.Two
                   -> case ww5 of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> $j } }) -}
20bcdac924e930900590c3d0b35a818e
  $w$c==2 ::
    [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: [Types.Card])
                   (ww1 :: [Types.Card])
                   (ww2 :: Types.FieldState)
                   (ww3 :: [Types.Card])
                   (ww4 :: [Types.Card])
                   (ww5 :: Types.FieldState) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.Card
                        Types.$fEqCard
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Card
                             Types.$fEqCard
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Types.$fEqField_$c==1 ww2 ww5 } }) -}
f4501517b200089747f287eb0cbbae24
  $w$c==3 ::
    [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: [Types.Field])
                   (ww1 :: [Types.Card])
                   (ww2 :: [Types.StateChanges])
                   (ww3 :: [Types.Field])
                   (ww4 :: [Types.Card])
                   (ww5 :: [Types.StateChanges]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.Field
                        Types.$fEqField
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Card
                             Types.$fEqCard
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ Types.StateChanges
                             Types.$fEqStateChanges
                             ww2
                             ww5 } }) -}
f56ea284b75d643f0cf3516e9319b706
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Card r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
2afe4fbb6d2e2002eacae58fbe3a9fee
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Changes r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Changes r) ->
                 Data.Binary.Class.$w$cget13
                   @ Types.StateChanges
                   Types.$fBinaryStateChanges
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Types.StateChanges])[OneShot] ->
                    w i' (Types.Changes a1))) -}
e02657288c8c773ba607aa3907156598
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.StateChanges r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
972948a7bc6a3f55f0e606c1cf6d121a
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Command r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Command r) ->
                 let {
                   lvl6 :: Data.ByteString.Internal.ByteString
                           -> Types.Player -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Types.Player)[OneShot] ->
                     w i' (Types.Win a1)
                 } in
                 let {
                   lvl7 :: Data.ByteString.Internal.ByteString
                           -> Types.Card -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Types.Card)[OneShot] ->
                     w i' (Types.Take a1)
                 } in
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,1*U>, Inline: [2] -}
                   = \ (w1 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     case ww4 of wild {
                       DEFAULT -> w w1 Types.EmptyCommand
                       0## -> w w1 Types.Put
                       1##
                       -> case w1 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                          Types.$w$cget @ r ww6 ww7 ww8 ww9 lvl7 }
                       2##
                       -> case w1 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                          Types.$w$cget4 @ r ww6 ww7 ww8 ww9 lvl6 } }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Types.$fBinaryCommand9
                        Types.$fBinaryCommand8
                        Types.$fBinaryCommand7
                        Types.$fBinaryCommand4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        ipv1 } } }) -}
c2322114e8ca9252b4ef834669bb1040
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Player r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Player r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Types.$fBinaryCommand9
                        Types.$fBinaryCommand8
                        Types.$fBinaryCommand7
                        Types.$fBinaryCommand4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Types.Two
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Types.One } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Types.Two
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Types.One } } } }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Turn r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
b10aad0af21b8ff07a4b919e0c36e223
  $w$cput ::
    Types.Suit
    -> GHC.Types.Int
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [2] -}
e02657288c8c773ba607aa3907156598
  $w$cput1 ::
    Types.StateChanges
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
972948a7bc6a3f55f0e606c1cf6d121a
  $w$cput2 ::
    Types.Command -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Command) ->
                 case w of wild {
                   Types.Put
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryCommand2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.Take c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.Win p
                   -> (# case p of wild1 { DEFAULT -> GHC.Tuple.() },
                         (\ @ r
                            (x :: Data.ByteString.Builder.Internal.BuildStep r)
                            (eta :: Data.ByteString.Builder.Internal.BufferRange)
                            (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     2##
                                     eta2 of s2 { DEFAULT ->
                              (x (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          let {
                            lvl7 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta2 of s2 { DEFAULT ->
                              (x (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                            DEFAULT
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      2##
                                      eta1 of s2 { DEFAULT ->
                               let {
                                 karg :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 1#
                               } in
                               case p of wild2 {
                                 Types.One
                                 -> case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 karg) 1# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                karg
                                                0#
                                                1##
                                                s2 of s1 { DEFAULT ->
                                         (x (Data.ByteString.Builder.Internal.BufferRange
                                               (GHC.Prim.plusAddr# karg 1#)
                                               dt1))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s1 }
                                      1#
                                      -> (# s2,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              karg
                                              lvl7
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) }
                                 Types.Two
                                 -> case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 karg) 1# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                karg
                                                0#
                                                2##
                                                s2 of s1 { DEFAULT ->
                                         (x (Data.ByteString.Builder.Internal.BufferRange
                                               (GHC.Prim.plusAddr# karg 1#)
                                               dt1))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s1 }
                                      1#
                                      -> (# s2,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              karg
                                              lvl6
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) } } }
                            1#
                            -> (# eta1,
                                  Data.ByteString.Builder.Internal.BufferFull
                                    @ r
                                    1#
                                    dt
                                    (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            2##
                                            eta2 of s2 { DEFAULT ->
                                     let {
                                       karg :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 1#
                                     } in
                                     case p of wild3 {
                                       Types.One
                                       -> case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# dt3 karg)
                                                 1# of lwild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      karg
                                                      0#
                                                      1##
                                                      s2 of s1 { DEFAULT ->
                                               (x (Data.ByteString.Builder.Internal.BufferRange
                                                     (GHC.Prim.plusAddr# karg 1#)
                                                     dt3))
                                                 `cast`
                                               (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)
                                                 s1 }
                                            1#
                                            -> (# s2,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r
                                                    1#
                                                    karg
                                                    lvl7
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r>_R)) #) }
                                       Types.Two
                                       -> case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# dt3 karg)
                                                 1# of lwild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      karg
                                                      0#
                                                      2##
                                                      s2 of s1 { DEFAULT ->
                                               (x (Data.ByteString.Builder.Internal.BufferRange
                                                     (GHC.Prim.plusAddr# karg 1#)
                                                     dt3))
                                                 `cast`
                                               (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)
                                                 s1 }
                                            1#
                                            -> (# s2,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r
                                                    1#
                                                    karg
                                                    lvl6
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r>_R)) #) } } } })
                                      `cast`
                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)) #) } })
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.EmptyCommand
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryCommand1
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
875456fe529bfc92f6ebbdc3ba02487d
  $w$cput3 ::
    Types.Turn -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Turn) ->
                 case w of wild {
                   Types.PutCard f4 p c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r ->
                          let {
                            f5 :: Data.ByteString.Builder.Internal.BuildStep r
                                  -> Data.ByteString.Builder.Internal.BuildStep r
                            = case Data.Binary.Class.$w$cput9 f4 of ww { (#,#) ww1 ww2 ->
                              ww2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                          } in
                          \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = f5
                                (case p of wild1 {
                                   Types.One
                                   -> let {
                                        w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        = case k `cast`
                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild2 { Data.Binary.Put.PairS b1 w' ->
                                          w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                            @ r
                                            x }
                                      } in
                                      (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w2 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                       Types.$wlvl3 @ r w1 ww1 ww2 w3 })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R))
                                   Types.Two
                                   -> let {
                                        w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        = case k `cast`
                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild2 { Data.Binary.Put.PairS b1 w' ->
                                          w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                            @ r
                                            x }
                                      } in
                                      (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w2 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                       Types.$wlvl2 @ r w1 ww1 ww2 w3 })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)) })
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.FinishTurn
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryPlayer2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.TakeCard c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
86a56adefb82925e93fdb2f78c9127ec
  $w$cshow :: Types.Suit -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: Types.Suit) (ww1 :: GHC.Types.Int) ->
                 GHC.CString.unpackAppendCString#
                   Types.$fShowCard14
                   (Types.$w$cshowsPrec1
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 11#
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))) -}
add4cf527b7d1fd2f0f8967412852374
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.Suit
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Suit)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Types.$fShowCard14
                       (Types.$w$cshowsPrec1
                          ww1
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of ww3 { GHC.Types.I# ww4 ->
                              case GHC.Show.$wshowSignedInt 11# ww4 x of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
41e4a898b0aab1c62810f486f4b4e31a
  $w$cshowsPrec1 :: Types.Suit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Suit) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.Red -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard12 w1
                   Types.Blue -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard10 w1
                   Types.Yellow -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard8 w1
                   Types.Green -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard6 w1
                   Types.White -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard4 w1
                   Types.Black
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard2 w1 }) -}
52ad74f65fb55e5a76c8314640b9b0c8
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [Types.StateChanges] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.StateChanges])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Types.$fShowChanges2
                       (case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Types.$w$cshowsPrec3
                                  0#
                                  x1
                                  (let {
                                     lvl43 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                   } in
                                   letrec {
                                     showl :: [Types.StateChanges] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Types.StateChanges]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl43
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Types.$w$cshowsPrec3 0# y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
e02657288c8c773ba607aa3907156598
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Types.StateChanges -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
ef97bd695d4c9fdf5b1493b50645451a
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U><L,U(U(U),A,A,A,A)><L,U><L,U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Player)
                   (ww2 :: Network.Socket.Types.Socket)
                   (ww3 :: [Types.Field])
                   (ww4 :: [Types.Card])
                   (ww5 :: Types.TurnState) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Types.$fShowClientState_$cshowsPrec1
                       Types.$fShowClientState11
                       ww5
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     let {
                       karg :: [GHC.Types.Char]
                       = case ww2 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                         Network.Socket.Types.$w$cshowsPrec1
                           ww7
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showList__
                                 @ Types.Field
                                 Types.$fShowClientState8
                                 ww3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (GHC.Show.showList__
                                       @ Types.Card
                                       Types.$fShowCard1
                                       ww4
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.showSpace1
                                          (g x)))))) }
                     } in
                     case ww1 of wild {
                       Types.One
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowClientState6
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 karg)
                       Types.Two
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowClientState4
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 karg) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState2 (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowClientState2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
364ad9759763ef8e41237dacfdf0b88b
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.Card])
                   (ww2 :: [Types.Card])
                   (ww3 :: Types.FieldState)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ Types.Card
                       Types.$fShowCard1
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Types.Card
                             Types.$fShowCard1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Types.$fShowClientState_$cshowsPrec
                                   Types.$fShowClientState11
                                   ww3
                                   x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState9 (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowClientState9
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
ee57e920b91561024e8ad25d212333cb
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Types.Combo -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,1*U><L,U>,
     Inline: [2] -}
9bfee20ee7c47401308e3d9944a568aa
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.Field])
                   (ww2 :: [Types.Card])
                   (ww3 :: [Types.StateChanges])
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ Types.Field
                       Types.$fShowClientState8
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Types.Card
                             Types.$fShowCard1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Types.$fShowStateChanges_$cshowList ww3 x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> GHC.Base.++ @ GHC.Types.Char Types.$fShowWorld2 (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowWorld2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
5e43ee6b9e7a0ffd5e866ab04e3d647e
  $wlvl ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             3##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   3##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
6fdac2b28f902bf19a1fcfd36b3091ce
  $wlvl1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
b7797cd93de2ab956307cf785d8759e8
  $wlvl2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             2##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   2##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
86432876f74c8b75877db3ad045cc91b
  $wlvl3 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
f56ea284b75d643f0cf3516e9319b706
  data Card = Card Types.Suit GHC.Types.Int
2afe4fbb6d2e2002eacae58fbe3a9fee
  data Changes = Changes [Types.StateChanges]
0d40de26a259108595bb117dcaf51e17
  data ClientState
    = ClientState Types.Player
                  Network.Socket.Types.Socket
                  [Types.Field]
                  [Types.Card]
                  Types.TurnState
ee57e920b91561024e8ad25d212333cb
  data Combo
    = Host GHC.Types.Int
    | Skirmish GHC.Types.Int
    | Batallion GHC.Types.Int
    | Phalanx GHC.Types.Int
    | Wedge GHC.Types.Int
972948a7bc6a3f55f0e606c1cf6d121a
  data Command
    = Put | Take Types.Card | Win Types.Player | EmptyCommand
bc869bdca4fff34b50ca5746463a585a
  data Field = Field [Types.Card] [Types.Card] Types.FieldState
5d2bff0cd35152ac0d84f794d4df1e90
  data FieldState = Closed Types.Player | Open
c2322114e8ca9252b4ef834669bb1040
  data Player = One | Two
e02657288c8c773ba607aa3907156598
  data StateChanges
    = NewCard GHC.Types.Int Types.Player Types.Card
    | FieldClosed GHC.Types.Int Types.Player
    | Winner Types.Player
41e4a898b0aab1c62810f486f4b4e31a
  data Suit = Red | Blue | Yellow | Green | White | Black
875456fe529bfc92f6ebbdc3ba02487d
  data Turn
    = PutCard GHC.Types.Int Types.Player Types.Card
    | FinishTurn
    | TakeCard Types.Card
762f0804cd5c6af2edad132d5a758c34
  data TurnState
    = PutCardTurn (GHC.Maybe.Maybe Types.Card)
    | EmptyState
    | GameFinished Types.Player
6014835ff5e109d16d91c6a268537c94
  data World = World [Types.Field] [Types.Card] [Types.StateChanges]
e8482d26d5794223f40305c8a740c959
  defaultCard :: Types.Card
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Card Types.Black Types.$fShowChanges3) -}
4104a132d889f236f81f755f5acbefe1
  messageSize :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10000#) -}
instance Data.Binary.Class.Binary [Types.Card] = Types.$fBinaryCard
instance Data.Binary.Class.Binary [Types.Changes]
  = Types.$fBinaryChanges
instance Data.Binary.Class.Binary [Types.Command]
  = Types.$fBinaryCommand
instance Data.Binary.Class.Binary [Types.Player]
  = Types.$fBinaryPlayer
instance Data.Binary.Class.Binary [Types.StateChanges]
  = Types.$fBinaryStateChanges
instance Data.Binary.Class.Binary [Types.Turn] = Types.$fBinaryTurn
instance GHC.Classes.Eq [Types.Card] = Types.$fEqCard
instance GHC.Classes.Eq [Types.Changes] = Types.$fEqChanges
instance GHC.Classes.Eq [Types.ClientState] = Types.$fEqClientState
instance GHC.Classes.Eq [Types.Combo] = Types.$fEqCombo
instance GHC.Classes.Eq [Types.Command] = Types.$fEqCommand
instance GHC.Classes.Eq [Types.Field] = Types.$fEqField
instance GHC.Classes.Eq [Types.FieldState] = Types.$fEqFieldState
instance GHC.Classes.Eq [Types.Player] = Types.$fEqPlayer
instance GHC.Classes.Eq [Types.StateChanges]
  = Types.$fEqStateChanges
instance GHC.Classes.Eq [Types.Suit] = Types.$fEqSuit
instance GHC.Classes.Eq [Types.Turn] = Types.$fEqTurn
instance GHC.Classes.Eq [Types.TurnState] = Types.$fEqTurnState
instance GHC.Classes.Eq [Types.World] = Types.$fEqWorld
instance GHC.Classes.Ord [Types.Combo] = Types.$fOrdCombo
instance GHC.Show.Show [Types.Card] = Types.$fShowCard
instance GHC.Show.Show [Types.Changes] = Types.$fShowChanges
instance GHC.Show.Show [Types.ClientState]
  = Types.$fShowClientState
instance GHC.Show.Show [Types.Combo] = Types.$fShowCombo
instance GHC.Show.Show [Types.Command] = Types.$fShowCommand
instance GHC.Show.Show [Types.Field] = Types.$fShowField
instance GHC.Show.Show [Types.FieldState] = Types.$fShowFieldState
instance GHC.Show.Show [Types.Player] = Types.$fShowPlayer
instance GHC.Show.Show [Types.StateChanges]
  = Types.$fShowStateChanges
instance GHC.Show.Show [Types.Suit] = Types.$fShowSuit
instance GHC.Show.Show [Types.Turn] = Types.$fShowTurn
instance GHC.Show.Show [Types.TurnState] = Types.$fShowTurnState
instance GHC.Show.Show [Types.World] = Types.$fShowWorld
"SPEC/Types defaultPutList @ Card" forall ($dBinary :: Data.Binary.Class.Binary
                                                         Types.Card)
  Data.Binary.Class.defaultPutList @ Types.Card $dBinary
  = Types.$fBinaryCard_$sdefaultPutList
"SPEC/Types defaultPutList @ Changes" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Types.Changes)
  Data.Binary.Class.defaultPutList @ Types.Changes $dBinary
  = Types.$fBinaryChanges_$sdefaultPutList
"SPEC/Types defaultPutList @ Command" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Types.Command)
  Data.Binary.Class.defaultPutList @ Types.Command $dBinary
  = Types.$fBinaryCommand_$sdefaultPutList
"SPEC/Types defaultPutList @ Player" forall ($dBinary :: Data.Binary.Class.Binary
                                                           Types.Player)
  Data.Binary.Class.defaultPutList @ Types.Player $dBinary
  = Types.$fBinaryPlayer_$sdefaultPutList
"SPEC/Types defaultPutList @ StateChanges" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Types.StateChanges)
  Data.Binary.Class.defaultPutList @ Types.StateChanges $dBinary
  = Types.$fBinaryChanges_$sdefaultPutList1
"SPEC/Types defaultPutList @ Turn" forall ($dBinary :: Data.Binary.Class.Binary
                                                         Types.Turn)
  Data.Binary.Class.defaultPutList @ Types.Turn $dBinary
  = Types.$fBinaryTurn_$sdefaultPutList
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

