
==================== FINAL INTERFACE ====================
2019-10-16 12:24:00.190419 UTC

interface battlefield-0.1.0.0-8CmZqnTevv4DQlKkYwSBkE:Server 8065
  interface hash: a5bd5a642f2169f306a11abbe0bac0ea
  ABI hash: 414de4a21a83efd0532e78f11a7f839f
  export-list hash: d9d93fc7b6a997e6d26880e96ed70b50
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Server.checkField
  Server.checkWinner
  Server.combo
  Server.fight
  Server.filterClosedFields
  Server.fiveFields
  Server.main
  Server.phasePut
  Server.server
  Server.setPlayers
  Server.sockHandler
  Server.startGame
  Server.threeFieldsNear
module dependencies: ByteStringParser FieldModifications Types
package dependencies: MonadRandom-0.5.1.1 array-0.5.3.0
                      base-4.12.0.0 binary-0.8.6.0 bytestring-0.10.8.2 containers-0.6.0.1
                      deepseq-1.4.4.0 ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-2.8.0.1 primitive-0.6.4.0 random-1.1 random-shuffle-0.0.4
                      time-1.8.0.2 transformers-0.5.6.2 word8-0.1.3
orphans: transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         network-2.8.0.1:Network.Socket binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
import  -/  base-4.12.0.0:Control.Concurrent 945d3c1c41ed03e6117e3861cad65d9f
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Conc.Sync 275e94c5ede09d3593e4c106b892e4f5
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.IO c961e5ee6731c0683a6e879272c9e9f6
import  -/  ByteStringParser e47687f435efafd684dac73472130043
  exports: bae4c4d88cae26c04a5965815730633f
  decodeTurn 20ad59d85c3d6e9ff3e71bd176180289
  encode 670ca72c5cd306e0bf3c5d0030743fd4
import  -/  FieldModifications 0ed652d781c72e0da372df590fdd1218
  exports: 1c37881ba77c99935bedf56ec699407a
  assignCards c3e8041d252bdb8d76e7c6f6b3c2372c
  assignFields 4a16da23b7b921f5ccbe2ad45f742ce2
  putCard 519c2dde62541c9a56c719442d1d03a4
import  -/  Types f76ea1dd1d2c4fe47575f93bbf95bb77
  exports: c99b08131a958b98eccb97272359a95d
  Batallion 4efecb754f4770c9043e40824c298112
  Card 07a1b70b9906294be44018dfdd15b4a8
  Card 2eddaddf45f0295f5fbfbba779a9e7e1
  Changes 37d1f1136a98fd173e745d93d117d22b
  Closed a0aef2f9d17e0bdb006c0df664c09765
  Combo 388233bee3b11c60d120bec3b23e9393
  Field 02f8d8577d79d8d16f27b75554d7935b
  Field a5e8e31ebd654aed1c51bdce89a1e481
  FieldClosed 9cc7648cc1b3e9a8a20f9c383bcf653a
  FieldState f12da4d7d8e72658efbb06ea080c6269
  Host 35e3cc860b72e53c3bccd743fd493ca0
  NewCard 6692d8ddfb02c25accede09836f0fda5
  One 3fe7adac58f06448e478d09be3e5b418
  Open 32e13061efa20fc2c30072ba0cdab279
  Phalanx 0802ef1430690cdd245d204812506fad
  Player 084e809b613707d9daac3e7dc5838ec3
  PutCard 7c123216ef34a130bfd53884f68bee95
  Skirmish 2c72863af329e1e9473c407db6755524
  StateChanges 5043523029050ca061da751fab5b88a6
  Take 8236427a01c423371be06d06a04172db
  Two a40f7e53307bc104b38af2573ba4ed0d
  Wedge d1cb98abd3d28b9efc0900306a9652f2
  Winner abb1789471d8f1f541f598e2f8809ee2
  World 763fc58f545c21f7c8cad252fc625b17
  World 10f8f66c1d98274e39bf00acb54b9bb9
  defaultCard b7dd2c6322613162549241beb970cb65
  messageSize d5d2ca90deee84e6084d21079b6b0d29
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  mtl-2.2.2:Control.Monad.Reader d5c3a33f1c95bb71f4ae02f87a7048ff
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 57cf6a03579b61bbf9b331632b55e65e
import  -/  network-2.8.0.1:Network.Socket 2fb10212ee6ec3cda4f5f95de27378a3
import  -/  network-2.8.0.1:Network.Socket.ByteString 6f7c7de848eff00b79f890f81b0bb183
import  -/  network-2.8.0.1:Network.Socket.Internal 3199c2e7c8102952472c2e79cef4a0b4
import  -/  network-2.8.0.1:Network.Socket.Types b396f655f8272982c962f65e0eb004e1
import  -/  random-1.1:System.Random 92935f2739d08d3c469b92fe5ac17118
import  -/  random-shuffle-0.0.4:System.Random.Shuffle e8e4e6525aaedcf77df76a1ed69c45ac
import  -/  transformers-0.5.6.2:Control.Monad.Trans.Reader 047d9523dd0b97f3c42ee03eae49a228
c63e5453fb612b6c243fee7aabf3f66f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Server.$trModule3
                   Server.$trModule1) -}
2d741765afd279ed006111eb0b2750b7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Server.$trModule2) -}
926de17807e89835e3f2002a42173292
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Server"#) -}
d46ee800573a9d6cd983218fd0709202
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Server.$trModule4) -}
12f16dbf4c8ec2e347b561609d07e27c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("battlefield-0.1.0.0-8CmZqnTevv4DQlKkYwSBkE"#) -}
b4f0075ac6905802d76927366a6554d1
  $wcheckField ::
    [Types.Card]
    -> [Types.Card] -> Types.FieldState -> Types.FieldState
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: [Types.Card])
                   (ww1 :: [Types.Card])
                   (ww2 :: Types.FieldState) ->
                 case ww2 of wild {
                   Types.Closed ds -> wild
                   Types.Open
                   -> case Server.combo ww of wild1 {
                        GHC.Maybe.Nothing -> Types.Open
                        GHC.Maybe.Just ipv
                        -> case Server.combo ww1 of wild2 {
                             GHC.Maybe.Nothing -> Types.Open
                             GHC.Maybe.Just ipv1
                             -> case Types.$fOrdCombo_$ccompare ipv ipv1 of wild3 {
                                  DEFAULT -> Server.checkField2
                                  GHC.Types.GT -> Server.checkField1 } } } }) -}
3f6cdaae03d412efeb26802ef7c60b20
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    Server.main13)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
3b184873eac5ec58447b8d4b9434a0a7
  $wfiveFields ::
    [Types.Field]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U(U)>,
     Inline: [2] -}
6ebeabff96202dce7d8f22873efe483a
  $wphasePut ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Inline: [2] -}
a9719963ff717584cfae07632d0d2eee
  $wsockHandler ::
    GHC.Prim.Int#
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,U><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Network.Socket.Types.SocketType)
                   (ww3 :: Network.Socket.Types.ProtocolNumber)
                   (ww4 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld Network.Socket.Types.SocketStatus)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Network.Socket.$waccept
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) sock1 ds ->
                 case Network.Socket.$waccept
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 { (,) sock2 ds3 ->
                 case Server.main15
                        (GHC.Types.:
                           @ Network.Socket.Types.Socket
                           sock1
                           (GHC.Types.:
                              @ Network.Socket.Types.Socket
                              sock2
                              (GHC.Types.[] @ Network.Socket.Types.Socket)))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild2 {
                   [] -> Server.$wfail ipv4
                   : player1 ds5
                   -> case ds5 of wild3 {
                        [] -> Server.$wfail ipv4
                        : player2 ds6
                        -> case GHC.Prim.fork#
                                  @ (GHC.Types.IO ())
                                  (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.Type.SomeException
                                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case Server.main12 of wild4 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case player1 of ww5 { Network.Socket.Types.MkSocket ww6 ww7 ww8 ww9 ww10 ->
                                      case ww6
                                             `cast`
                                           (Foreign.C.Types.N:CInt[0]) of ww11 { GHC.Int.I32# ww12 ->
                                      case Network.Socket.$wsendBuf
                                             ww12
                                             (GHC.Prim.plusAddr# dt dt2)
                                             dt3
                                             s of ds7 { (#,#) ipv6 ipv7 ->
                                      case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             dt1
                                             ipv6 of s' { DEFAULT ->
                                      (GHC.IO.Handle.Text.hPutStr'
                                         GHC.IO.Handle.FD.stdout
                                         Server.main10
                                         GHC.Types.True)
                                        `cast`
                                      (GHC.Types.N:IO[0] <()>_R)
                                        s' } } } } })
                                     GHC.Conc.Sync.forkIO2
                                     eta)
                                    `cast`
                                  (Sym (GHC.Types.N:IO[0] <()>_R))
                                  ipv4 of ds7 { (#,#) ipv6 ipv7 ->
                           case GHC.Prim.fork#
                                  @ (GHC.Types.IO ())
                                  (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.Type.SomeException
                                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case Server.main9 of wild4 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case player2 of ww5 { Network.Socket.Types.MkSocket ww6 ww7 ww8 ww9 ww10 ->
                                      case ww6
                                             `cast`
                                           (Foreign.C.Types.N:CInt[0]) of ww11 { GHC.Int.I32# ww12 ->
                                      case Network.Socket.$wsendBuf
                                             ww12
                                             (GHC.Prim.plusAddr# dt dt2)
                                             dt3
                                             s of ds8 { (#,#) ipv8 ipv9 ->
                                      case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             dt1
                                             ipv8 of s' { DEFAULT ->
                                      (GHC.IO.Handle.Text.hPutStr'
                                         GHC.IO.Handle.FD.stdout
                                         Server.main7
                                         GHC.Types.True)
                                        `cast`
                                      (GHC.Types.N:IO[0] <()>_R)
                                        s' } } } } })
                                     GHC.Conc.Sync.forkIO2
                                     eta)
                                    `cast`
                                  (Sym (GHC.Types.N:IO[0] <()>_R))
                                  ipv6 of ds8 { (#,#) ipv8 ipv9 ->
                           case Server.main6
                                  player1
                                  player2
                                  ipv8 of ds9 { (#,#) ipv10 ipv11 ->
                           case ipv11 of ww5 { Types.World ww6 ww7 ww8 ->
                           case Server.$wphasePut
                                  player1
                                  player2
                                  ww6
                                  ww7
                                  ww8
                                  ipv10 of ds10 { (#,#) ipv12 ipv13 ->
                           (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Server.main4
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv12 } } } } } } } } } } } }) -}
e7395dc2b728a6087317cbd33d4fc5e6
  $wthreeFieldsNear ::
    [Types.Field]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U(1*U)>,
     Inline: [2] -}
1fbded9316e712282004a8a77b62a751
  checkField :: Types.Field -> Types.FieldState
  {- Arity: 1, Strictness: <S(LLS),1*U(U,U,1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Field) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 Server.$wcheckField ww1 ww2 ww3 }) -}
805e1eb21dc884e419db47aa48c054e7
  checkField1 :: Types.FieldState
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.Closed Types.One) -}
cca056879657b98782532921cc74b43d
  checkField2 :: Types.FieldState
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.Closed Types.Two) -}
73a391368cfe604de4f838dde421589b
  checkWinner :: [Types.Field] -> GHC.Maybe.Maybe Types.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (fields :: [Types.Field]) ->
                 case Server.$wthreeFieldsNear
                        fields
                        0#
                        Server.checkWinner1 of wild {
                   GHC.Maybe.Nothing
                   -> Server.$wfiveFields fields 0# Server.checkWinner1
                   GHC.Maybe.Just a -> wild }) -}
2b3d333abd1effd37a353eabcc3d8f6e
  checkWinner1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ed8ad591576b45d8144cd428bea3adaf
  combo :: [Types.Card] -> GHC.Maybe.Maybe Types.Combo
  {- Arity: 1, Strictness: <S,U> -}
a36428ecdedd84814ca111fc29230c42
  fight ::
    GHC.Maybe.Maybe Types.Combo
    -> GHC.Maybe.Maybe Types.Combo -> Types.FieldState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Maybe.Maybe Types.Combo)
                   (ds1 :: GHC.Maybe.Maybe Types.Combo) ->
                 case ds of wild {
                   GHC.Maybe.Nothing -> Types.Open
                   GHC.Maybe.Just ipv
                   -> case ds1 of wild1 {
                        GHC.Maybe.Nothing -> Types.Open
                        GHC.Maybe.Just ipv1
                        -> case Types.$fOrdCombo_$ccompare ipv ipv1 of wild2 {
                             DEFAULT -> Server.checkField2
                             GHC.Types.GT -> Server.checkField1 } } }) -}
67703720c23894e7af5414ef2ce0a21f
  filterClosedFields :: Types.StateChanges -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.StateChanges) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Types.FieldClosed ds1 ds2 -> GHC.Types.True }) -}
9492f46da5c64e1a2d18a209980c4a3a
  fiveFields ::
    [Types.Field]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S(S),1*U(1*U)><L,1*U(U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Server.$wfiveFields w ww1 w2 }) -}
d9e869e33d3456fcb55cda95b4eb233f
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Server.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d3f5f7169457371c86f68f6b549b07d8
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Server.main3
                   Server.main2
                     `cast`
                   (Sym (Network.Socket.Types.N:PortNumber[0]))) -}
48e766427e181be1559d34fbdf6f6a6b
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main11) -}
958b4cf75b20748283d7c324e54b46eb
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player One"#) -}
1f9c016cbf650330383ba2b8a74e8b1d
  main12 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict_goLen0
                   Server.main_cs1
                   Server.main_cs1) -}
a79fe79727d1a397568844388fd52082
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main14) -}
3c9c0e549535f9c2ec1304bf110b4592
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/Server.hs:44:3-21"#) -}
ae6349283a232cbe97f4e6d2556b8384
  main15 ::
    [Network.Socket.Types.Socket]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Network.Socket.Types.Socket] #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (players :: [Network.Socket.Types.Socket])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case System.Random.Shuffle.shuffle'1
                           @ System.Random.StdGen
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.StdGen
                              System.Random.$fRandomGenStdGen
                              1#
                              ipv1) of ww2 { (#,#) ww3 ww4 ->
                    System.Random.Shuffle.shuffle1
                      @ Network.Socket.Types.Socket
                      (System.Random.Shuffle.shuffle_x
                         @ Network.Socket.Types.Socket
                         (GHC.Base.map
                            @ Network.Socket.Types.Socket
                            @ (System.Random.Shuffle.Tree Network.Socket.Types.Socket)
                            (System.Random.Shuffle.$WLeaf @ Network.Socket.Types.Socket)
                            players))
                      ww3 } #) } }) -}
ba4e04c2b36ac43c9456cb7a85786963
  main16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
b4f52301d2ca8558a493718dbee4a93f
  main17 :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W32# 0##) -}
818ee62a6587146e35e242a3a79e3933
  main2 :: GHC.Word.Word16
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W16# 5005##) -}
b3e9fa3d04652552b517dc12a84b08d9
  main3 ::
    Network.Socket.Types.PortNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (port :: Network.Socket.Types.PortNumber)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wbind
                        ww1
                        ww7
                        (Network.Socket.Types.SockAddrInet port Server.main17)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Network.Socket.$wlisten
                        ww1
                        ww7
                        Server.main16
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ww11 { GHC.Int.I32# ww12 ->
                 case Server.$wsockHandler
                        ww12
                        ww2
                        ww3
                        ww4
                        ww7
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 Network.Socket.$wclose
                   ww11 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                   ww7
                   ipv6 } } } } } } }) -}
0bf4258b221f5db32f2e353d05a977ac
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main5) -}
9250422218a62887b0e72a7a4cd10064
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("game finished"#) -}
e56cab9688748d1f18fc0ef126774334
  main6 ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Types.World #)
  {- Arity: 3,
     Strictness: <L,U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,U> -}
ef49d3b257f118af73cd2b11c2c287a4
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main8) -}
9606fd2e43ba014e9449b25f56b5b5a7
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player Two"#) -}
b1589db878f79772d082470771d65ae0
  main9 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict_goLen0
                   Server.main_cs
                   Server.main_cs) -}
758ddd8873ac25b839b6ba1a94524790
  main_cs :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Types.$fBinaryPlayer2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
0eef4f1abd52c595111a758bda7de281
  main_cs1 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Types.$fBinaryPlayer4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
0e28dff0c871aa39a8e07d476024b1f9
  phasePut ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> Control.Monad.Trans.Reader.ReaderT Types.World GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.phasePut1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R (<Types.World>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <()>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <Types.World>_R
                                                         <GHC.Types.IO>_R
                                                         <()>_N)) -}
eed5ad60a152a1621277ad4430e2f64d
  phasePut1 ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> Types.World
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,1*U(U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: Network.Socket.Types.Socket)
                   (w2 :: Types.World)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2 of ww { Types.World ww1 ww2 ww3 ->
                 Server.$wphasePut w w1 ww1 ww2 ww3 w3 }) -}
074832f5c39d3df91363ea65b7a8bf08
  server :: Network.Socket.Types.PortNumber -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.main3
                  `cast`
                (<Network.Socket.Types.PortNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
88f00ea9ff9eb5edbef23c7d72bb8a53
  setPlayers ::
    [Network.Socket.Types.Socket]
    -> GHC.Types.IO [Network.Socket.Types.Socket]
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.main15
                  `cast`
                (<[Network.Socket.Types.Socket]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Network.Socket.Types.Socket]>_R)) -}
305ca8348e2e0bc3b3588b8a15f8689a
  sockHandler :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(S(S)SLLS(S)),1*U(1*U(U),U,U,U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.sockHandler1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ca1bd718eadbe2d041f6a279edd617ce
  sockHandler1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(S(S)SLLS(S)),1*U(1*U(U),U,U,U(U),1*U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ww6 { GHC.Int.I32# ww7 ->
                 case ww5 of ww8 { GHC.MVar.MVar ww9 ->
                 Server.$wsockHandler ww7 ww2 ww3 ww4 ww9 w1 } } }) -}
b6ea113ac2074798a3b4ee6a8a02ef64
  startGame ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket -> GHC.Types.IO Types.World
  {- Arity: 3,
     Strictness: <L,U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.main6
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Types.World>_R)) -}
81777a1e0d8b4670663d615b2f6812ed
  threeFieldsNear ::
    [Types.Field]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S(S),1*U(1*U)><L,1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Server.$wthreeFieldsNear w ww1 w2 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

