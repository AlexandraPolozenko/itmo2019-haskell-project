
==================== FINAL INTERFACE ====================
2019-09-21 19:07:19.07268 UTC

interface hw3-0.1.0.0-83r239n2GbFIyVIthhyr0Y:BashParser 8065
  interface hash: 5872d17680bc3ec48eb45b164122b810
  ABI hash: c0f9405f25d2057f685887d4875cb40f
  export-list hash: 529b4cb5e3c4be7be081df55cb5e0ca9
  orphan hash: ff7bbd2d80945a2af23841639ce9cb5d
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  BashParser.pCode
  BashParser.Code{BashParser.Cmd BashParser.Eps BashParser.Vars}
  BashParser.Commands{BashParser.Cd BashParser.Echo BashParser.Exit BashParser.Pwd BashParser.Read}
  BashParser.DQPart{BashParser.Argument BashParser.Str}
  BashParser.EchoConstr{BashParser.Constr}
  BashParser.VarAssigment{BashParser.DoubleQuotes BashParser.Quotes BashParser.StringArgument}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 case-insensitive-1.2.0.11 containers-0.6.0.1
                      deepseq-1.4.4.0 ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      megaparsec-7.0.5 mtl-2.2.2 parser-combinators-1.1.0 text-1.2.3.1
                      transformers-0.5.6.2
orphans: transformers-0.5.6.2:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         megaparsec-7.0.5:Text.Megaparsec.Error
                         megaparsec-7.0.5:Text.Megaparsec.Pos
                         megaparsec-7.0.5:Text.Megaparsec.State
                         megaparsec-7.0.5:Text.Megaparsec.Stream text-1.2.3.1:Data.Text
                         text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.12.0.0:Control.Applicative 2ae514eb141d45774730765c61bb41c0
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.Void 7d507f34fb7b7291298961d8e654089b
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:GHC.Unicode 87726eb81a3f9c9b22160a0afd5dc56a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  megaparsec-7.0.5:Text.Megaparsec 6b1ca1ed792b97312f1a31d1e5f68586
import  -/  megaparsec-7.0.5:Text.Megaparsec.Char 494d8fde74fcd9990d91102ccc1feebf
import  -/  megaparsec-7.0.5:Text.Megaparsec.Class f471031ba47a58ae43d738a236adaf06
import  -/  megaparsec-7.0.5:Text.Megaparsec.Common 5238743646aebc7f360654b3cb4633d7
import  -/  parser-combinators-1.1.0:Control.Applicative.Combinators 9c6e4819ea7caa095dea59e52a2cb454
import  -/  parser-combinators-1.1.0:Control.Monad.Combinators 8c44972207082cd48991515dc7cf38d6
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fEqAssigmentType :: GHC.Classes.Eq BashParser.AssigmentType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.AssigmentType
                  BashParser.$fEqAssigmentType_$c==
                  BashParser.$fEqAssigmentType_$c/= -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fEqAssigmentType_$c/= ::
    BashParser.AssigmentType
    -> BashParser.AssigmentType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: BashParser.AssigmentType)
                   (y :: BashParser.AssigmentType) ->
                 case BashParser.$fEqAssigmentType_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fEqAssigmentType_$c== ::
    BashParser.AssigmentType
    -> BashParser.AssigmentType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BashParser.AssigmentType)
                   (ds1 :: BashParser.AssigmentType) ->
                 case ds of wild {
                   BashParser.Data a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Data b1 -> GHC.Base.eqString a11 b1 }
                   BashParser.Pointer a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Pointer b1 -> GHC.Base.eqString a11 b1 }
                   BashParser.DoubQ a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.DoubQ b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ BashParser.DQPart
                             BashParser.$fEqDQPart
                             a11
                             b1 } }) -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fEqCode :: GHC.Classes.Eq BashParser.Code
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.Code
                  BashParser.$fEqCode_$c==
                  BashParser.$fEqCode_$c/= -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fEqCode_$c/= ::
    BashParser.Code -> BashParser.Code -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: BashParser.Code) (y :: BashParser.Code) ->
                 case BashParser.$fEqCode_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fEqCode_$c== ::
    BashParser.Code -> BashParser.Code -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d54403496c6b78ba119978b4b46bf59a
  $fEqCommands :: GHC.Classes.Eq BashParser.Commands
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.Commands
                  BashParser.$fEqCommands_$c==
                  BashParser.$fEqCommands_$c/= -}
d54403496c6b78ba119978b4b46bf59a
  $fEqCommands_$c/= ::
    BashParser.Commands -> BashParser.Commands -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: BashParser.Commands) (y :: BashParser.Commands) ->
                 case BashParser.$fEqCommands_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d54403496c6b78ba119978b4b46bf59a
  $fEqCommands_$c== ::
    BashParser.Commands -> BashParser.Commands -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BashParser.Commands)
                   (ds1 :: BashParser.Commands) ->
                 case ds of wild {
                   BashParser.Read a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Read b1 -> GHC.Classes.$fEq[]_$s$c==1 a11 b1 }
                   BashParser.Echo a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Echo b1 -> BashParser.$fEqCommands_$c==1 a11 b1 }
                   BashParser.Pwd
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BashParser.Pwd -> GHC.Types.True }
                   BashParser.Cd a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Cd b1 -> GHC.Base.eqString a11 b1 }
                   BashParser.Exit a11
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Exit b1 -> GHC.Base.eqString a11 b1 } }) -}
07fad313baf2fc5ba58b7e48105739ba
  $fEqCommands_$c==1 ::
    BashParser.EchoConstr -> BashParser.EchoConstr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BashParser.EchoConstr) (w1 :: BashParser.EchoConstr) ->
                 case w of ww { BashParser.Constr ww1 ww2 ->
                 case w1 of ww3 { BashParser.Constr ww4 ww5 ->
                 BashParser.$w$c== ww1 ww2 ww4 ww5 } }) -}
c072c11c13abe76e9eedf62e06f602b7
  $fEqDQPart :: GHC.Classes.Eq BashParser.DQPart
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.DQPart
                  BashParser.$fEqDQPart_$c==
                  BashParser.$fEqDQPart_$c/= -}
c072c11c13abe76e9eedf62e06f602b7
  $fEqDQPart_$c/= ::
    BashParser.DQPart -> BashParser.DQPart -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: BashParser.DQPart) (y :: BashParser.DQPart) ->
                 case x of wild {
                   BashParser.Argument a11
                   -> case y of wild1 {
                        BashParser.Argument b1
                        -> case GHC.Base.eqString a11 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        BashParser.Str ipv -> GHC.Types.True }
                   BashParser.Str a11
                   -> case y of wild1 {
                        BashParser.Argument ipv -> GHC.Types.True
                        BashParser.Str b1
                        -> case GHC.Base.eqString a11 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
c072c11c13abe76e9eedf62e06f602b7
  $fEqDQPart_$c== ::
    BashParser.DQPart -> BashParser.DQPart -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BashParser.DQPart)
                   (ds1 :: BashParser.DQPart) ->
                 case ds of wild {
                   BashParser.Argument a11
                   -> case ds1 of wild1 {
                        BashParser.Argument b1 -> GHC.Base.eqString a11 b1
                        BashParser.Str ipv -> GHC.Types.False }
                   BashParser.Str a11
                   -> case ds1 of wild1 {
                        BashParser.Argument ipv -> GHC.Types.False
                        BashParser.Str b1 -> GHC.Base.eqString a11 b1 } }) -}
07fad313baf2fc5ba58b7e48105739ba
  $fEqEchoConstr :: GHC.Classes.Eq BashParser.EchoConstr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.EchoConstr
                  BashParser.$fEqCommands_$c==1
                  BashParser.$fEqEchoConstr_$c/= -}
07fad313baf2fc5ba58b7e48105739ba
  $fEqEchoConstr_$c/= ::
    BashParser.EchoConstr -> BashParser.EchoConstr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: BashParser.EchoConstr) (y :: BashParser.EchoConstr) ->
                 case BashParser.$fEqCommands_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fEqVarAssigment :: GHC.Classes.Eq BashParser.VarAssigment
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.VarAssigment
                  BashParser.$fEqVarAssigment_$c==
                  BashParser.$fEqVarAssigment_$c/= -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fEqVarAssigment_$c/= ::
    BashParser.VarAssigment
    -> BashParser.VarAssigment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: BashParser.VarAssigment) (y :: BashParser.VarAssigment) ->
                 case BashParser.$fEqVarAssigment_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fEqVarAssigment_$c== ::
    BashParser.VarAssigment
    -> BashParser.VarAssigment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BashParser.VarAssigment)
                   (ds1 :: BashParser.VarAssigment) ->
                 case ds of wild {
                   BashParser.Quotes a11 a12
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.Quotes b1 b2
                        -> case GHC.Base.eqString a11 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a12 b2 } }
                   BashParser.StringArgument a11 a12
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.StringArgument b1 b2
                        -> case GHC.Base.eqString a11 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a12 b2 } }
                   BashParser.DoubleQuotes a11 a12
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BashParser.DoubleQuotes b1 b2
                        -> case GHC.Base.eqString a11 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ BashParser.DQPart
                                  BashParser.$fEqDQPart
                                  a12
                                  b2 } } }) -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fShowAssigmentType :: GHC.Show.Show BashParser.AssigmentType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.AssigmentType
                  BashParser.$fShowAssigmentType_$cshowsPrec
                  BashParser.$fShowAssigmentType_$cshow
                  BashParser.$fShowAssigmentType_$cshowList -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fShowAssigmentType1 :: BashParser.AssigmentType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: BashParser.AssigmentType)
                   (w1 :: GHC.Base.String) ->
                 BashParser.$w$cshowsPrec 0# w w1) -}
a76b59b2dad9c334ae7712dcfd0745a7
  $fShowAssigmentType2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fShowAssigmentType_$cshow ::
    BashParser.AssigmentType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BashParser.AssigmentType) ->
                 BashParser.$fShowAssigmentType_$cshowsPrec
                   BashParser.$fShowAssigmentType2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fShowAssigmentType_$cshowList ::
    [BashParser.AssigmentType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [BashParser.AssigmentType]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BashParser.AssigmentType
                   BashParser.$fShowAssigmentType1
                   ls
                   s) -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $fShowAssigmentType_$cshowsPrec ::
    GHC.Types.Int -> BashParser.AssigmentType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BashParser.AssigmentType)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BashParser.$w$cshowsPrec ww1 w1 w2 }) -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fShowCode :: GHC.Show.Show BashParser.Code
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.Code
                  BashParser.$fShowCode_$cshowsPrec
                  BashParser.$fShowCode_$cshow
                  BashParser.$fShowCode_$cshowList -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fShowCode1 :: BashParser.Code -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (BashParser.$fShowCode_$cshowsPrec
                   BashParser.$fShowAssigmentType2) -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fShowCode_$cshow :: BashParser.Code -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BashParser.Code) ->
                 BashParser.$fShowCode_$cshowsPrec
                   BashParser.$fShowAssigmentType2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fShowCode_$cshowList :: [BashParser.Code] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [BashParser.Code]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BashParser.Code
                   BashParser.$fShowCode1
                   ls
                   s) -}
fddf3ca373ef21cc4a5868d1f5b5f6d3
  $fShowCode_$cshowsPrec ::
    GHC.Types.Int -> BashParser.Code -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
d54403496c6b78ba119978b4b46bf59a
  $fShowCommands :: GHC.Show.Show BashParser.Commands
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.Commands
                  BashParser.$fShowCommands_$cshowsPrec
                  BashParser.$fShowCommands_$cshow
                  BashParser.$fShowCommands_$cshowList -}
d54403496c6b78ba119978b4b46bf59a
  $fShowCommands1 :: BashParser.Commands -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (BashParser.$fShowCommands_$cshowsPrec
                   BashParser.$fShowAssigmentType2) -}
d54403496c6b78ba119978b4b46bf59a
  $fShowCommands_$cshow :: BashParser.Commands -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BashParser.Commands) ->
                 BashParser.$fShowCommands_$cshowsPrec
                   BashParser.$fShowAssigmentType2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d54403496c6b78ba119978b4b46bf59a
  $fShowCommands_$cshowList ::
    [BashParser.Commands] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [BashParser.Commands]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BashParser.Commands
                   BashParser.$fShowCommands1
                   ls
                   s) -}
d54403496c6b78ba119978b4b46bf59a
  $fShowCommands_$cshowsPrec ::
    GHC.Types.Int -> BashParser.Commands -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
c072c11c13abe76e9eedf62e06f602b7
  $fShowDQPart :: GHC.Show.Show BashParser.DQPart
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.DQPart
                  BashParser.$fShowDQPart_$cshowsPrec
                  BashParser.$fShowDQPart_$cshow
                  BashParser.$fShowDQPart_$cshowList -}
c072c11c13abe76e9eedf62e06f602b7
  $fShowDQPart1 :: BashParser.DQPart -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: BashParser.DQPart) (w1 :: GHC.Base.String) ->
                 BashParser.$w$cshowsPrec1 0# w w1) -}
ee9dffd3482cbff26d920a1e50e65b57
  $fShowDQPart2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Str "#) -}
38d1b215718f8f8a2bfc16dbeaa55f46
  $fShowDQPart3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Argument "#) -}
4dc94ba2cf7dd6b7e5fc8220116e8eed
  $fShowDQPart4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c072c11c13abe76e9eedf62e06f602b7
  $fShowDQPart_$cshow :: BashParser.DQPart -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: BashParser.DQPart) ->
                 case x of wild {
                   BashParser.Argument b1
                   -> GHC.CString.unpackAppendCString#
                        BashParser.$fShowDQPart3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 BashParser.$fShowDQPart4))
                   BashParser.Str b1
                   -> GHC.CString.unpackAppendCString#
                        BashParser.$fShowDQPart2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 BashParser.$fShowDQPart4)) }) -}
c072c11c13abe76e9eedf62e06f602b7
  $fShowDQPart_$cshowList :: [BashParser.DQPart] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [BashParser.DQPart]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BashParser.DQPart
                   BashParser.$fShowDQPart1
                   ls
                   s) -}
c072c11c13abe76e9eedf62e06f602b7
  $fShowDQPart_$cshowsPrec ::
    GHC.Types.Int -> BashParser.DQPart -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BashParser.DQPart)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BashParser.$w$cshowsPrec1 ww1 w1 w2 }) -}
07fad313baf2fc5ba58b7e48105739ba
  $fShowEchoConstr :: GHC.Show.Show BashParser.EchoConstr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.EchoConstr
                  BashParser.$fShowEchoConstr_$cshowsPrec
                  BashParser.$fShowEchoConstr_$cshow
                  BashParser.$fShowEchoConstr_$cshowList -}
07fad313baf2fc5ba58b7e48105739ba
  $fShowEchoConstr1 :: BashParser.EchoConstr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: BashParser.EchoConstr)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { BashParser.Constr ww1 ww2 ->
                 BashParser.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
07fad313baf2fc5ba58b7e48105739ba
  $fShowEchoConstr_$cshow :: BashParser.EchoConstr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BashParser.EchoConstr) ->
                 BashParser.$fShowEchoConstr_$cshowsPrec
                   BashParser.$fShowAssigmentType2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
07fad313baf2fc5ba58b7e48105739ba
  $fShowEchoConstr_$cshowList ::
    [BashParser.EchoConstr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [BashParser.EchoConstr]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BashParser.EchoConstr
                   BashParser.$fShowEchoConstr1
                   ls
                   s) -}
07fad313baf2fc5ba58b7e48105739ba
  $fShowEchoConstr_$cshowsPrec ::
    GHC.Types.Int -> BashParser.EchoConstr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BashParser.EchoConstr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { BashParser.Constr ww3 ww4 ->
                 BashParser.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fShowVarAssigment :: GHC.Show.Show BashParser.VarAssigment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ BashParser.VarAssigment
                  BashParser.$fShowVarAssigment_$cshowsPrec
                  BashParser.$fShowVarAssigment_$cshow
                  BashParser.$fShowVarAssigment_$cshowList -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fShowVarAssigment1 :: BashParser.VarAssigment -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: BashParser.VarAssigment)
                   (w1 :: GHC.Base.String) ->
                 BashParser.$w$cshowsPrec3 0# w w1) -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fShowVarAssigment_$cshow ::
    BashParser.VarAssigment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BashParser.VarAssigment) ->
                 BashParser.$fShowVarAssigment_$cshowsPrec
                   BashParser.$fShowAssigmentType2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fShowVarAssigment_$cshowList ::
    [BashParser.VarAssigment] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [BashParser.VarAssigment]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BashParser.VarAssigment
                   BashParser.$fShowVarAssigment1
                   ls
                   s) -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $fShowVarAssigment_$cshowsPrec ::
    GHC.Types.Int -> BashParser.VarAssigment -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BashParser.VarAssigment)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BashParser.$w$cshowsPrec3 ww1 w1 w2 }) -}
b7b2e49db6fe69f1bec497058d72344d
  $s$fAlternativeParsecT_$sunion ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
d087db89f53f899fd992e3aea4cf609c
  $s$fAlternativeParsecT_$sunion1 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
41724e424340b7b7bb6c2c113a7e0e3e
  $s$fAlternativeParsecT_$swithHints ::
    Text.Megaparsec.Internal.Hints
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> (Text.Megaparsec.Error.ParseError [GHC.Types.Char] e
        -> Text.Megaparsec.State.State [GHC.Types.Char] -> m b)
    -> Text.Megaparsec.Error.ParseError [GHC.Types.Char] e
    -> Text.Megaparsec.State.State [GHC.Types.Char]
    -> m b
  {- Arity: 3, Strictness: <L,U><C(S),1*C1(U)><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ b
                   (ds :: Text.Megaparsec.Internal.Hints
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (c :: Text.Megaparsec.Error.ParseError [GHC.Types.Char] e
                         -> Text.Megaparsec.State.State [GHC.Types.Char] -> m b)
                   (e1 :: Text.Megaparsec.Error.ParseError [GHC.Types.Char] e) ->
                 case e1 of wild {
                   Text.Megaparsec.Error.TrivialError pos us ps6
                   -> c (Text.Megaparsec.Error.TrivialError
                           @ [GHC.Types.Char]
                           @ e
                           pos
                           us
                           (GHC.Base.foldr
                              @ (Data.Set.Internal.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                              @ (Data.Set.Internal.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                 -> Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                              (\ (ds1 :: Data.Set.Internal.Set
                                           (Text.Megaparsec.Error.ErrorItem
                                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                 (ds2 :: Data.Set.Internal.Set
                                           (Text.Megaparsec.Error.ErrorItem
                                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                         -> Data.Set.Internal.Set
                                              (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Stream.Token
                                                    [GHC.Types.Char])))[OneShot]
                                 (v :: Data.Set.Internal.Set
                                         (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Stream.Token
                                               [GHC.Types.Char])))[OneShot] ->
                               case v of z { DEFAULT ->
                               ds2 (BashParser.$s$fAlternativeParsecT_$sunion1 z ds1) })
                              (GHC.Base.id
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                              (GHC.Types.:
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                 ps6
                                 ds
                                   `cast`
                                 (Text.Megaparsec.Internal.N:Hints[0]
                                      <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                              (Data.Set.Internal.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char])))))
                   Text.Megaparsec.Error.FancyError ipv ipv1 -> c wild }) -}
f6741544c7f8feb84aa358eb7e113d2c
  $s$fEqErrorFancy ::
    GHC.Classes.Eq (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                  (Text.Megaparsec.Error.$fEqErrorFancy_$c==
                     @ Data.Void.Void
                     Data.Void.$fEqVoid)
                  BashParser.$s$fEqErrorFancy_$s$fEqErrorFancy_$c/= -}
8de1ee81efc1c60568af53b50a77370a
  $s$fEqErrorFancy_$s$fEqErrorFancy_$c/= ::
    Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                   (y :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                 case Text.Megaparsec.Error.$fEqErrorFancy_$c==
                        @ Data.Void.Void
                        Data.Void.$fEqVoid
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
91a670a8ee1be9f0afe6da95d5c64123
  $s$fEqErrorItem ::
    GHC.Classes.Eq
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorItem
                       (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                  (Text.Megaparsec.Error.$fEqErrorItem_$c==
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fEqChar
                       `cast`
                     (GHC.Classes.Eq (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R)
                  BashParser.$s$fEqErrorItem_$s$fEqErrorItem_$c/= -}
52793e91ec17d374ff0189cb1fed7d6c
  $s$fEqErrorItem_$s$fEqErrorItem_$c/= ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (y :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                 case Text.Megaparsec.Error.$fEqErrorItem_$c==
                        @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                        GHC.Classes.$fEqChar
                          `cast`
                        (GHC.Classes.Eq (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1947d0f4d25c50a36bad666053f2e8bc
  $s$fOrdErrorFancy ::
    GHC.Classes.Ord (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                  BashParser.$s$fEqErrorFancy
                  (Text.Megaparsec.Error.$fOrdErrorFancy_$ccompare
                     @ Data.Void.Void
                     Data.Void.$fOrdVoid)
                  (Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                     @ Data.Void.Void
                     Data.Void.$fOrdVoid)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                     (b :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Data.Void.Void
                          Data.Void.$fOrdVoid
                          b
                          a of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                     (b :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                   Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                     @ Data.Void.Void
                     Data.Void.$fOrdVoid
                     b
                     a)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                     (b :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Data.Void.Void
                          Data.Void.$fOrdVoid
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                     (y :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Data.Void.Void
                          Data.Void.$fOrdVoid
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                     (y :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Data.Void.Void
                          Data.Void.$fOrdVoid
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
b6635976b0400ff4d7dae6900a0123ab
  $s$fOrdErrorFancy_$c<= ::
    Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                   (b :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Data.Void.Void
                        Data.Void.$fOrdVoid
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c250e2b2f6d6ab806940658bd91e8ea1
  $s$fOrdErrorFancy_$c>= ::
    Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                   (b :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Data.Void.Void
                        Data.Void.$fOrdVoid
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
17796a9d8f949f3fb63808bbbcfdb983
  $s$fOrdErrorFancy_$cmax ::
    Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                   (y :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Data.Void.Void
                        Data.Void.$fOrdVoid
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
8040c55cfb23629de383b24952de8958
  $s$fOrdErrorFancy_$cmin ::
    Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
    -> Text.Megaparsec.Error.ErrorFancy Data.Void.Void
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void)
                   (y :: Text.Megaparsec.Error.ErrorFancy Data.Void.Void) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Data.Void.Void
                        Data.Void.$fOrdVoid
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
8aa91c908f93af629f473de53e6b8229
  $s$fOrdErrorItem ::
    GHC.Classes.Ord
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorItem
                       (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                  BashParser.$s$fEqErrorItem
                  (Text.Megaparsec.Error.$fOrdErrorItem_$ccompare
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R)
                  (Text.Megaparsec.Error.$fOrdErrorItem_$c<
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          b
                          a of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   Text.Megaparsec.Error.$fOrdErrorItem_$c<
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                     b
                     a)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (y :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (y :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
bb83142bd361b499a9f3fe82c5c361c9
  $s$fOrdErrorItem_$c<= ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (b :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                 case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                        @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                        GHC.Classes.$fOrdChar
                          `cast`
                        (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
10c061df06b2a550473ae718c3b276b1
  $s$fOrdErrorItem_$c>= ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (b :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                 case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                        @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                        GHC.Classes.$fOrdChar
                          `cast`
                        (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b386b8a9c7a4ee83d3e9595913ad4b4c
  $s$fOrdErrorItem_$cmax ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (y :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                 case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                        @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                        GHC.Classes.$fOrdChar
                          `cast`
                        (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
898e8c9ed5877bfe4f0e3604b317cff2
  $s$fOrdErrorItem_$cmin ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (y :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                 case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                        @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                        GHC.Classes.$fOrdChar
                          `cast`
                        (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
195ff00b0d37b127c0e152e1bce9e2de
  $sinsertR_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
9fdf7599433ffed66961db7b9c46a922
  $sinsert_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
574e1245d1e912f01f6fe2c2b33421f8
  $tc'Argument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10684293691284383981##
                   12662772574450051782##
                   BashParser.$trModule
                   BashParser.$tc'Argument2
                   0#
                   BashParser.$tc'Argument1) -}
972f8f81044920a0d8d581a0f3d1fccd
  $tc'Argument1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5132f6a7fc29d80bf0274bf8d977bd5e
  $tc'Argument2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Argument3) -}
66c6d6f5b6e05737236093da26c9ddbd
  $tc'Argument3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Argument"#) -}
a9d3a67843b77a60bd771d50b718e15c
  $tc'Cd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5968504155394997258##
                   10761468375689698974##
                   BashParser.$trModule
                   BashParser.$tc'Cd2
                   0#
                   BashParser.$tc'Cd1) -}
df90d85105091a1e2137f6a0d95fbe1d
  $tc'Cd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8fa88d58dc92938de844627af6409c18
  $tc'Cd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Cd3) -}
f4c692dee32195e214a3d77a86d85725
  $tc'Cd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cd"#) -}
51cb02244d2a46ebd5b0eba5ffae25c1
  $tc'Cdd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7640395963938914554##
                   3968899336912502559##
                   BashParser.$trModule
                   BashParser.$tc'Cdd2
                   0#
                   BashParser.$tc'Cdd1) -}
6cc650786f06cad0402f1c9d5ffa894b
  $tc'Cdd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
920e53e2cd36f4770661fd5396de9f2f
  $tc'Cdd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Cdd3) -}
d01c540ff9d9cd0701bca5702550bec7
  $tc'Cdd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cdd"#) -}
c24942dbc016a295cfa54b49d7d55651
  $tc'Cmd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13587222671337500272##
                   14624274515236142823##
                   BashParser.$trModule
                   BashParser.$tc'Cmd2
                   0#
                   BashParser.$tc'Cmd1) -}
70a6e86d05fb98ea189bf65d4dd358fc
  $tc'Cmd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
872d6be96e94fa959e3fe618cbe2177f
  $tc'Cmd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Cmd3) -}
15e9d5f691423fe6a407b13a29f233c8
  $tc'Cmd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cmd"#) -}
9a3b2c2f54a3a75415ea794365458d37
  $tc'Com :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6607243997469411222##
                   17494134006258607542##
                   BashParser.$trModule
                   BashParser.$tc'Com2
                   0#
                   BashParser.$tc'Com1) -}
46a5c9ef092bb6bf1691d5d4effc10a2
  $tc'Com1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bbea0c3f1e6ab91acf8d04009af30796
  $tc'Com2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Com3) -}
b802e88290de94dbd9e71b05530cb31a
  $tc'Com3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Com"#) -}
4d193dfb412ce811ced11ba2ffdf7d72
  $tc'Constr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10394432294485110991##
                   3891875772233276209##
                   BashParser.$trModule
                   BashParser.$tc'Constr2
                   0#
                   BashParser.$tc'Constr1) -}
6fd3585b556eaf8830591cb93cdb9ef5
  $tc'Constr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1d5a96efc56742ce9721984cc0a68d90
  $tc'Constr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Constr3) -}
85c2fdc6ea8ed8f907dd47b3d32ea16b
  $tc'Constr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Constr"#) -}
a05ceb462468bb38f444cbbfffef2780
  $tc'Data :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5952549468332171606##
                   173266420193119602##
                   BashParser.$trModule
                   BashParser.$tc'Data2
                   0#
                   BashParser.$tc'Data1) -}
0693257f2d829696434daa78d4a0f7b3
  $tc'Data1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4af6c387d7af304394a13e14ecb5c765
  $tc'Data2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Data3) -}
bc57301b04f8885f4a61dc7b85dcde98
  $tc'Data3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Data"#) -}
36e2a1cf36a2899a2b5d87ef62dd320f
  $tc'DoubQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5626611324351784627##
                   15424422457135764450##
                   BashParser.$trModule
                   BashParser.$tc'DoubQ2
                   0#
                   BashParser.$tc'DoubQ1) -}
60e5731790b0316b5c5931d5474eeaa0
  $tc'DoubQ1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a1b741683f3e0a8ee0853dbbc08ca141
  $tc'DoubQ2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'DoubQ3) -}
9ca7fe917a187874644a20d571db62d9
  $tc'DoubQ3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoubQ"#) -}
b9d59d00c9d37c649386d0deeefd8055
  $tc'DoubleQuotes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13099810145667609237##
                   7007626301956682347##
                   BashParser.$trModule
                   BashParser.$tc'DoubleQuotes2
                   0#
                   BashParser.$tc'DoubleQuotes1) -}
8942ddd3817290b6881d38931c9b38ef
  $tc'DoubleQuotes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e0de156444d4da1bdafcfeab48d79149
  $tc'DoubleQuotes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'DoubleQuotes3) -}
d219bcfa01f2dc263692c3f1dc528301
  $tc'DoubleQuotes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoubleQuotes"#) -}
98839d50bf98b4c5c2cdebe619330e2f
  $tc'Echo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15718987830162459565##
                   14691107416616464292##
                   BashParser.$trModule
                   BashParser.$tc'Echo2
                   0#
                   BashParser.$tc'Echo1) -}
8523b7b923179686ef7a24ef336e93ed
  $tc'Echo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2a6365da26cc71c66200226a54666456
  $tc'Echo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Echo3) -}
d9f8a8940069eafd26d33d3e59410250
  $tc'Echo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Echo"#) -}
11c939e00a1f4939ba6883a8368fae07
  $tc'EchoCom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14435212762692955525##
                   3046590234095257675##
                   BashParser.$trModule
                   BashParser.$tc'EchoCom2
                   0#
                   BashParser.$tc'EchoCom1) -}
d6503aa5fd18cfb529f38fb07412ee1d
  $tc'EchoCom1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b53dd21606a93c8727c2d3b4ac5894eb
  $tc'EchoCom2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'EchoCom3) -}
08103276726100373b46d0025aff3036
  $tc'EchoCom3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EchoCom"#) -}
3bdf661bc2d603ab715d33320f605109
  $tc'Ep :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1111043628842754623##
                   8688435105532417080##
                   BashParser.$trModule
                   BashParser.$tc'Ep2
                   0#
                   BashParser.$tc'Ep1) -}
4d410d1ba200c73804c09472d3e8c870
  $tc'Ep1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
50b982a82f448b2c7a06df18f2ba3de0
  $tc'Ep2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Ep3) -}
0eabc6994c4715f889a2a88c9fa1c543
  $tc'Ep3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ep"#) -}
d2b265b9219190be4e161e9191b35315
  $tc'Eps :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12165068167391476857##
                   1964849878437323886##
                   BashParser.$trModule
                   BashParser.$tc'Eps2
                   0#
                   BashParser.$tc'Eps1) -}
6c73a0cd249fda2fecb32ce8034b996c
  $tc'Eps1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1d01597788e2e7b3157675516c5ec1da
  $tc'Eps2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Eps3) -}
c63c7388013c731bae2c4746ae131ed5
  $tc'Eps3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Eps"#) -}
c2968cbe7a23446687992a6b9b901a8a
  $tc'Ex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13420459414528227870##
                   17312719926413386278##
                   BashParser.$trModule
                   BashParser.$tc'Ex1
                   0#
                   BashParser.$tc'Cdd1) -}
4bedc67faa48a316ba8b2b4cf19642cf
  $tc'Ex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Ex2) -}
97c69f6989d9ca367966743d22197126
  $tc'Ex2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ex"#) -}
d89af86ea8b2dae6f5ed7777188929e4
  $tc'Exit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16850697227366923027##
                   9427177474711041770##
                   BashParser.$trModule
                   BashParser.$tc'Exit1
                   0#
                   BashParser.$tc'Cd1) -}
9ae9ae0096ff61cb7aff1d13cb849e29
  $tc'Exit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Exit2) -}
4e1924bc7f4ead0024ac8b5460cd07a3
  $tc'Exit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Exit"#) -}
26beaf6a4896f50ce977ccccfb14ac92
  $tc'Pd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9423204473036567820##
                   130330828838762755##
                   BashParser.$trModule
                   BashParser.$tc'Pd2
                   0#
                   BashParser.$tc'Pd1) -}
52a0c3de1d73f34682702cd948328f37
  $tc'Pd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
69f240414b15e780341a95aa24249d7e
  $tc'Pd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Pd3) -}
fb808c2bb7d3bce4b0e2c5194b543ed2
  $tc'Pd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pd"#) -}
3e0357ec781220c447ab471f09158880
  $tc'Pointer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4073615257022030178##
                   531282074927810004##
                   BashParser.$trModule
                   BashParser.$tc'Pointer1
                   0#
                   BashParser.$tc'Data1) -}
7593067f3ec2073910aa471d534da295
  $tc'Pointer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Pointer2) -}
363308c68a3ae93827b470e73ff56bb2
  $tc'Pointer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pointer"#) -}
3c6d5878089f0eff5b65f05de99283d5
  $tc'Pwd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   738149680690495303##
                   17417906879759929453##
                   BashParser.$trModule
                   BashParser.$tc'Pwd2
                   0#
                   BashParser.$tc'Pwd1) -}
d43aec489f37d8e1c0e0940866d23919
  $tc'Pwd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
8cec594369d8a03f01bbe19ae20c9b3b
  $tc'Pwd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Pwd3) -}
7d85411c9bca5567ba3ed8b91e8ef8da
  $tc'Pwd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pwd"#) -}
48490dc0ad68638b8d3ab8698b875601
  $tc'Quotes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12798049751989035056##
                   6285619707088021884##
                   BashParser.$trModule
                   BashParser.$tc'Quotes2
                   0#
                   BashParser.$tc'Quotes1) -}
9f449ec600b5dd270fada5461c5b0fd6
  $tc'Quotes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a154d64ea06d73388fe5f00dc8b0037d
  $tc'Quotes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Quotes3) -}
3deaf56d5315cd929ab8109d6c432dba
  $tc'Quotes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quotes"#) -}
3ef596d37eab8068beff3689ec0812c3
  $tc'Read :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   981906340539771953##
                   10427241219152500480##
                   BashParser.$trModule
                   BashParser.$tc'Read2
                   0#
                   BashParser.$tc'Read1) -}
3f4bc6d29563a68e4da1835641b47b04
  $tc'Read1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
77cbe36f7e79c61a7f9126350f73fc68
  $tc'Read2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Read3) -}
8fce6e00a40c2e7b595b750ba1817f94
  $tc'Read3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Read"#) -}
03f49d74797f0a6d161e0b3598247425
  $tc'ReadCom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7786051621285156556##
                   850450629687206004##
                   BashParser.$trModule
                   BashParser.$tc'ReadCom2
                   0#
                   BashParser.$tc'ReadCom1) -}
d2dfa93be2eff4066551571365ec06af
  $tc'ReadCom1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c979ddecbbb0c38351fcc14262c10ab0
  $tc'ReadCom2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'ReadCom3) -}
e987ff4806e1e67a398f5eb62f9998ba
  $tc'ReadCom3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReadCom"#) -}
17d40035fd0bf29c130d7b367bf0c53a
  $tc'Str :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   162813432098712260##
                   604565841332138391##
                   BashParser.$trModule
                   BashParser.$tc'Str1
                   0#
                   BashParser.$tc'Argument1) -}
cefb938ff80c128ca4121acf2e9189f4
  $tc'Str1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Str2) -}
83a3cb92681df3a4582979b6f2a3710c
  $tc'Str2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Str"#) -}
e1d55025222eab60ab1e95eab1c769c8
  $tc'StringArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   972556624995282445##
                   16853001433316229295##
                   BashParser.$trModule
                   BashParser.$tc'StringArgument1
                   0#
                   BashParser.$tc'Quotes1) -}
fd6e480482f02ec5702cd865ac65462f
  $tc'StringArgument1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'StringArgument2) -}
74d8a35f4f512047b0f9d4b51d1bb9d2
  $tc'StringArgument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringArgument"#) -}
0a4ea23e52b1fed23cdc3604f6256025
  $tc'VarAss :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1604047446181915106##
                   10314034094117289741##
                   BashParser.$trModule
                   BashParser.$tc'VarAss2
                   0#
                   BashParser.$tc'VarAss1) -}
e376bdfdb27b0f7efdc6fdafb02c41b5
  $tc'VarAss1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cd49455f37a8e994ef493ba9e83aaddd
  $tc'VarAss2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'VarAss3) -}
3380e0f028ad9ab5f818f7a0ba5df318
  $tc'VarAss3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarAss"#) -}
f8f280a7900ef7a912c7576af2e1864a
  $tc'Vars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9763090031308813508##
                   784046214519497062##
                   BashParser.$trModule
                   BashParser.$tc'Vars2
                   0#
                   BashParser.$tc'Vars1) -}
12c5084913456e533ea9fcf5c6351af3
  $tc'Vars1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e36e7a1fd9f55c43deb941a522f856f8
  $tc'Vars2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tc'Vars3) -}
7a9a7f8e6b6749250f45012c065613af
  $tc'Vars3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Vars"#) -}
681dfbafb842c73dad1128f02888b3b6
  $tcAssigmentType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13411011788592195359##
                   10154088179428491986##
                   BashParser.$trModule
                   BashParser.$tcAssigmentType1
                   0#
                   GHC.Types.krep$*) -}
cc55447c884fd654e36004eb36fc8863
  $tcAssigmentType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcAssigmentType2) -}
8bc405983a9256fed71fb8c01e5967c0
  $tcAssigmentType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AssigmentType"#) -}
e4d3cf6e0849d6d07f640c30fdba2a2a
  $tcCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9801058478568377994##
                   2906166247712162448##
                   BashParser.$trModule
                   BashParser.$tcCode1
                   0#
                   GHC.Types.krep$*) -}
65b907757718f6749c9be9ea9786d16e
  $tcCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcCode2) -}
9c0e34ecdf0b521122a2678b2cec8e95
  $tcCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Code"#) -}
e7fabbaa2fdabb2c8d34a6ae0a9e6625
  $tcCodeType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10219611347356296735##
                   959608894063404628##
                   BashParser.$trModule
                   BashParser.$tcCodeType1
                   0#
                   GHC.Types.krep$*) -}
721471bad4d6eaf490f1e823907bc8b9
  $tcCodeType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcCodeType2) -}
9149a96cc27ee82df7468cce4ee4e474
  $tcCodeType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CodeType"#) -}
a6b22c5e3a7c7807d8a0e90decd83ec3
  $tcCommandType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15918349439410997271##
                   9199609218153075298##
                   BashParser.$trModule
                   BashParser.$tcCommandType1
                   0#
                   GHC.Types.krep$*) -}
407686d8f4b29fcb1a5cee5c11ffe051
  $tcCommandType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcCommandType2) -}
fcc745cacea10a59ea0bab1d417cf206
  $tcCommandType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CommandType"#) -}
4c58287e029a6096c03db503dd55afb4
  $tcCommands :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10274419116980457556##
                   568769700061748638##
                   BashParser.$trModule
                   BashParser.$tcCommands1
                   0#
                   GHC.Types.krep$*) -}
362618a8f0e419d6e5589e42fdd4e980
  $tcCommands1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcCommands2) -}
57962bcbff4db4b6fec90386dcd4e44c
  $tcCommands2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Commands"#) -}
870cf6fb6046c093a8771c20de652e89
  $tcDQPart :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3907188606010570246##
                   9733343397246922101##
                   BashParser.$trModule
                   BashParser.$tcDQPart1
                   0#
                   GHC.Types.krep$*) -}
bab9ba851498d9ee7b3b253b5cc4bba1
  $tcDQPart1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcDQPart2) -}
8fc212b7df34583dbf9d53d5432189c1
  $tcDQPart2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DQPart"#) -}
0f047e7189553910a12eea12e94f761f
  $tcEchoConstr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10965006353233797710##
                   6412215429736730603##
                   BashParser.$trModule
                   BashParser.$tcEchoConstr1
                   0#
                   GHC.Types.krep$*) -}
62628a91f40981e42a78c29106b1b49e
  $tcEchoConstr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcEchoConstr2) -}
f6472bc69f6f732411372f4b3b584c3b
  $tcEchoConstr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EchoConstr"#) -}
9f82557c85ce06b7d2890bf8a2ba58fd
  $tcVarAssigment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7299097336484751318##
                   15440150869060153258##
                   BashParser.$trModule
                   BashParser.$tcVarAssigment1
                   0#
                   GHC.Types.krep$*) -}
df8079213540f594d14b419050965a32
  $tcVarAssigment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$tcVarAssigment2) -}
2197021f82ad347749dad44a34449b8b
  $tcVarAssigment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VarAssigment"#) -}
6f5adbc6775d268406e44754d23ed0fe
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BashParser.$trModule3
                   BashParser.$trModule1) -}
6c18dc1dedf486f5364405df1db1adcb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$trModule2) -}
b6cf331ee1038746f5b539c6ef3c90ef
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BashParser"#) -}
44c1666c190bd2155db2bf5b3f28e9c1
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BashParser.$trModule4) -}
7f6e6bd594bfdee341146489c31c9c84
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hw3-0.1.0.0-83r239n2GbFIyVIthhyr0Y"#) -}
30442cae1e9de198cde73f6efc02630d
  $w$c== ::
    GHC.Types.Bool
    -> [BashParser.DQPart]
    -> GHC.Types.Bool
    -> [BashParser.DQPart]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (ww1 :: [BashParser.DQPart])
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: [BashParser.DQPart]) ->
                 case ww of wild {
                   GHC.Types.False
                   -> case ww2 of wild1 {
                        GHC.Types.False
                        -> GHC.Classes.$fEq[]_$c==
                             @ BashParser.DQPart
                             BashParser.$fEqDQPart
                             ww1
                             ww3
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case ww2 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ BashParser.DQPart
                             BashParser.$fEqDQPart
                             ww1
                             ww3 } }) -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> BashParser.AssigmentType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
c072c11c13abe76e9eedf62e06f602b7
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> BashParser.DQPart -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: BashParser.DQPart)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   BashParser.Argument b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             BashParser.$fShowDQPart3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                BashParser.$fShowDQPart3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   BashParser.Str b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             BashParser.$fShowDQPart2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                BashParser.$fShowDQPart2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1))))) } }) -}
7847e785311b8e81289e6e8640b8514a
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> [BashParser.DQPart]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [2] -}
b3d71f85164a4d5cfdd3f58bf9931d42
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> BashParser.VarAssigment -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
dda77be147b4bbe20607f11ae42e7c02
  $wpCode ::
    [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.State.PosState [GHC.Types.Char]
    -> (BashParser.Code
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          [GHC.Types.Char] Data.Void.Void
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (BashParser.Code
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          [GHC.Types.Char] Data.Void.Void
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 7,
     Strictness: <S,U><S,U><L,U><L,C(C1(C1(U)))><L,C(U)><L,C(C1(C1(U)))><L,C(C1(U))>,
     Inline: [2] -}
b4ea82f6a1294c7ce9b4d7d89defe4a4
  data AssigmentType
    = Data GHC.Base.String
    | Pointer GHC.Base.String
    | DoubQ [BashParser.DQPart]
fddf3ca373ef21cc4a5868d1f5b5f6d3
  data Code
    = Vars BashParser.VarAssigment BashParser.Code
    | Cmd BashParser.Commands BashParser.Code
    | Eps
a9aac43b4eb7d20485e2f9636851c782
  data CodeType
    = VarAss BashParser.VarAssigment | Com BashParser.Commands | Ep
c32467c7e08fa4cb9e5a5f5adb4b5e44
  data CommandType
    = ReadCom [GHC.Base.String]
    | EchoCom BashParser.EchoConstr
    | Pd
    | Ex GHC.Base.String
    | Cdd GHC.Base.String
d54403496c6b78ba119978b4b46bf59a
  data Commands
    = Read [GHC.Base.String]
    | Echo BashParser.EchoConstr
    | Pwd
    | Cd GHC.Base.String
    | Exit GHC.Base.String
c072c11c13abe76e9eedf62e06f602b7
  data DQPart = Argument GHC.Base.String | Str GHC.Base.String
07fad313baf2fc5ba58b7e48105739ba
  data EchoConstr = Constr GHC.Types.Bool [BashParser.DQPart]
ec271d7dc7d089b244dd6d463849d83e
  type Parser =
    Text.Megaparsec.Parsec Data.Void.Void GHC.Base.String :: * -> *
b3d71f85164a4d5cfdd3f58bf9931d42
  data VarAssigment
    = Quotes GHC.Base.String GHC.Base.String
    | StringArgument GHC.Base.String GHC.Base.String
    | DoubleQuotes GHC.Base.String [BashParser.DQPart]
f246122d8d9243c2566db7e28e732861
  pCode :: BashParser.Parser BashParser.Code
  {- Arity: 5,
     Strictness: <S(SSL),1*U(U,U,U)><L,C(C1(C1(U)))><L,C(U)><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                BashParser.pCode1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Data.Void.Void>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <BashParser.Code>_R)) -}
0438ac5ca2071107ae3e2aa55f507558
  pCode1 ::
    Text.Megaparsec.State.State [GHC.Types.Char]
    -> (BashParser.Code
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          [GHC.Types.Char] Data.Void.Void
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (BashParser.Code
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          [GHC.Types.Char] Data.Void.Void
        -> Text.Megaparsec.State.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(SSL),1*U(U,U,U)><L,C(C1(C1(U)))><L,C(U)><L,C(C1(C1(U)))><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State.State [GHC.Types.Char])
                   (w1 :: BashParser.Code
                          -> Text.Megaparsec.State.State [GHC.Types.Char]
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            [GHC.Types.Char] Data.Void.Void
                          -> Text.Megaparsec.State.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: BashParser.Code
                          -> Text.Megaparsec.State.State [GHC.Types.Char]
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            [GHC.Types.Char] Data.Void.Void
                          -> Text.Megaparsec.State.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ->
                 BashParser.$wpCode @ b1 ww1 ww2 ww3 w1 w2 w3 w4 }) -}
instance GHC.Classes.Eq [BashParser.AssigmentType]
  = BashParser.$fEqAssigmentType
instance GHC.Classes.Eq [BashParser.Code] = BashParser.$fEqCode
instance GHC.Classes.Eq [BashParser.Commands]
  = BashParser.$fEqCommands
instance GHC.Classes.Eq [BashParser.DQPart] = BashParser.$fEqDQPart
instance GHC.Classes.Eq [BashParser.EchoConstr]
  = BashParser.$fEqEchoConstr
instance GHC.Classes.Eq [BashParser.VarAssigment]
  = BashParser.$fEqVarAssigment
instance GHC.Show.Show [BashParser.AssigmentType]
  = BashParser.$fShowAssigmentType
instance GHC.Show.Show [BashParser.Code] = BashParser.$fShowCode
instance GHC.Show.Show [BashParser.Commands]
  = BashParser.$fShowCommands
instance GHC.Show.Show [BashParser.DQPart]
  = BashParser.$fShowDQPart
instance GHC.Show.Show [BashParser.EchoConstr]
  = BashParser.$fShowEchoConstr
instance GHC.Show.Show [BashParser.VarAssigment]
  = BashParser.$fShowVarAssigment
"SPEC/BashParser $fEqErrorFancy @ Void" [orphan] forall (v :: GHC.Classes.Eq
                                                                Data.Void.Void)
  Text.Megaparsec.Error.$fEqErrorFancy @ Data.Void.Void v
  = BashParser.$s$fEqErrorFancy
"SPEC/BashParser $fEqErrorFancy_$c/= @ Void" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                        Data.Void.Void)
  Text.Megaparsec.Error.$fEqErrorFancy_$c/= @ Data.Void.Void $dEq
  = BashParser.$s$fEqErrorFancy_$s$fEqErrorFancy_$c/=
"SPEC/BashParser $fEqErrorItem @ (Token [Char])" [orphan] forall (v :: GHC.Classes.Eq
                                                                         (Text.Megaparsec.Stream.Token
                                                                            [GHC.Types.Char]))
  Text.Megaparsec.Error.$fEqErrorItem @ (Text.Megaparsec.Stream.Token
                                           [GHC.Types.Char])
                                      v
  = BashParser.$s$fEqErrorItem
"SPEC/BashParser $fEqErrorItem_$c/= @ (Token [Char])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                 (Text.Megaparsec.Stream.Token
                                                                                    [GHC.Types.Char]))
  Text.Megaparsec.Error.$fEqErrorItem_$c/= @ (Text.Megaparsec.Stream.Token
                                                [GHC.Types.Char])
                                           $dEq
  = BashParser.$s$fEqErrorItem_$s$fEqErrorItem_$c/=
"SPEC/BashParser $fOrdErrorFancy @ Void" [orphan] forall (v :: GHC.Classes.Ord
                                                                 Data.Void.Void)
  Text.Megaparsec.Error.$fOrdErrorFancy @ Data.Void.Void v
  = BashParser.$s$fOrdErrorFancy
"SPEC/BashParser $fOrdErrorFancy_$c<= @ Void" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                          Data.Void.Void)
  Text.Megaparsec.Error.$fOrdErrorFancy_$c<= @ Data.Void.Void $dOrd
  = BashParser.$s$fOrdErrorFancy_$c<=
"SPEC/BashParser $fOrdErrorFancy_$c>= @ Void" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                          Data.Void.Void)
  Text.Megaparsec.Error.$fOrdErrorFancy_$c>= @ Data.Void.Void $dOrd
  = BashParser.$s$fOrdErrorFancy_$c>=
"SPEC/BashParser $fOrdErrorFancy_$cmax @ Void" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                           Data.Void.Void)
  Text.Megaparsec.Error.$fOrdErrorFancy_$cmax @ Data.Void.Void $dOrd
  = BashParser.$s$fOrdErrorFancy_$cmax
"SPEC/BashParser $fOrdErrorFancy_$cmin @ Void" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                           Data.Void.Void)
  Text.Megaparsec.Error.$fOrdErrorFancy_$cmin @ Data.Void.Void $dOrd
  = BashParser.$s$fOrdErrorFancy_$cmin
"SPEC/BashParser $fOrdErrorItem @ (Token [Char])" [orphan] forall (v :: GHC.Classes.Ord
                                                                          (Text.Megaparsec.Stream.Token
                                                                             [GHC.Types.Char]))
  Text.Megaparsec.Error.$fOrdErrorItem @ (Text.Megaparsec.Stream.Token
                                            [GHC.Types.Char])
                                       v
  = BashParser.$s$fOrdErrorItem
"SPEC/BashParser $fOrdErrorItem_$c<= @ (Token [Char])" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                   (Text.Megaparsec.Stream.Token
                                                                                      [GHC.Types.Char]))
  Text.Megaparsec.Error.$fOrdErrorItem_$c<= @ (Text.Megaparsec.Stream.Token
                                                 [GHC.Types.Char])
                                            $dOrd
  = BashParser.$s$fOrdErrorItem_$c<=
"SPEC/BashParser $fOrdErrorItem_$c>= @ (Token [Char])" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                   (Text.Megaparsec.Stream.Token
                                                                                      [GHC.Types.Char]))
  Text.Megaparsec.Error.$fOrdErrorItem_$c>= @ (Text.Megaparsec.Stream.Token
                                                 [GHC.Types.Char])
                                            $dOrd
  = BashParser.$s$fOrdErrorItem_$c>=
"SPEC/BashParser $fOrdErrorItem_$cmax @ (Token [Char])" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                    (Text.Megaparsec.Stream.Token
                                                                                       [GHC.Types.Char]))
  Text.Megaparsec.Error.$fOrdErrorItem_$cmax @ (Text.Megaparsec.Stream.Token
                                                  [GHC.Types.Char])
                                             $dOrd
  = BashParser.$s$fOrdErrorItem_$cmax
"SPEC/BashParser $fOrdErrorItem_$cmin @ (Token [Char])" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                    (Text.Megaparsec.Stream.Token
                                                                                       [GHC.Types.Char]))
  Text.Megaparsec.Error.$fOrdErrorItem_$cmin @ (Text.Megaparsec.Stream.Token
                                                  [GHC.Types.Char])
                                             $dOrd
  = BashParser.$s$fOrdErrorItem_$cmin
"SPEC/BashParser union @ (ErrorFancy Void)" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                        (Text.Megaparsec.Error.ErrorFancy
                                                                           Data.Void.Void))
  Data.Set.Internal.union @ (Text.Megaparsec.Error.ErrorFancy
                               Data.Void.Void)
                          $dOrd
  = BashParser.$s$fAlternativeParsecT_$sunion
"SPEC/BashParser union @ (ErrorItem (Token [Char]))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                 (Text.Megaparsec.Error.ErrorItem
                                                                                    (Text.Megaparsec.Stream.Token
                                                                                       [GHC.Types.Char])))
  Data.Set.Internal.union @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                          $dOrd
  = BashParser.$s$fAlternativeParsecT_$sunion1
"SPEC/BashParser withHints @ [Char] _ _ _" [orphan] forall @ e
                                                           @ m :: * -> *
                                                           @ b
                                                           ($dStream :: Text.Megaparsec.Stream.Stream
                                                                          [GHC.Types.Char])
  Text.Megaparsec.Internal.withHints @ [GHC.Types.Char]
                                     @ e
                                     @ m
                                     @ b
                                     $dStream
  = BashParser.$s$fAlternativeParsecT_$swithHints @ e @ m @ b
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

