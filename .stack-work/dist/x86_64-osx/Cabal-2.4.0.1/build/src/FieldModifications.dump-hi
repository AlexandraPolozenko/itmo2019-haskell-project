
==================== FINAL INTERFACE ====================
2019-10-16 15:30:28.202299 UTC

interface battlefield-0.1.0.0-5FxjAk3MfUxBwzZHxsAwJJ:FieldModifications 8065
  interface hash: 5f38bcaee50753019be14066b0df36f8
  ABI hash: 27a063825aa8f0a19356b697ad834b79
  export-list hash: 6e2340de28b8939249f72b2c8ef8336d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  FieldModifications.assignCards
  FieldModifications.assignFields
  FieldModifications.checkField
  FieldModifications.checkWinner
  FieldModifications.closeField
  FieldModifications.combo
  FieldModifications.fight
  FieldModifications.putCard
module dependencies: Types
package dependencies: MonadRandom-0.5.1.1 array-0.5.3.0
                      base-4.12.0.0 binary-0.8.6.0 bytestring-0.10.8.2 containers-0.6.0.1
                      deepseq-1.4.4.0 ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-2.8.0.1 primitive-0.6.4.0 random-1.1 random-shuffle-0.0.4
                      time-1.8.0.2 transformers-0.5.6.2 word8-0.1.3
orphans: network-2.8.0.1:Network.Socket
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  Types 043f08a974677789d65a44378a7017f6
  exports: 7005e9ac06608dc00200eab6cb1a8f0b
  Batallion 63615e18200b1a3edba8ac84312a091f
  Black 5eea3fc6f0f8a81660d1df37550e2c2f
  Blue b97285b247ad126f5d2f67d408ef498b
  Card 071377c9fae21dd5cbc200e7f64f2749
  Card f56ea284b75d643f0cf3516e9319b706
  Closed 339b6950e11b87c3cc13aa70cf4bc0bc
  Combo ee57e920b91561024e8ad25d212333cb
  Field 9c944e628d67463a6e30c38ee01cec02
  Field bc869bdca4fff34b50ca5746463a585a
  FieldState 5d2bff0cd35152ac0d84f794d4df1e90
  Green 1a51a20f219bdb21d320c80fb8c04660
  Host f34a0f98c902d161f092cc39e3068f73
  One a6b96c613b57c6e23e4af3333c00289b
  Open 76396d585815df5f0fd06ded82f530fa
  Phalanx 2e4a5fdfe557dc507a4ba76531be0bdf
  Player c2322114e8ca9252b4ef834669bb1040
  Red 5de962ed314168f80bcfec89faa42796
  Skirmish 0713a96832376634634a7ab3ee74dbc6
  Two 3899e2941e3a31594d088f92503be540
  Wedge b30bb1e5e3d146226207817b47de38dc
  White 3a0f75531503707875336b06f63ac668
  Yellow c20c22777beebcbe3e273879881ba9ac
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  random-1.1:System.Random 92935f2739d08d3c469b92fe5ac17118
import  -/  random-shuffle-0.0.4:System.Random.Shuffle e8e4e6525aaedcf77df76a1ed69c45ac
f87a331639631340cd5b96e9dd03b0f4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FieldModifications.$trModule3
                   FieldModifications.$trModule1) -}
db57c28e7553ea89f6414509ec67d907
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FieldModifications.$trModule2) -}
8d73e6e8589a5d48000d06cf145484ed
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldModifications"#) -}
2fd226d83fc97b31330e4b312ffaccdb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FieldModifications.$trModule4) -}
9317d1fc662b495577d784f41d32feca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("battlefield-0.1.0.0-5FxjAk3MfUxBwzZHxsAwJJ"#) -}
fd8b3cb9e49426f499e5da83c888894a
  $wcheckField ::
    [Types.Card]
    -> [Types.Card] -> Types.FieldState -> Types.FieldState
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: [Types.Card])
                   (ww1 :: [Types.Card])
                   (ww2 :: Types.FieldState) ->
                 case ww2 of wild {
                   Types.Closed ds -> wild
                   Types.Open
                   -> case FieldModifications.combo ww of wild1 {
                        GHC.Maybe.Nothing -> Types.Open
                        GHC.Maybe.Just ipv
                        -> case FieldModifications.combo ww1 of wild2 {
                             GHC.Maybe.Nothing -> Types.Open
                             GHC.Maybe.Just ipv1
                             -> case Types.$fOrdCombo_$ccompare ipv ipv1 of wild3 {
                                  DEFAULT -> FieldModifications.checkField2
                                  GHC.Types.GT -> FieldModifications.checkField1 } } } }) -}
263a08bbda888b8a5fa2dac0aa151c68
  $wcloseField ::
    [Types.Field] -> GHC.Prim.Int# -> Types.Player -> [Types.Field]
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: [Types.Field])
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Types.Player) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                 } in
                 let {
                   ds :: Types.Field = GHC.List.$w!! @ Types.Field w y
                 } in
                 let {
                   n5 :: [Types.Card]
                   = case ds of wild { Types.Field comb1 comb2 ds1 -> comb1 }
                 } in
                 let {
                   n6 :: [Types.Card]
                   = case ds of wild { Types.Field comb1 comb2 ds1 -> comb2 }
                 } in
                 let {
                   n7 :: Types.FieldState = Types.Closed w1
                 } in
                 let {
                   n8 :: Types.Field = Types.Field n5 n6 n7
                 } in
                 let {
                   n9 :: [Types.Field]
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> FieldModifications.$wunsafeDrop @ Types.Field ww w
                       1# -> w }
                 } in
                 let {
                   n10 :: [Types.Field] = GHC.Types.: @ Types.Field n8 n9
                 } in
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT -> n10
                   1#
                   -> letrec {
                        $wgo6 :: [Types.Field] -> GHC.Prim.Int# -> [Types.Field]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2] -}
                        = \ (w2 :: [Types.Field]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild {
                            [] -> n10
                            : y1 ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.: @ Types.Field y1 ($wgo6 ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ Types.Field y1 n10 } }
                      } in
                      $wgo6 w y }) -}
ccdfe68e6c978574ceb5c4bd170fce9e
  $wfiveFields ::
    [Types.Field]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U(U)>,
     Inline: [2] -}
89246aaa42d70187b76abffa63603b04
  $wgo :: GHC.Prim.Int# -> (# Types.Card, [Types.Card] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2] -}
03254bdbf61e4348f29b959e910bc32d
  $wputCard ::
    [Types.Field]
    -> GHC.Prim.Int# -> Types.Player -> Types.Card -> [Types.Field]
  {- Arity: 4, Strictness: <S,U><S,U><L,1*U><L,U>, Inline: [2] -}
ace4259da1c95817699980759d4233ba
  $wthreeFieldsNear ::
    [Types.Field]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U(1*U)>,
     Inline: [2] -}
b1093db5c16dace515ebfe0ecf8c4e02
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [2] -}
5198ef1ec5be6839fbc1cd8dd70b0ac9
  $wxs :: GHC.Prim.Int# -> (# Types.Field, [Types.Field] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
d51ee5b20368ddb4066a4c7555ed1baf
  assignCards :: GHC.Types.IO [Types.Card]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                FieldModifications.assignCards1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[Types.Card]>_R)) -}
1ed374e79ecb52f8884fcfa3eb284cdf
  assignCards1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Types.Card] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, FieldModifications.assignCards2 ipv1 #) } }) -}
223663ffca25fd1845547d4b4ce0a288
  assignCards2 :: System.Random.StdGen -> [Types.Card]
  {- Unfolding: (System.Random.Shuffle.shuffle'
                   @ System.Random.StdGen
                   @ Types.Card
                   System.Random.$fRandomGenStdGen
                   FieldModifications.assignCards_cards
                   FieldModifications.assignCards3) -}
a4155b988bf30e8b287d0b84bd2cf66c
  assignCards3 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ Types.Card
                        FieldModifications.assignCards_cards
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
c3e84436037bc775035b677f8c8a7d7b
  assignCards_cards :: [Types.Card]
  {- Unfolding: (case FieldModifications.$wgo
                        1# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Card ww1 ww2 }) -}
10cc6f50b159dbed157594b53d19c63a
  assignFields :: [Types.Field]
  {- Unfolding: (case FieldModifications.$wxs
                        9# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Field ww1 ww2 }) -}
5e249c4042c7176c55bb8b8c9a3a98f3
  checkField :: Types.Field -> Types.FieldState
  {- Arity: 1, Strictness: <S(LLS),1*U(U,U,1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Field) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 FieldModifications.$wcheckField ww1 ww2 ww3 }) -}
6d44b784c88e0987ef73dc4883aaa230
  checkField1 :: Types.FieldState
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.Closed Types.One) -}
9f574a9cf395f059f68f5833f2ec4dc2
  checkField2 :: Types.FieldState
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.Closed Types.Two) -}
c99f0a9f2553c56831be34688176492f
  checkWinner :: [Types.Field] -> GHC.Maybe.Maybe Types.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (fields :: [Types.Field]) ->
                 case FieldModifications.$wthreeFieldsNear
                        fields
                        0#
                        FieldModifications.checkWinner1 of wild {
                   GHC.Maybe.Nothing
                   -> FieldModifications.$wfiveFields
                        fields
                        0#
                        FieldModifications.checkWinner1
                   GHC.Maybe.Just a -> wild }) -}
4d97affbf027a3791036c35967dbc65c
  checkWinner1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5295592b8914356bc5e6eec3ae8e6609
  closeField ::
    [Types.Field] -> GHC.Types.Int -> Types.Player -> [Types.Field]
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Player) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FieldModifications.$wcloseField w ww1 w2 }) -}
747f5b7e7642b77c7b773e16ecc2aaf1
  combo :: [Types.Card] -> GHC.Maybe.Maybe Types.Combo
  {- Arity: 1, Strictness: <S,U> -}
54aceb7943b8f92b32aed9269515c656
  fight ::
    GHC.Maybe.Maybe Types.Combo
    -> GHC.Maybe.Maybe Types.Combo -> Types.FieldState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Maybe.Maybe Types.Combo)
                   (ds1 :: GHC.Maybe.Maybe Types.Combo) ->
                 case ds of wild {
                   GHC.Maybe.Nothing -> Types.Open
                   GHC.Maybe.Just ipv
                   -> case ds1 of wild1 {
                        GHC.Maybe.Nothing -> Types.Open
                        GHC.Maybe.Just ipv1
                        -> case Types.$fOrdCombo_$ccompare ipv ipv1 of wild2 {
                             DEFAULT -> FieldModifications.checkField2
                             GHC.Types.GT -> FieldModifications.checkField1 } } }) -}
0d84fd578df1aa51f7e984a407df3040
  putCard ::
    [Types.Field]
    -> GHC.Types.Int -> Types.Player -> Types.Card -> [Types.Field]
  {- Arity: 4, Strictness: <S,U><S(S),1*U(U)><L,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Player)
                   (w3 :: Types.Card) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FieldModifications.$wputCard w ww1 w2 w3 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

