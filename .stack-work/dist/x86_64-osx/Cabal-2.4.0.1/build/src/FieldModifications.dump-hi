
==================== FINAL INTERFACE ====================
2019-10-16 12:23:59.452916 UTC

interface battlefield-0.1.0.0-8CmZqnTevv4DQlKkYwSBkE:FieldModifications 8065
  interface hash: edef805e4b0d63de38fff80d69cfe168
  ABI hash: 0ed652d781c72e0da372df590fdd1218
  export-list hash: 1c37881ba77c99935bedf56ec699407a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  FieldModifications.assignCards
  FieldModifications.assignFields
  FieldModifications.closeField
  FieldModifications.putCard
module dependencies: Types
package dependencies: MonadRandom-0.5.1.1 array-0.5.3.0
                      base-4.12.0.0 binary-0.8.6.0 bytestring-0.10.8.2 containers-0.6.0.1
                      deepseq-1.4.4.0 ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-2.8.0.1 primitive-0.6.4.0 random-1.1 random-shuffle-0.0.4
                      time-1.8.0.2 transformers-0.5.6.2 word8-0.1.3
orphans: network-2.8.0.1:Network.Socket
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  Types f76ea1dd1d2c4fe47575f93bbf95bb77
  exports: c99b08131a958b98eccb97272359a95d
  Black 14489e6e1e478e9418fe6498b25cedba
  Blue 86628e5534b7a64a6c3a5ac3faf62899
  Card 07a1b70b9906294be44018dfdd15b4a8
  Card 2eddaddf45f0295f5fbfbba779a9e7e1
  Closed a0aef2f9d17e0bdb006c0df664c09765
  Field 02f8d8577d79d8d16f27b75554d7935b
  Field a5e8e31ebd654aed1c51bdce89a1e481
  Green 0d18773145fdc0f5bebc088ce9ae326f
  One 3fe7adac58f06448e478d09be3e5b418
  Open 32e13061efa20fc2c30072ba0cdab279
  Player 084e809b613707d9daac3e7dc5838ec3
  Red b6e6cec9dbcff4db69b0251a1191edcc
  Two a40f7e53307bc104b38af2573ba4ed0d
  White 4eb0122608d2d0e6a0fbfb40813cf11d
  Yellow f4f55aced41a97a4a2540e47bf5d47f3
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  random-1.1:System.Random 92935f2739d08d3c469b92fe5ac17118
import  -/  random-shuffle-0.0.4:System.Random.Shuffle e8e4e6525aaedcf77df76a1ed69c45ac
964b40be5bab01e930847b5daffb6bf8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FieldModifications.$trModule3
                   FieldModifications.$trModule1) -}
6bcecbadbcce938f37c0a94e713cf290
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FieldModifications.$trModule2) -}
7ac0c25a30b0bd47c364f4f30cba62e9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldModifications"#) -}
317cc5264aad4effde0a45251ca06fb5
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FieldModifications.$trModule4) -}
4dc8c4e96370a0088fbfb1858d6460db
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("battlefield-0.1.0.0-8CmZqnTevv4DQlKkYwSBkE"#) -}
8ed7c6ebd876ac647135b62322f7f221
  $wcloseField ::
    [Types.Field] -> GHC.Prim.Int# -> Types.Player -> [Types.Field]
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: [Types.Field])
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Types.Player) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                 } in
                 let {
                   ds :: Types.Field = GHC.List.$w!! @ Types.Field w y
                 } in
                 let {
                   n5 :: [Types.Card]
                   = case ds of wild { Types.Field comb1 comb2 ds1 -> comb1 }
                 } in
                 let {
                   n6 :: [Types.Card]
                   = case ds of wild { Types.Field comb1 comb2 ds1 -> comb2 }
                 } in
                 let {
                   n7 :: Types.FieldState = Types.Closed w1
                 } in
                 let {
                   n8 :: Types.Field = Types.Field n5 n6 n7
                 } in
                 let {
                   n9 :: [Types.Field]
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> FieldModifications.$wunsafeDrop @ Types.Field ww w
                       1# -> w }
                 } in
                 let {
                   n10 :: [Types.Field] = GHC.Types.: @ Types.Field n8 n9
                 } in
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT -> n10
                   1#
                   -> letrec {
                        $wgo6 :: [Types.Field] -> GHC.Prim.Int# -> [Types.Field]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2] -}
                        = \ (w2 :: [Types.Field]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild {
                            [] -> n10
                            : y1 ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.: @ Types.Field y1 ($wgo6 ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ Types.Field y1 n10 } }
                      } in
                      $wgo6 w y }) -}
29d7259d1a6c4ad4008867a131098c59
  $wgo :: GHC.Prim.Int# -> (# Types.Card, [Types.Card] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2] -}
85b946240ca8f41314ec5f00d2d71930
  $wputCard ::
    [Types.Field]
    -> GHC.Prim.Int# -> Types.Player -> Types.Card -> [Types.Field]
  {- Arity: 4, Strictness: <S,U><S,U><L,1*U><L,U>, Inline: [2] -}
7a79b9f485ff87eb2187802838c7e5c7
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [2] -}
82d3020eecefd9f5f7313ea70e35173e
  $wxs :: GHC.Prim.Int# -> (# Types.Field, [Types.Field] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
c3e8041d252bdb8d76e7c6f6b3c2372c
  assignCards :: GHC.Types.IO [Types.Card]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                FieldModifications.assignCards1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[Types.Card]>_R)) -}
b7e25f9640bb7ef43e1d02c4a95abec8
  assignCards1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Types.Card] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, FieldModifications.assignCards2 ipv1 #) } }) -}
c9d653863d4a029f30d8a20e0f31ef6a
  assignCards2 :: System.Random.StdGen -> [Types.Card]
  {- Unfolding: (System.Random.Shuffle.shuffle'
                   @ System.Random.StdGen
                   @ Types.Card
                   System.Random.$fRandomGenStdGen
                   FieldModifications.assignCards_cards
                   FieldModifications.assignCards3) -}
c8624f0a83ad82577f862cbb4fb7de25
  assignCards3 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ Types.Card
                        FieldModifications.assignCards_cards
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
02cc34c938e89ac7cdb466402e9d8ee7
  assignCards_cards :: [Types.Card]
  {- Unfolding: (case FieldModifications.$wgo
                        1# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Card ww1 ww2 }) -}
4a16da23b7b921f5ccbe2ad45f742ce2
  assignFields :: [Types.Field]
  {- Unfolding: (case FieldModifications.$wxs
                        9# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Field ww1 ww2 }) -}
42e634c80df606259652216acdbbb05a
  closeField ::
    [Types.Field] -> GHC.Types.Int -> Types.Player -> [Types.Field]
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Player) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FieldModifications.$wcloseField w ww1 w2 }) -}
519c2dde62541c9a56c719442d1d03a4
  putCard ::
    [Types.Field]
    -> GHC.Types.Int -> Types.Player -> Types.Card -> [Types.Field]
  {- Arity: 4, Strictness: <S,U><S(S),1*U(U)><L,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Player)
                   (w3 :: Types.Card) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FieldModifications.$wputCard w ww1 w2 w3 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

