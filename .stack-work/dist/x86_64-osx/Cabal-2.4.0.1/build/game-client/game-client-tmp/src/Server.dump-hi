
==================== FINAL INTERFACE ====================
2019-10-16 12:30:02.087602 UTC

interface main:Server 8065
  interface hash: 92ffc57b91ad1ade0d42aedbf50c715b
  ABI hash: c5c354e50d7a936f52646c4f4e5dc866
  export-list hash: ae80174a70a64b225c238d466ef3ec22
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 65757ef7efc27a712b81722891d79a9d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Server.checkField
  Server.checkWinner
  Server.combo
  Server.fight
  Server.filterClosedFields
  Server.fiveFields
  Server.main
  Server.phasePut
  Server.server
  Server.setPlayers
  Server.sockHandler
  Server.startGame
  Server.threeFieldsNear
module dependencies: ByteStringParser FieldModifications Types
package dependencies: MonadRandom-0.5.1.1 array-0.5.3.0
                      base-4.12.0.0 binary-0.8.6.0 bytestring-0.10.8.2 containers-0.6.0.1
                      deepseq-1.4.4.0 ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-2.8.0.1 primitive-0.6.4.0 random-1.1 random-shuffle-0.0.4
                      time-1.8.0.2 transformers-0.5.6.2 word8-0.1.3
orphans: transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         network-2.8.0.1:Network.Socket binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
import  -/  base-4.12.0.0:Control.Concurrent 945d3c1c41ed03e6117e3861cad65d9f
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Conc.Sync 275e94c5ede09d3593e4c106b892e4f5
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.IO c961e5ee6731c0683a6e879272c9e9f6
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  ByteStringParser 0b5256620d6038a1aadb1924d0ad08a4
  exports: e9267c784a97126959c6cd3339f4b0b5
  decodeTurn 227d6a9eebb0d90f5c14163de0f89668
  encode d2a37251e2c01c08f3ab5563e5d854eb
import  -/  FieldModifications f96445268a3403225544f0c3409e29f4
  exports: e38e0343d80065346850be12a768b866
  assignCards f6276b51017198928b49eff8d7c9bc1f
  assignFields e553a524341897b886e33dc694e4e223
  putCard 426a8ef9b8565bb924ebf5863666040b
import  -/  Types 13236caea53d0317c396bbb857f84c1f
  exports: c35108131b97aa56b3b8599551ff8f92
  Batallion 02736e049f50bb40c05236ab33996eb2
  Card 51525d39284d58b90b8fb4a0ee597ad4
  Card e0f58c3cad8c4e390d59f73d44aec0aa
  Changes 52759c2c4169fe2190be7a980ead83b3
  Closed 4fba621562a0f3da41024aec310a25ed
  Combo 7a578f69626ef655b98f1cbac3ae71ad
  Field 0b58f1fe7e85fbc232b258f2fa1f1cad
  Field 02d0b769e45d511e621211e0ee648c51
  FieldClosed 2c59e0286547ed65971cc0e91c046ec7
  FieldState 3250b0de31069931509c82f9abf291a6
  Host 7aaddbedaad293df351db5ab4b345023
  NewCard ae7b2ce57b62039f74915e0ffdcea963
  One 457b4b567886ccddbd5529458de2a794
  Open 3636e2811d4261a10f70e87ee9d0ea36
  Phalanx cc5d0bb067e11a786c09ceff72109cfd
  Player 31ba73326e5209545eb7e8d451ba07b2
  PutCard be74a9e618d1e545054b82b801c9cb66
  Skirmish de42c4b1b1b83b9af9b56baf3f55e5af
  StateChanges ee17e162b8535913eb100e5543bca10b
  Take 2347d16e85fb5c7d6e6428c947693d4a
  Two 3d1b9bd4c691acc6e77e468ded2f9411
  Wedge b4db2a697fe57d086a45391ef4886f85
  Winner 40b55c1d90884f00a453545869c7640f
  World 204702ae146aa5068bede556c6847570
  World b44e6caa2182449d4423675a70b44ba3
  defaultCard 371abfee57525cb1bd7cdda83a96cd0c
  messageSize 904dc4e91088d91b35a6494b0eee8ce2
import  -/  mtl-2.2.2:Control.Monad.Reader d5c3a33f1c95bb71f4ae02f87a7048ff
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 57cf6a03579b61bbf9b331632b55e65e
import  -/  network-2.8.0.1:Network.Socket 2fb10212ee6ec3cda4f5f95de27378a3
import  -/  network-2.8.0.1:Network.Socket.ByteString 6f7c7de848eff00b79f890f81b0bb183
import  -/  network-2.8.0.1:Network.Socket.Internal 3199c2e7c8102952472c2e79cef4a0b4
import  -/  network-2.8.0.1:Network.Socket.Types b396f655f8272982c962f65e0eb004e1
import  -/  random-1.1:System.Random 92935f2739d08d3c469b92fe5ac17118
import  -/  random-shuffle-0.0.4:System.Random.Shuffle e8e4e6525aaedcf77df76a1ed69c45ac
import  -/  transformers-0.5.6.2:Control.Monad.Trans.Reader 047d9523dd0b97f3c42ee03eae49a228
e330b715107134e31ff6250305995063
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Server.$trModule3
                   Server.$trModule1) -}
c67f32697d0fc1c667e987dc67e15c29
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Server.$trModule2) -}
98fedb791b23ea8d05469e8a9751f2aa
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Server"#) -}
d36fe27e91b765b378c8537b62ef0cb3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Server.$trModule4) -}
ba725a50e0ec37f584d0c94902d39872
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
872ae62cb7d10735e9278bc82d56a133
  $wcheckField ::
    [Types.Card]
    -> [Types.Card] -> Types.FieldState -> Types.FieldState
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: [Types.Card])
                   (ww1 :: [Types.Card])
                   (ww2 :: Types.FieldState) ->
                 case ww2 of wild {
                   Types.Closed ds -> wild
                   Types.Open
                   -> case Server.combo ww of wild1 {
                        GHC.Maybe.Nothing -> Types.Open
                        GHC.Maybe.Just ipv
                        -> case Server.combo ww1 of wild2 {
                             GHC.Maybe.Nothing -> Types.Open
                             GHC.Maybe.Just ipv1
                             -> case Types.$fOrdCombo_$ccompare ipv ipv1 of wild3 {
                                  DEFAULT -> Server.checkField2
                                  GHC.Types.GT -> Server.checkField1 } } } }) -}
4b1b3aecce832c53035d41df89b69950
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    Server.main13)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
85a8e634e799545671366a91515e85ab
  $wfiveFields ::
    [Types.Field]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U(U)>,
     Inline: [2] -}
82dbd83b78bc781f7521d1c4b8342e08
  $wphasePut ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Inline: [2] -}
66ae0c4edfba8b12f30a5e77bd9300c8
  $wsockHandler ::
    GHC.Prim.Int#
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,U><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Network.Socket.Types.SocketType)
                   (ww3 :: Network.Socket.Types.ProtocolNumber)
                   (ww4 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld Network.Socket.Types.SocketStatus)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Network.Socket.$waccept
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) sock1 ds ->
                 case Network.Socket.$waccept
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 { (,) sock2 ds3 ->
                 case Server.main15
                        (GHC.Types.:
                           @ Network.Socket.Types.Socket
                           sock1
                           (GHC.Types.:
                              @ Network.Socket.Types.Socket
                              sock2
                              (GHC.Types.[] @ Network.Socket.Types.Socket)))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild2 {
                   [] -> Server.$wfail ipv4
                   : player1 ds5
                   -> case ds5 of wild3 {
                        [] -> Server.$wfail ipv4
                        : player2 ds6
                        -> case GHC.Prim.fork#
                                  @ (GHC.Types.IO ())
                                  (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.Type.SomeException
                                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case Server.main12 of wild4 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case player1 of ww5 { Network.Socket.Types.MkSocket ww6 ww7 ww8 ww9 ww10 ->
                                      case ww6
                                             `cast`
                                           (Foreign.C.Types.N:CInt[0]) of ww11 { GHC.Int.I32# ww12 ->
                                      case Network.Socket.$wsendBuf
                                             ww12
                                             (GHC.Prim.plusAddr# dt dt2)
                                             dt3
                                             s of ds7 { (#,#) ipv6 ipv7 ->
                                      case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             dt1
                                             ipv6 of s' { DEFAULT ->
                                      (GHC.IO.Handle.Text.hPutStr'
                                         GHC.IO.Handle.FD.stdout
                                         Server.main10
                                         GHC.Types.True)
                                        `cast`
                                      (GHC.Types.N:IO[0] <()>_R)
                                        s' } } } } })
                                     GHC.Conc.Sync.forkIO2
                                     eta)
                                    `cast`
                                  (Sym (GHC.Types.N:IO[0] <()>_R))
                                  ipv4 of ds7 { (#,#) ipv6 ipv7 ->
                           case GHC.Prim.fork#
                                  @ (GHC.Types.IO ())
                                  (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.Type.SomeException
                                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case Server.main9 of wild4 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case player2 of ww5 { Network.Socket.Types.MkSocket ww6 ww7 ww8 ww9 ww10 ->
                                      case ww6
                                             `cast`
                                           (Foreign.C.Types.N:CInt[0]) of ww11 { GHC.Int.I32# ww12 ->
                                      case Network.Socket.$wsendBuf
                                             ww12
                                             (GHC.Prim.plusAddr# dt dt2)
                                             dt3
                                             s of ds8 { (#,#) ipv8 ipv9 ->
                                      case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             dt1
                                             ipv8 of s' { DEFAULT ->
                                      (GHC.IO.Handle.Text.hPutStr'
                                         GHC.IO.Handle.FD.stdout
                                         Server.main7
                                         GHC.Types.True)
                                        `cast`
                                      (GHC.Types.N:IO[0] <()>_R)
                                        s' } } } } })
                                     GHC.Conc.Sync.forkIO2
                                     eta)
                                    `cast`
                                  (Sym (GHC.Types.N:IO[0] <()>_R))
                                  ipv6 of ds8 { (#,#) ipv8 ipv9 ->
                           case Server.main6
                                  player1
                                  player2
                                  ipv8 of ds9 { (#,#) ipv10 ipv11 ->
                           case ipv11 of ww5 { Types.World ww6 ww7 ww8 ->
                           case Server.$wphasePut
                                  player1
                                  player2
                                  ww6
                                  ww7
                                  ww8
                                  ipv10 of ds10 { (#,#) ipv12 ipv13 ->
                           (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Server.main4
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv12 } } } } } } } } } } } }) -}
81ba9c7777a3a4f61338744793e415c0
  $wthreeFieldsNear ::
    [Types.Field]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U(1*U)>,
     Inline: [2] -}
cec6d8d6f4a8180b6d1cd9767d1543c7
  checkField :: Types.Field -> Types.FieldState
  {- Arity: 1, Strictness: <S(LLS),1*U(U,U,1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Field) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 Server.$wcheckField ww1 ww2 ww3 }) -}
2a85b04853c90bbfca7f6fb39cfc2e1f
  checkField1 :: Types.FieldState
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.Closed Types.One) -}
a94e24369f3d522ca9039b1e4da767fa
  checkField2 :: Types.FieldState
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.Closed Types.Two) -}
24fd72bb03fa533e058cb7b9cad30b5c
  checkWinner :: [Types.Field] -> GHC.Maybe.Maybe Types.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (fields :: [Types.Field]) ->
                 case Server.$wthreeFieldsNear
                        fields
                        0#
                        Server.checkWinner1 of wild {
                   GHC.Maybe.Nothing
                   -> Server.$wfiveFields fields 0# Server.checkWinner1
                   GHC.Maybe.Just a -> wild }) -}
049188de118dea89517e139e8dc70d05
  checkWinner1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e547c3baff70f8036914b635dc89fa2f
  combo :: [Types.Card] -> GHC.Maybe.Maybe Types.Combo
  {- Arity: 1, Strictness: <S,U> -}
a69e33b8bc3e3d7af1bfd7b9e76a45a4
  fight ::
    GHC.Maybe.Maybe Types.Combo
    -> GHC.Maybe.Maybe Types.Combo -> Types.FieldState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Maybe.Maybe Types.Combo)
                   (ds1 :: GHC.Maybe.Maybe Types.Combo) ->
                 case ds of wild {
                   GHC.Maybe.Nothing -> Types.Open
                   GHC.Maybe.Just ipv
                   -> case ds1 of wild1 {
                        GHC.Maybe.Nothing -> Types.Open
                        GHC.Maybe.Just ipv1
                        -> case Types.$fOrdCombo_$ccompare ipv ipv1 of wild2 {
                             DEFAULT -> Server.checkField2
                             GHC.Types.GT -> Server.checkField1 } } }) -}
77d63ee919d1fbf70b487deb8ae759d5
  filterClosedFields :: Types.StateChanges -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.StateChanges) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Types.FieldClosed ds1 ds2 -> GHC.Types.True }) -}
89de1d0c7afeb473b760ae211c849c70
  fiveFields ::
    [Types.Field]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S(S),1*U(1*U)><L,1*U(U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Server.$wfiveFields w ww1 w2 }) -}
bafd2a0fb47ba56cba00cb6a82094941
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Server.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
6b129562ffcd7c76f2052d7710db5d54
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Server.main3
                   Server.main2
                     `cast`
                   (Sym (Network.Socket.Types.N:PortNumber[0]))) -}
c8556d843891aa2c8ecda348f32fa36a
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main11) -}
a19c1e7ccd0d5dbebecfe20b997dfbe7
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player One"#) -}
4aaf6f8dcb9b4d95cde1854e346b2e73
  main12 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict_goLen0
                   Server.main_cs1
                   Server.main_cs1) -}
bca04840fc0250825756d46e11e7a3d0
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main14) -}
b3c2f0001b69236bf3fecb23b95a6833
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/Server.hs:44:3-21"#) -}
a3c4373638f215cf17583002d20a418d
  main15 ::
    [Network.Socket.Types.Socket]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Network.Socket.Types.Socket] #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (players :: [Network.Socket.Types.Socket])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case System.Random.Shuffle.shuffle'1
                           @ System.Random.StdGen
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.StdGen
                              System.Random.$fRandomGenStdGen
                              1#
                              ipv1) of ww2 { (#,#) ww3 ww4 ->
                    System.Random.Shuffle.shuffle1
                      @ Network.Socket.Types.Socket
                      (System.Random.Shuffle.shuffle_x
                         @ Network.Socket.Types.Socket
                         (GHC.Base.map
                            @ Network.Socket.Types.Socket
                            @ (System.Random.Shuffle.Tree Network.Socket.Types.Socket)
                            (System.Random.Shuffle.$WLeaf @ Network.Socket.Types.Socket)
                            players))
                      ww3 } #) } }) -}
100f7a8d495575d686243166d9ebe8dc
  main16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
1d34e298d0f617818de99a64a45656be
  main17 :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W32# 0##) -}
1dffe864dd44b5ec2018bb71bb5f734e
  main2 :: GHC.Word.Word16
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W16# 5005##) -}
cb6f90e34fea5b94f635184fa7a799fe
  main3 ::
    Network.Socket.Types.PortNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (port :: Network.Socket.Types.PortNumber)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wbind
                        ww1
                        ww7
                        (Network.Socket.Types.SockAddrInet port Server.main17)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Network.Socket.$wlisten
                        ww1
                        ww7
                        Server.main16
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ww11 { GHC.Int.I32# ww12 ->
                 case Server.$wsockHandler
                        ww12
                        ww2
                        ww3
                        ww4
                        ww7
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 Network.Socket.$wclose
                   ww11 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                   ww7
                   ipv6 } } } } } } }) -}
1871bd6cc1e5681c77abb1b9c0a4dda8
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main5) -}
29ca5a7551fb7fb50ba74b697382620b
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("game finished"#) -}
f983947facc1d097adda5e4ccebf441d
  main6 ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Types.World #)
  {- Arity: 3,
     Strictness: <L,U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,U> -}
f0f5fbb15d2062dbadd2ceea9a0e53e4
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Server.main8) -}
3e54c222ff1cb025fcf8cf31b663cc06
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player Two"#) -}
4423a686347b37fc69a8d666a06f2a4d
  main9 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict_goLen0
                   Server.main_cs
                   Server.main_cs) -}
3cefa8a8445ee33589b9277eca0dd9e4
  main_cs :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Types.$fBinaryPlayer2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
bfd5fae87f2cac20c0c8d70292272d6a
  main_cs1 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Types.$fBinaryPlayer4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
d48fe94bea6b85af2f962fb11356e173
  phasePut ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> Control.Monad.Trans.Reader.ReaderT Types.World GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.phasePut1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R (<Types.World>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <()>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <Types.World>_R
                                                         <GHC.Types.IO>_R
                                                         <()>_N)) -}
76b3e9b60199d7c13cc0a1dd48fbdcab
  phasePut1 ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket
    -> Types.World
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,1*U(U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: Network.Socket.Types.Socket)
                   (w2 :: Types.World)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2 of ww { Types.World ww1 ww2 ww3 ->
                 Server.$wphasePut w w1 ww1 ww2 ww3 w3 }) -}
60339a04423d612c824045965f9a2f3c
  server :: Network.Socket.Types.PortNumber -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.main3
                  `cast`
                (<Network.Socket.Types.PortNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5588df3530d1d2b4f439b5cc13d1cd43
  setPlayers ::
    [Network.Socket.Types.Socket]
    -> GHC.Types.IO [Network.Socket.Types.Socket]
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.main15
                  `cast`
                (<[Network.Socket.Types.Socket]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Network.Socket.Types.Socket]>_R)) -}
2a5571c545c1da41add92918b607d868
  sockHandler :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(S(S)SLLS(S)),1*U(1*U(U),U,U,U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.sockHandler1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9fcc5a29d62c32965b3b64bf868f7aba
  sockHandler1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(S(S)SLLS(S)),1*U(1*U(U),U,U,U(U),1*U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ww6 { GHC.Int.I32# ww7 ->
                 case ww5 of ww8 { GHC.MVar.MVar ww9 ->
                 Server.$wsockHandler ww7 ww2 ww3 ww4 ww9 w1 } } }) -}
ccd41f67a3de9368f01a1613cac20db5
  startGame ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.Socket -> GHC.Types.IO Types.World
  {- Arity: 3,
     Strictness: <L,U(U(U),A,A,A,A)><L,U(U(U),A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.main6
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Types.World>_R)) -}
f076f21ca8532efe9dddcce6967f3541
  threeFieldsNear ::
    [Types.Field]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Maybe.Maybe Types.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S(S),1*U(1*U)><L,1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Server.$wthreeFieldsNear w ww1 w2 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

