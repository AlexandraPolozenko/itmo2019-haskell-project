
==================== FINAL INTERFACE ====================
2019-10-16 12:26:15.290282 UTC

interface main:FieldModifications 8065
  interface hash: c968d2cc92cf97dff1dfee718d7e29ba
  ABI hash: f96445268a3403225544f0c3409e29f4
  export-list hash: e38e0343d80065346850be12a768b866
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 65757ef7efc27a712b81722891d79a9d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  FieldModifications.assignCards
  FieldModifications.assignFields
  FieldModifications.closeField
  FieldModifications.putCard
module dependencies: Types
package dependencies: MonadRandom-0.5.1.1 array-0.5.3.0
                      base-4.12.0.0 binary-0.8.6.0 bytestring-0.10.8.2 containers-0.6.0.1
                      deepseq-1.4.4.0 ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-2.8.0.1 primitive-0.6.4.0 random-1.1 random-shuffle-0.0.4
                      time-1.8.0.2 transformers-0.5.6.2 word8-0.1.3
orphans: network-2.8.0.1:Network.Socket
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  Types 13236caea53d0317c396bbb857f84c1f
  exports: c35108131b97aa56b3b8599551ff8f92
  Black 3bc538798e1e14ead1378fb01c50fa95
  Blue 351991bd6fab8d4bbee057c6e0d250c2
  Card 51525d39284d58b90b8fb4a0ee597ad4
  Card e0f58c3cad8c4e390d59f73d44aec0aa
  Closed 4fba621562a0f3da41024aec310a25ed
  Field 0b58f1fe7e85fbc232b258f2fa1f1cad
  Field 02d0b769e45d511e621211e0ee648c51
  Green c32392d0d513a32c9318f944b821f0b7
  One 457b4b567886ccddbd5529458de2a794
  Open 3636e2811d4261a10f70e87ee9d0ea36
  Player 31ba73326e5209545eb7e8d451ba07b2
  Red d8a4facdefb75b9a70f9825d20f595f7
  Two 3d1b9bd4c691acc6e77e468ded2f9411
  White fdf2ad8368150de27e928df169cedfc7
  Yellow 8c3376bee24b3627718326340686b6c1
import  -/  random-1.1:System.Random 92935f2739d08d3c469b92fe5ac17118
import  -/  random-shuffle-0.0.4:System.Random.Shuffle e8e4e6525aaedcf77df76a1ed69c45ac
5355f6224a11b1b141aa3ff168f3ae33
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FieldModifications.$trModule3
                   FieldModifications.$trModule1) -}
bdc5e76005004bc10990344f06d92210
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FieldModifications.$trModule2) -}
08065ca2e98c1e63cd745cf9f66c8f92
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldModifications"#) -}
688bf9d8f689fcb1f520d9bec2c98844
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FieldModifications.$trModule4) -}
d31779482855de2e70b8fc1196eb0172
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
269a3d02e1de2640a809fabb6a8556db
  $wcloseField ::
    [Types.Field] -> GHC.Prim.Int# -> Types.Player -> [Types.Field]
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: [Types.Field])
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Types.Player) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                 } in
                 let {
                   ds :: Types.Field = GHC.List.$w!! @ Types.Field w y
                 } in
                 let {
                   n5 :: [Types.Card]
                   = case ds of wild { Types.Field comb1 comb2 ds1 -> comb1 }
                 } in
                 let {
                   n6 :: [Types.Card]
                   = case ds of wild { Types.Field comb1 comb2 ds1 -> comb2 }
                 } in
                 let {
                   n7 :: Types.FieldState = Types.Closed w1
                 } in
                 let {
                   n8 :: Types.Field = Types.Field n5 n6 n7
                 } in
                 let {
                   n9 :: [Types.Field]
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> FieldModifications.$wunsafeDrop @ Types.Field ww w
                       1# -> w }
                 } in
                 let {
                   n10 :: [Types.Field] = GHC.Types.: @ Types.Field n8 n9
                 } in
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT -> n10
                   1#
                   -> letrec {
                        $wgo6 :: [Types.Field] -> GHC.Prim.Int# -> [Types.Field]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2] -}
                        = \ (w2 :: [Types.Field]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild {
                            [] -> n10
                            : y1 ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.: @ Types.Field y1 ($wgo6 ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ Types.Field y1 n10 } }
                      } in
                      $wgo6 w y }) -}
6f49f30f99a849281fcd8ba325b88999
  $wgo :: GHC.Prim.Int# -> (# Types.Card, [Types.Card] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2] -}
ea6228d82f6a6e6cc514a05889abc56d
  $wputCard ::
    [Types.Field]
    -> GHC.Prim.Int# -> Types.Player -> Types.Card -> [Types.Field]
  {- Arity: 4, Strictness: <S,U><S,U><L,1*U><L,U>, Inline: [2] -}
6575ba5311050a2acf3e6074756a803d
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [2] -}
04d0a730c559b8d0f4cba464337b9ac6
  $wxs :: GHC.Prim.Int# -> (# Types.Field, [Types.Field] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
f6276b51017198928b49eff8d7c9bc1f
  assignCards :: GHC.Types.IO [Types.Card]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                FieldModifications.assignCards1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[Types.Card]>_R)) -}
0be84eec1b686062c98d20159aff6a1f
  assignCards1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Types.Card] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, FieldModifications.assignCards2 ipv1 #) } }) -}
aa7a0661b84fab9aa4274bd98de71b3b
  assignCards2 :: System.Random.StdGen -> [Types.Card]
  {- Unfolding: (System.Random.Shuffle.shuffle'
                   @ System.Random.StdGen
                   @ Types.Card
                   System.Random.$fRandomGenStdGen
                   FieldModifications.assignCards_cards
                   FieldModifications.assignCards3) -}
c1255fc873d82ecebbb7e4258f91d1d2
  assignCards3 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ Types.Card
                        FieldModifications.assignCards_cards
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
cebc734028a9f0e1851d6a9d62f137b2
  assignCards_cards :: [Types.Card]
  {- Unfolding: (case FieldModifications.$wgo
                        1# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Card ww1 ww2 }) -}
e553a524341897b886e33dc694e4e223
  assignFields :: [Types.Field]
  {- Unfolding: (case FieldModifications.$wxs
                        9# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Field ww1 ww2 }) -}
b6edc876aa4383e7bbf4631f6dd5dc41
  closeField ::
    [Types.Field] -> GHC.Types.Int -> Types.Player -> [Types.Field]
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Player) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FieldModifications.$wcloseField w ww1 w2 }) -}
426a8ef9b8565bb924ebf5863666040b
  putCard ::
    [Types.Field]
    -> GHC.Types.Int -> Types.Player -> Types.Card -> [Types.Field]
  {- Arity: 4, Strictness: <S,U><S(S),1*U(U)><L,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [Types.Field])
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Player)
                   (w3 :: Types.Card) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FieldModifications.$wputCard w ww1 w2 w3 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

