
==================== FINAL INTERFACE ====================
2019-10-16 12:25:51.061987 UTC

interface main:Types 8065
  interface hash: 984b0904ca3d45f0391ebfd63460118d
  ABI hash: 13236caea53d0317c396bbb857f84c1f
  export-list hash: c35108131b97aa56b3b8599551ff8f92
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 65757ef7efc27a712b81722891d79a9d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.defaultCard
  Types.messageSize
  Types.Card{Types.Card}
  Types.Changes{Types.Changes}
  Types.ClientState{Types.ClientState}
  Types.Combo{Types.Batallion Types.Host Types.Phalanx Types.Skirmish Types.Wedge}
  Types.Command{Types.EmptyCommand Types.Put Types.Take Types.Win}
  Types.Field{Types.Field}
  Types.FieldState{Types.Closed Types.Open}
  Types.Player{Types.One Types.Two}
  Types.StateChanges{Types.FieldClosed Types.NewCard Types.Winner}
  Types.Suit{Types.Black Types.Blue Types.Green Types.Red Types.White Types.Yellow}
  Types.Turn{Types.FinishTurn Types.PutCard Types.TakeCard}
  Types.TurnState{Types.EmptyState Types.GameFinished Types.PutCardTurn}
  Types.World{Types.World}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 network-2.8.0.1 word8-0.1.3
orphans: network-2.8.0.1:Network.Socket
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  binary-0.8.6.0:Data.Binary 47a89cefaa44e49e7fd21d133fce6a7e
import  -/  binary-0.8.6.0:Data.Binary.Class 4a00b809573ad7c27e489f5b66886719
import  -/  binary-0.8.6.0:Data.Binary.Get.Internal d7b46ac8c27f3f91b18a28c57f9c8589
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  network-2.8.0.1:Network.Socket 2fb10212ee6ec3cda4f5f95de27378a3
import  -/  network-2.8.0.1:Network.Socket.Types b396f655f8272982c962f65e0eb004e1
import  -/  word8-0.1.3:Data.Word8 4c659cf945933bcecaaee8b1e623c7ae
e0f58c3cad8c4e390d59f73d44aec0aa
  $fBinaryCard :: Data.Binary.Class.Binary Types.Card
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card
                  Types.$fBinaryCard_$cput
                  Types.$fBinaryCard1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Card>_R))
                  Types.$fBinaryCard_$sdefaultPutList -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fBinaryCard1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Card r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Card r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fBinaryCard_$cput :: Types.Card -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U(U))>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fBinaryCard_$sdefaultPutList ::
    [Types.Card] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Card]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Card
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Card)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Card
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryCard_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Card]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fBinaryChanges :: Data.Binary.Class.Binary Types.Changes
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes
                  Types.$fBinaryChanges_$cput
                  Types.$fBinaryChanges1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Changes>_R))
                  Types.$fBinaryChanges_$sdefaultPutList -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fBinaryChanges1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Changes r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Changes r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fBinaryChanges_$cput :: Types.Changes -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Changes) ->
                 case ds of wild { Types.Changes c ->
                 Types.$fBinaryChanges_$sdefaultPutList1 c }) -}
ee17e162b8535913eb100e5543bca10b
  $fBinaryChanges_$cput1 :: Types.StateChanges -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.StateChanges) ->
                 case Types.$w$cput1 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fBinaryChanges_$sdefaultPutList ::
    [Types.Changes] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Changes]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Changes
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Changes)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Changes
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryChanges_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Changes]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ee17e162b8535913eb100e5543bca10b
  $fBinaryChanges_$sdefaultPutList1 ::
    [Types.StateChanges] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.StateChanges]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.StateChanges
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.StateChanges)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.StateChanges
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryChanges_$cput1
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.StateChanges]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
5cb96aac309a684ee212dd5fdbb25930
  $fBinaryCommand :: Data.Binary.Class.Binary Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command
                  Types.$fBinaryCommand_$cput
                  Types.$fBinaryCommand3
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Command>_R))
                  Types.$fBinaryCommand_$sdefaultPutList -}
6b7ffd8c0ddb38746962d3fa20b18aba
  $fBinaryCommand1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl @ r w ww1 ww2 w2 }) -}
c4c717a478d81f17290047484fe7d3e5
  $fBinaryCommand2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl1 @ r w ww1 ww2 w2 }) -}
5cb96aac309a684ee212dd5fdbb25930
  $fBinaryCommand3 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Command r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Command r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
1dd1ffd6a6bcc819fff6e64e3acc3adf
  $fBinaryCommand4 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail @ r dt Types.$fBinaryCommand5 }) -}
0d05ae70bea07559a150c13cea2d699c
  $fBinaryCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fBinaryCommand6) -}
852745ba5d38fee5fc3236ff0cbdab66
  $fBinaryCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
261d7403a645d578ea54bb717e60adfa
  $fBinaryCommand7 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
41be8ff4558862606f33292df1fce09b
  $fBinaryCommand8 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt3 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt3))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
4f1472628b1fb7b3f77deb73a9a3b9de
  $fBinaryCommand9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
5cb96aac309a684ee212dd5fdbb25930
  $fBinaryCommand_$cput :: Types.Command -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Command) ->
                 case Types.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
5cb96aac309a684ee212dd5fdbb25930
  $fBinaryCommand_$sdefaultPutList ::
    [Types.Command] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Command]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Command
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Command)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Command
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryCommand_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Command]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
31ba73326e5209545eb7e8d451ba07b2
  $fBinaryPlayer :: Data.Binary.Class.Binary Types.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fBinaryPlayer_$cput
                  Types.$fBinaryPlayer5
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Player>_R))
                  Types.$fBinaryPlayer_$sdefaultPutList -}
6714998193ce729b58374808c8c52fe4
  $fBinaryPlayer1 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Types.$fBinaryPlayer2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
6a2774750a8fb76c7a72efc3fb4371e8
  $fBinaryPlayer2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl2 @ r w ww1 ww2 w2 }) -}
d68c83c7deb95092317b9694f751455f
  $fBinaryPlayer3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Types.$fBinaryPlayer4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
2ca71b9432362ae2ac7795c442404751
  $fBinaryPlayer4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Types.$wlvl3 @ r w ww1 ww2 w2 }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fBinaryPlayer5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Player r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Player r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fBinaryPlayer_$cput :: Types.Player -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Player) ->
                 case ds of wild {
                   Types.One
                   -> Types.$fBinaryPlayer3
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Types.Two
                   -> Types.$fBinaryPlayer1
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fBinaryPlayer_$sdefaultPutList ::
    [Types.Player] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Player]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Player
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Player)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Player
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryPlayer_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Player]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ee17e162b8535913eb100e5543bca10b
  $fBinaryStateChanges :: Data.Binary.Class.Binary Types.StateChanges
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fBinaryChanges_$cput1
                  Types.$fBinaryStateChanges1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.StateChanges>_R))
                  Types.$fBinaryChanges_$sdefaultPutList1 -}
ee17e162b8535913eb100e5543bca10b
  $fBinaryStateChanges1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.StateChanges r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.StateChanges r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
3cea272f3448558818f3330a2bef7932
  $fBinaryTurn :: Data.Binary.Class.Binary Types.Turn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn
                  Types.$fBinaryTurn_$cput
                  Types.$fBinaryTurn1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Types.Turn>_R))
                  Types.$fBinaryTurn_$sdefaultPutList -}
3cea272f3448558818f3330a2bef7932
  $fBinaryTurn1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Types.Turn r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Types.Turn r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Types.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
3cea272f3448558818f3330a2bef7932
  $fBinaryTurn_$cput :: Types.Turn -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Turn) ->
                 case Types.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
3cea272f3448558818f3330a2bef7932
  $fBinaryTurn_$sdefaultPutList ::
    [Types.Turn] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Types.Turn]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Types.Turn
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Types.Turn)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ Types.Turn
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               Types.$fBinaryTurn_$cput
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Types.Turn]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fEqCard :: GHC.Classes.Eq Types.Card
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card Types.$fEqCard_$c== Types.$fEqCard_$c/= -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fEqCard_$c/= :: Types.Card -> Types.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Card) (y :: Types.Card) ->
                 case Types.$fEqCard_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fEqCard_$c== :: Types.Card -> Types.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Card) (w1 :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 case w1 of ww3 { Types.Card ww4 ww5 ->
                 Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fEqChanges :: GHC.Classes.Eq Types.Changes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes Types.$fEqChanges_$c== Types.$fEqChanges_$c/= -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fEqChanges_$c/= ::
    Types.Changes -> Types.Changes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Changes) (y :: Types.Changes) ->
                 case x of wild { Types.Changes a1 ->
                 case y of wild1 { Types.Changes b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.StateChanges
                        Types.$fEqStateChanges
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fEqChanges_$c== ::
    Types.Changes -> Types.Changes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Changes) (ds1 :: Types.Changes) ->
                 case ds of wild { Types.Changes a1 ->
                 case ds1 of wild1 { Types.Changes b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Types.StateChanges
                   Types.$fEqStateChanges
                   a1
                   b1 } }) -}
92a56bc449287a32dfbff349ccb8abf5
  $fEqClientState :: GHC.Classes.Eq Types.ClientState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.ClientState
                  Types.$fEqClientState_$c==
                  Types.$fEqClientState_$c/= -}
92a56bc449287a32dfbff349ccb8abf5
  $fEqClientState_$c/= ::
    Types.ClientState -> Types.ClientState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.ClientState) (y :: Types.ClientState) ->
                 case Types.$fEqClientState_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
92a56bc449287a32dfbff349ccb8abf5
  $fEqClientState_$c== ::
    Types.ClientState -> Types.ClientState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U(A,A,A,A,1*U(U)),1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.ClientState) (w1 :: Types.ClientState) ->
                 case w of ww { Types.ClientState ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Types.ClientState ww7 ww8 ww9 ww10 ww11 ->
                 Types.$w$c==1 ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
75addb716e493a16074269a20e29c6f5
  $fEqClientState_$c==1 ::
    Types.TurnState -> Types.TurnState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.TurnState) (ds1 :: Types.TurnState) ->
                 case ds of wild {
                   Types.PutCardTurn a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PutCardTurn b1
                        -> case a1 of wild2 {
                             GHC.Maybe.Nothing
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.True
                                  GHC.Maybe.Just ipv -> GHC.Types.False }
                             GHC.Maybe.Just a2
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.False
                                  GHC.Maybe.Just b2 -> Types.$fEqCard_$c== a2 b2 } } }
                   Types.EmptyState
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.EmptyState -> GHC.Types.True }
                   Types.GameFinished a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.GameFinished b1 -> Types.$fEqStateChanges_$c==1 a1 b1 } }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fEqCombo :: GHC.Classes.Eq Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo Types.$fEqCombo_$c== Types.$fEqCombo_$c/= -}
7a578f69626ef655b98f1cbac3ae71ad
  $fEqCombo_$c/= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fEqCombo_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fEqCombo_$c== :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Combo) (ds1 :: Types.Combo) ->
                 case ds of wild {
                   Types.Host a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Host b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Skirmish a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Skirmish b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Batallion a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Batallion b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Phalanx a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Phalanx b1 -> GHC.Classes.eqInt a1 b1 }
                   Types.Wedge a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Wedge b1 -> GHC.Classes.eqInt a1 b1 } }) -}
5cb96aac309a684ee212dd5fdbb25930
  $fEqCommand :: GHC.Classes.Eq Types.Command
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command Types.$fEqCommand_$c== Types.$fEqCommand_$c/= -}
5cb96aac309a684ee212dd5fdbb25930
  $fEqCommand_$c/= ::
    Types.Command -> Types.Command -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Command) (y :: Types.Command) ->
                 case x of wild {
                   Types.Put
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Put -> GHC.Types.False }
                   Types.Take a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.Take b1
                        -> case Types.$fEqCard_$c== a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Types.Win a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.Win b1
                        -> case a1 of wild2 {
                             Types.One
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                             Types.Two
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } } }
                   Types.EmptyCommand
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.EmptyCommand -> GHC.Types.False } }) -}
5cb96aac309a684ee212dd5fdbb25930
  $fEqCommand_$c== ::
    Types.Command -> Types.Command -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Command) (ds1 :: Types.Command) ->
                 case ds of wild {
                   Types.Put
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Put -> GHC.Types.True }
                   Types.Take a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Take b1 -> Types.$fEqCard_$c== a1 b1 }
                   Types.Win a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Win b1 -> Types.$fEqStateChanges_$c==1 a1 b1 }
                   Types.EmptyCommand
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.EmptyCommand -> GHC.Types.True } }) -}
02d0b769e45d511e621211e0ee648c51
  $fEqField :: GHC.Classes.Eq Types.Field
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Field Types.$fEqField_$c== Types.$fEqField_$c/= -}
3250b0de31069931509c82f9abf291a6
  $fEqFieldState :: GHC.Classes.Eq Types.FieldState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.FieldState
                  Types.$fEqField_$c==1
                  Types.$fEqFieldState_$c/= -}
3250b0de31069931509c82f9abf291a6
  $fEqFieldState_$c/= ::
    Types.FieldState -> Types.FieldState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.FieldState) (y :: Types.FieldState) ->
                 case x of wild {
                   Types.Closed a1
                   -> case y of wild1 {
                        Types.Closed b1
                        -> case a1 of wild2 {
                             Types.One
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                             Types.Two
                             -> case b1 of wild3 {
                                  Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } }
                        Types.Open -> GHC.Types.True }
                   Types.Open
                   -> case y of wild1 {
                        Types.Closed ipv -> GHC.Types.True
                        Types.Open -> GHC.Types.False } }) -}
02d0b769e45d511e621211e0ee648c51
  $fEqField_$c/= :: Types.Field -> Types.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Field) (y :: Types.Field) ->
                 case Types.$fEqField_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
02d0b769e45d511e621211e0ee648c51
  $fEqField_$c== :: Types.Field -> Types.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Field) (w1 :: Types.Field) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Field ww5 ww6 ww7 ->
                 Types.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
3250b0de31069931509c82f9abf291a6
  $fEqField_$c==1 ::
    Types.FieldState -> Types.FieldState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.FieldState) (ds1 :: Types.FieldState) ->
                 case ds of wild {
                   Types.Closed a1
                   -> case ds1 of wild1 {
                        Types.Closed b1 -> Types.$fEqStateChanges_$c==1 a1 b1
                        Types.Open -> GHC.Types.False }
                   Types.Open
                   -> case ds1 of wild1 {
                        Types.Closed ipv -> GHC.Types.False
                        Types.Open -> GHC.Types.True } }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fEqPlayer :: GHC.Classes.Eq Types.Player
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fEqStateChanges_$c==1
                  Types.$fEqPlayer_$c/= -}
31ba73326e5209545eb7e8d451ba07b2
  $fEqPlayer_$c/= :: Types.Player -> Types.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Player) (y :: Types.Player) ->
                 case x of wild {
                   Types.One
                   -> case y of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> GHC.Types.True }
                   Types.Two
                   -> case y of wild1 {
                        Types.One -> GHC.Types.True Types.Two -> GHC.Types.False } }) -}
ee17e162b8535913eb100e5543bca10b
  $fEqStateChanges :: GHC.Classes.Eq Types.StateChanges
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fEqStateChanges_$c==
                  Types.$fEqStateChanges_$c/= -}
ee17e162b8535913eb100e5543bca10b
  $fEqStateChanges_$c/= ::
    Types.StateChanges -> Types.StateChanges -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.StateChanges) (y :: Types.StateChanges) ->
                 case Types.$fEqStateChanges_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ee17e162b8535913eb100e5543bca10b
  $fEqStateChanges_$c== ::
    Types.StateChanges -> Types.StateChanges -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.StateChanges)
                   (ds1 :: Types.StateChanges) ->
                 case ds of wild {
                   Types.NewCard a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.NewCard b1 b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a2 of wild4 {
                                  Types.One
                                  -> case b2 of wild5 {
                                       Types.One -> Types.$fEqCard_$c== a3 b3
                                       Types.Two -> GHC.Types.False }
                                  Types.Two
                                  -> case b2 of wild5 {
                                       Types.One -> GHC.Types.False
                                       Types.Two -> Types.$fEqCard_$c== a3 b3 } } } } } }
                   Types.FieldClosed a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FieldClosed b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1# -> Types.$fEqStateChanges_$c==1 a2 b2 } } } }
                   Types.Winner a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Winner b1 -> Types.$fEqStateChanges_$c==1 a1 b1 } }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fEqStateChanges_$c==1 ::
    Types.Player -> Types.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Player) (ds1 :: Types.Player) ->
                 case ds of wild {
                   Types.One
                   -> case ds1 of wild1 {
                        Types.One -> GHC.Types.True Types.Two -> GHC.Types.False }
                   Types.Two
                   -> case ds1 of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> GHC.Types.True } }) -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fEqSuit :: GHC.Classes.Eq Types.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Suit Types.$fEqSuit_$c== Types.$fEqSuit_$c/= -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fEqSuit_$c/= :: Types.Suit -> Types.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Suit) (y :: Types.Suit) ->
                 case x of wild {
                   Types.Red
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Red -> GHC.Types.False }
                   Types.Blue
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Blue -> GHC.Types.False }
                   Types.Yellow
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Yellow -> GHC.Types.False }
                   Types.Green
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Green -> GHC.Types.False }
                   Types.White
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.White -> GHC.Types.False }
                   Types.Black
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Types.Black -> GHC.Types.False } }) -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fEqSuit_$c== :: Types.Suit -> Types.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Suit) (ds1 :: Types.Suit) ->
                 case ds of wild {
                   Types.Red
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Red -> GHC.Types.True }
                   Types.Blue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Blue -> GHC.Types.True }
                   Types.Yellow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Yellow -> GHC.Types.True }
                   Types.Green
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Green -> GHC.Types.True }
                   Types.White
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.White -> GHC.Types.True }
                   Types.Black
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Black -> GHC.Types.True } }) -}
3cea272f3448558818f3330a2bef7932
  $fEqTurn :: GHC.Classes.Eq Types.Turn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn Types.$fEqTurn_$c== Types.$fEqTurn_$c/= -}
75addb716e493a16074269a20e29c6f5
  $fEqTurnState :: GHC.Classes.Eq Types.TurnState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.TurnState
                  Types.$fEqClientState_$c==1
                  Types.$fEqTurnState_$c/= -}
75addb716e493a16074269a20e29c6f5
  $fEqTurnState_$c/= ::
    Types.TurnState -> Types.TurnState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.TurnState) (y :: Types.TurnState) ->
                 case Types.$fEqClientState_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3cea272f3448558818f3330a2bef7932
  $fEqTurn_$c/= :: Types.Turn -> Types.Turn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.Turn) (y :: Types.Turn) ->
                 case Types.$fEqTurn_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3cea272f3448558818f3330a2bef7932
  $fEqTurn_$c== :: Types.Turn -> Types.Turn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Turn) (ds1 :: Types.Turn) ->
                 case ds of wild {
                   Types.PutCard a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PutCard b1 b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a2 of wild4 {
                                  Types.One
                                  -> case b2 of wild5 {
                                       Types.One -> Types.$fEqCard_$c== a3 b3
                                       Types.Two -> GHC.Types.False }
                                  Types.Two
                                  -> case b2 of wild5 {
                                       Types.One -> GHC.Types.False
                                       Types.Two -> Types.$fEqCard_$c== a3 b3 } } } } } }
                   Types.FinishTurn
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.FinishTurn -> GHC.Types.True }
                   Types.TakeCard a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.TakeCard b1 -> Types.$fEqCard_$c== a1 b1 } }) -}
b44e6caa2182449d4423675a70b44ba3
  $fEqWorld :: GHC.Classes.Eq Types.World
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.World Types.$fEqWorld_$c== Types.$fEqWorld_$c/= -}
b44e6caa2182449d4423675a70b44ba3
  $fEqWorld_$c/= :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.World) (y :: Types.World) ->
                 case Types.$fEqWorld_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b44e6caa2182449d4423675a70b44ba3
  $fEqWorld_$c== :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.World) (w1 :: Types.World) ->
                 case w of ww { Types.World ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.World ww5 ww6 ww7 ->
                 Types.$w$c==3 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo :: GHC.Classes.Ord Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo
                  Types.$fEqCombo
                  Types.$fOrdCombo_$ccompare
                  Types.$fOrdCombo_$c<
                  Types.$fOrdCombo_$c<=
                  Types.$fOrdCombo_$c>
                  Types.$fOrdCombo_$c>=
                  Types.$fOrdCombo_$cmax
                  Types.$fOrdCombo_$cmin -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$c< :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$c<= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$c> :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$c>= :: Types.Combo -> Types.Combo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$ccompare ::
    Types.Combo -> Types.Combo -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Combo) (b :: Types.Combo) ->
                 case a of wild {
                   Types.Host a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Types.Host b1 -> GHC.Classes.compareInt a1 b1 }
                   Types.Skirmish a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Types.Host ds -> GHC.Types.GT
                        Types.Skirmish b1 -> GHC.Classes.compareInt a1 b1 }
                   Types.Batallion a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Batallion ds -> GHC.Classes.compareInt a1 ds
                        Types.Phalanx ds -> GHC.Types.LT
                        Types.Wedge ds -> GHC.Types.LT }
                   Types.Phalanx a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Phalanx b1 -> GHC.Classes.compareInt a1 b1
                        Types.Wedge ds -> GHC.Types.LT }
                   Types.Wedge a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.Wedge b1 -> GHC.Classes.compareInt a1 b1 } }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$cmax :: Types.Combo -> Types.Combo -> Types.Combo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fOrdCombo_$cmin :: Types.Combo -> Types.Combo -> Types.Combo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Combo) (y :: Types.Combo) ->
                 case Types.$fOrdCombo_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fShowCard :: GHC.Show.Show Types.Card
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Card
                  Types.$fShowCard_$cshowsPrec
                  Types.$fShowCard_$cshow
                  Types.$fShowCard_$cshowList -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fShowCard1 :: Types.Card -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U))><L,U>,
     Unfolding: (\ (w :: Types.Card) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Card ww1 ww2 ->
                 Types.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
d57c0311ee7943312714dee39dbe4278
  $fShowCard10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard11) -}
d0508b25d5cedceba890245e47eed1ad
  $fShowCard11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Blue"#) -}
ae2aba9be53f5db3665dee3e5fc80fa2
  $fShowCard12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard13) -}
2df1341a86427e9fb56e98e3d5715f17
  $fShowCard13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Red"#) -}
ff37b0a7f8ffd1f475e0cc0c42a782c3
  $fShowCard14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Card "#) -}
a45ec2ab8ccef3d10d26f82f48a990d5
  $fShowCard2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard3) -}
f986d363965fbd53dccb6e8f579d92dc
  $fShowCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Black"#) -}
26f072221a74d0e8d1fa0d51bdf28c5b
  $fShowCard4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard5) -}
1095f1f9815b78fd9285ebc46f44b0be
  $fShowCard5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("White"#) -}
cde88c75faba61192e21c94a6b99183a
  $fShowCard6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard7) -}
3c527363ab957a4e08edd5763772f428
  $fShowCard7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Green"#) -}
8414fae67568a82343680d4a59e70345
  $fShowCard8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCard9) -}
ae2b4c39aedb3be9934c7271d0a36632
  $fShowCard9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Yellow"#) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fShowCard_$cshow :: Types.Card -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Card) ->
                 case w of ww { Types.Card ww1 ww2 -> Types.$w$cshow ww1 ww2 }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fShowCard_$cshowList :: [Types.Card] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Card]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Card Types.$fShowCard1 ls s) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $fShowCard_$cshowsPrec ::
    GHC.Types.Int -> Types.Card -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Card)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Card ww3 ww4 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fShowChanges :: GHC.Show.Show Types.Changes
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Changes
                  Types.$fShowChanges_$cshowsPrec
                  Types.$fShowChanges_$cshow
                  Types.$fShowChanges_$cshowList -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fShowChanges1 :: Types.Changes -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Types.Changes) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Changes ww1 ->
                 Types.$w$cshowsPrec2 0# ww1 w1 }) -}
9355f2d4f3460703c4d908f3e59e3b4c
  $fShowChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Changes "#) -}
5e5492294ddb2b6895c9647c69efa302
  $fShowChanges3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fShowChanges_$cshow :: Types.Changes -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Changes) ->
                 Types.$fShowChanges_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fShowChanges_$cshowList :: [Types.Changes] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Changes]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Changes Types.$fShowChanges1 ls s) -}
c8cdec4f81461579f3a3dca017dd8d3a
  $fShowChanges_$cshowsPrec ::
    GHC.Types.Int -> Types.Changes -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Changes)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Changes ww3 ->
                 Types.$w$cshowsPrec2 ww1 ww3 w2 } }) -}
92a56bc449287a32dfbff349ccb8abf5
  $fShowClientState :: GHC.Show.Show Types.ClientState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.ClientState
                  Types.$fShowClientState_$cshowsPrec2
                  Types.$fShowClientState_$cshow
                  Types.$fShowClientState_$cshowList -}
92a56bc449287a32dfbff349ccb8abf5
  $fShowClientState1 :: Types.ClientState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Unfolding: (\ (w :: Types.ClientState) ->
                 case w of ww { Types.ClientState ww1 ww2 ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 ww5 }) -}
99f165eb6083cbeb2ea5fd1ea500d9fb
  $fShowClientState10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field "#) -}
8aed76a5d92dfbfc45eaed5364295dcf
  $fShowClientState11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
cb02d7dcfe52f78e744b1100e0aa0134
  $fShowClientState12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState13) -}
00d97b08b9fe00125dd66eb4f450650f
  $fShowClientState13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Open"#) -}
9ba305b9f3cad6a2e50cbc872240c80c
  $fShowClientState14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState15) -}
92e94afd1ff180d765eab6ec8b2d90af
  $fShowClientState15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Closed "#) -}
4b7c4ed40062f9b3bb4704f7d3c2c4c5
  $fShowClientState16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState17) -}
b7c87d6f96759921d18ec21767b25e12
  $fShowClientState17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameFinished "#) -}
20694e183402da88e30a9bd30080a163
  $fShowClientState18 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState19) -}
8a303dfa154cf0d9d46ff4e3067e19a1
  $fShowClientState19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState20) -}
85cab47fce526e639c8200dbf814e287
  $fShowClientState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState3) -}
7e353e14770a81ca32913d290cb6942e
  $fShowClientState20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyState"#) -}
5a44a1da8caabba6a5331994217d2e95
  $fShowClientState21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState22) -}
96d1352d30b2b82ee90c45303ff65eea
  $fShowClientState22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PutCardTurn "#) -}
3d2e61cfb33afec9a991f8bcd267c787
  $fShowClientState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ClientState "#) -}
000b6e082c497ca56e0044d44ef75368
  $fShowClientState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState5) -}
0d742f98272dab3bd8c35f25ebd63bde
  $fShowClientState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
5bab0c790af45d87475f32f1896a88c3
  $fShowClientState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState7) -}
7a24c498b18ed45c3d56d9f47f1c91bc
  $fShowClientState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("One"#) -}
02d0b769e45d511e621211e0ee648c51
  $fShowClientState8 :: Types.Field -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Types.Field) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Field ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec5 0# ww1 ww2 ww3 w1 }) -}
a226c92933d3f6762117cd5b0d231edd
  $fShowClientState9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Types.$fShowClientState10) -}
92a56bc449287a32dfbff349ccb8abf5
  $fShowClientState_$cshow :: Types.ClientState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.ClientState) ->
                 Types.$fShowClientState_$cshowsPrec2
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
92a56bc449287a32dfbff349ccb8abf5
  $fShowClientState_$cshowList ::
    [Types.ClientState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.ClientState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.ClientState
                   Types.$fShowClientState1
                   ls
                   s) -}
3250b0de31069931509c82f9abf291a6
  $fShowClientState_$cshowsPrec ::
    GHC.Types.Int -> Types.FieldState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.FieldState)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.Closed b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowClientState14
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 eta
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState14
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) })) } }
                   Types.Open
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState12 eta }) -}
75addb716e493a16074269a20e29c6f5
  $fShowClientState_$cshowsPrec1 ::
    GHC.Types.Int -> Types.TurnState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Types.TurnState) ->
                 case ds of wild {
                   Types.PutCardTurn b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Types.Card
                            Types.$fShowCard
                            Types.$fShowClientState11
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState21 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState21
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Types.EmptyState -> Types.$fShowClientState18
                   Types.GameFinished b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowClientState16
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 x1
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 x1 })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowClientState16
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x1) })) } } }) -}
92a56bc449287a32dfbff349ccb8abf5
  $fShowClientState_$cshowsPrec2 ::
    GHC.Types.Int -> Types.ClientState -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U(U(U),A,A,A,A),U,U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.ClientState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.ClientState ww3 ww4 ww5 ww6 ww7 ->
                 Types.$w$cshowsPrec4 ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fShowCombo :: GHC.Show.Show Types.Combo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Combo
                  Types.$fShowCombo_$cshowsPrec
                  Types.$fShowCombo_$cshow
                  Types.$fShowCombo_$cshowList -}
7a578f69626ef655b98f1cbac3ae71ad
  $fShowCombo1 :: Types.Combo -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Types.Combo) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec6 0# w w1) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fShowCombo_$cshow :: Types.Combo -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Combo) ->
                 Types.$fShowCombo_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fShowCombo_$cshowList :: [Types.Combo] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Combo]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Combo Types.$fShowCombo1 ls s) -}
7a578f69626ef655b98f1cbac3ae71ad
  $fShowCombo_$cshowsPrec ::
    GHC.Types.Int -> Types.Combo -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Combo)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec6 ww1 w1 w2 }) -}
5cb96aac309a684ee212dd5fdbb25930
  $fShowCommand :: GHC.Show.Show Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Command
                  Types.$fShowCommand_$cshowsPrec
                  Types.$fShowCommand_$cshow
                  Types.$fShowCommand_$cshowList -}
5cb96aac309a684ee212dd5fdbb25930
  $fShowCommand1 :: Types.Command -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowCommand_$cshowsPrec
                   Types.$fShowChanges3) -}
4b76d617d0daa14995a24b3fcb240087
  $fShowCommand10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4a0dd96f37588b5d19688a8f759d639e
  $fShowCommand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand3) -}
ce25c259978e22260959fe4857de161e
  $fShowCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyCommand"#) -}
c70bce3386123e5ef605d479ef22c057
  $fShowCommand4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand5) -}
faa174ce12ecfca19bd1d2c22ade19b5
  $fShowCommand5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Win "#) -}
9e2078870325365dc3fdc9f8ed9bc0f5
  $fShowCommand6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand7) -}
77116af64cb108ed1ca7c8f39a9e5731
  $fShowCommand7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Take "#) -}
00eb0394e9ffdcadec8ff8cf88e70d7e
  $fShowCommand8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowCommand9) -}
8a57124fb6e1d5d29baa9ba6d85c4ef4
  $fShowCommand9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Put"#) -}
5cb96aac309a684ee212dd5fdbb25930
  $fShowCommand_$cshow :: Types.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.Command) ->
                 case x of wild {
                   Types.Put -> Types.$fShowCommand8
                   Types.Take b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCommand6
                        (case b1 of wild1 { Types.Card b2 b3 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.CString.unpackAppendCString#
                              Types.$fShowCard14
                              (Types.$w$cshowsPrec1
                                 b2
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (case b3 of ww2 { GHC.Types.I# ww3 ->
                                     case GHC.Show.$wshowSignedInt
                                            11#
                                            ww3
                                            Types.$fShowCommand10 of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))) })
                   Types.Win b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCommand4
                        (case b1 of wild1 {
                           Types.One -> Types.$fShowClientState6
                           Types.Two -> Types.$fShowClientState4 })
                   Types.EmptyCommand -> Types.$fShowCommand2 }) -}
5cb96aac309a684ee212dd5fdbb25930
  $fShowCommand_$cshowList :: [Types.Command] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Command]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Command Types.$fShowCommand1 ls s) -}
5cb96aac309a684ee212dd5fdbb25930
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int -> Types.Command -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Command)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.Put -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCommand8 eta
                   Types.Take b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCommand6
                             (case b1 of ww { Types.Card ww1 ww2 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCommand6
                                (case b1 of ww { Types.Card ww1 ww2 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta) })) } }
                   Types.Win b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCommand4
                             (case b1 of wild2 {
                                Types.One
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState6 eta
                                Types.Two
                                -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState4 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCommand4
                                (case b1 of wild2 {
                                   Types.One
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState6
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                   Types.Two
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Types.$fShowClientState4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) })) } }
                   Types.EmptyCommand
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCommand2 eta }) -}
02d0b769e45d511e621211e0ee648c51
  $fShowField :: GHC.Show.Show Types.Field
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Field
                  Types.$fShowField_$cshowsPrec
                  Types.$fShowField_$cshow
                  Types.$fShowField_$cshowList -}
3250b0de31069931509c82f9abf291a6
  $fShowFieldState :: GHC.Show.Show Types.FieldState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.FieldState
                  Types.$fShowClientState_$cshowsPrec
                  Types.$fShowFieldState_$cshow
                  Types.$fShowFieldState_$cshowList -}
3250b0de31069931509c82f9abf291a6
  $fShowFieldState1 :: Types.FieldState -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowClientState_$cshowsPrec
                   Types.$fShowChanges3) -}
3250b0de31069931509c82f9abf291a6
  $fShowFieldState_$cshow :: Types.FieldState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.FieldState) ->
                 Types.$fShowClientState_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3250b0de31069931509c82f9abf291a6
  $fShowFieldState_$cshowList :: [Types.FieldState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.FieldState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.FieldState
                   Types.$fShowFieldState1
                   ls
                   s) -}
02d0b769e45d511e621211e0ee648c51
  $fShowField_$cshow :: Types.Field -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Field) ->
                 Types.$fShowField_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
02d0b769e45d511e621211e0ee648c51
  $fShowField_$cshowList :: [Types.Field] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Field]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Field Types.$fShowClientState8 ls s) -}
02d0b769e45d511e621211e0ee648c51
  $fShowField_$cshowsPrec ::
    GHC.Types.Int -> Types.Field -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Field)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Field ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec5 ww1 ww3 ww4 ww5 w2 } }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fShowPlayer :: GHC.Show.Show Types.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Player
                  Types.$fShowPlayer_$cshowsPrec
                  Types.$fShowPlayer_$cshow
                  Types.$fShowPlayer_$cshowList -}
31ba73326e5209545eb7e8d451ba07b2
  $fShowPlayer1 :: Types.Player -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.Player) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState6)
                        eta
                   Types.Two
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState4)
                        eta }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fShowPlayer_$cshow :: Types.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Player) ->
                 case x of wild {
                   Types.One -> Types.$fShowClientState6
                   Types.Two -> Types.$fShowClientState4 }) -}
31ba73326e5209545eb7e8d451ba07b2
  $fShowPlayer_$cshowList :: [Types.Player] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Player]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Player Types.$fShowPlayer1 ls s) -}
31ba73326e5209545eb7e8d451ba07b2
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Types.Player -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Player)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState6)
                        eta
                   Types.Two
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowClientState4)
                        eta }) -}
ee17e162b8535913eb100e5543bca10b
  $fShowStateChanges :: GHC.Show.Show Types.StateChanges
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.StateChanges
                  Types.$fShowStateChanges_$cshowsPrec
                  Types.$fShowStateChanges_$cshow
                  Types.$fShowStateChanges_$cshowList -}
ee17e162b8535913eb100e5543bca10b
  $fShowStateChanges1 :: Types.StateChanges -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Types.StateChanges) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec3 0# w w1) -}
ee17e162b8535913eb100e5543bca10b
  $fShowStateChanges_$cshow :: Types.StateChanges -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.StateChanges) ->
                 Types.$fShowStateChanges_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ee17e162b8535913eb100e5543bca10b
  $fShowStateChanges_$cshowList ::
    [Types.StateChanges] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.StateChanges]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.StateChanges
                   Types.$fShowStateChanges1
                   ls
                   s) -}
ee17e162b8535913eb100e5543bca10b
  $fShowStateChanges_$cshowsPrec ::
    GHC.Types.Int -> Types.StateChanges -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.StateChanges)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 w2 }) -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fShowSuit :: GHC.Show.Show Types.Suit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Suit
                  Types.$fShowSuit_$cshowsPrec
                  Types.$fShowSuit_$cshow
                  Types.$fShowSuit_$cshowList -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fShowSuit_$cshow :: Types.Suit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Suit) ->
                 case x of wild {
                   Types.Red -> Types.$fShowCard12
                   Types.Blue -> Types.$fShowCard10
                   Types.Yellow -> Types.$fShowCard8
                   Types.Green -> Types.$fShowCard6
                   Types.White -> Types.$fShowCard4
                   Types.Black -> Types.$fShowCard2 }) -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fShowSuit_$cshowList :: [Types.Suit] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Suit]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Suit Types.$w$cshowsPrec1 ls s) -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $fShowSuit_$cshowsPrec ::
    GHC.Types.Int -> Types.Suit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Suit)
                   (w2 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec1 w1 w2) -}
3cea272f3448558818f3330a2bef7932
  $fShowTurn :: GHC.Show.Show Types.Turn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.Turn
                  Types.$fShowTurn_$cshowsPrec
                  Types.$fShowTurn_$cshow
                  Types.$fShowTurn_$cshowList -}
3cea272f3448558818f3330a2bef7932
  $fShowTurn1 :: Types.Turn -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowTurn_$cshowsPrec Types.$fShowChanges3) -}
ef305203bfb2394533be1f405219827f
  $fShowTurn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn3) -}
501b70cae1f23555276aa3a9bda68036
  $fShowTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TakeCard "#) -}
c7330885f2839c4a6461dd725ccb6da0
  $fShowTurn4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn5) -}
8531aad901a078b12c2c43c09b66f44b
  $fShowTurn5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FinishTurn"#) -}
7b91791cf23aac4e2b1c1cbcecb8b0d0
  $fShowTurn6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowTurn7) -}
6b88307f07d59b3576e8ca6604e11e3b
  $fShowTurn7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PutCard "#) -}
75addb716e493a16074269a20e29c6f5
  $fShowTurnState :: GHC.Show.Show Types.TurnState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.TurnState
                  Types.$fShowClientState_$cshowsPrec1
                  Types.$fShowTurnState_$cshow
                  Types.$fShowTurnState_$cshowList -}
75addb716e493a16074269a20e29c6f5
  $fShowTurnState1 :: Types.TurnState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Types.$fShowClientState_$cshowsPrec1
                   Types.$fShowChanges3) -}
3edb1430fb8aba95fed5a2ef0b931375
  $fShowTurnState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1b99f9c82e57acf96beacd4060e663dc
  $fShowTurnState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
13d3e955cefefcad4e51578850a18a0f
  $fShowTurnState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowClientState19
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8c73d9dbf5fd8dbf6fda67e09a8e9d93
  $fShowTurnState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
75addb716e493a16074269a20e29c6f5
  $fShowTurnState_$cshow :: Types.TurnState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.TurnState) ->
                 case x of wild {
                   Types.PutCardTurn b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowClientState21
                        (case b1 of wild1 {
                           GHC.Maybe.Nothing -> Types.$fShowTurnState5
                           GHC.Maybe.Just b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowMaybe1
                                   (case b2 of ww { Types.Card ww1 ww2 ->
                                    Types.$w$cshowsPrec 11# ww1 ww2 Types.$fShowCommand10 })) })
                   Types.EmptyState -> Types.$fShowTurnState4
                   Types.GameFinished b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowClientState16
                        (case b1 of wild1 {
                           Types.One -> Types.$fShowTurnState3
                           Types.Two -> Types.$fShowTurnState2 }) }) -}
75addb716e493a16074269a20e29c6f5
  $fShowTurnState_$cshowList :: [Types.TurnState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.TurnState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Types.TurnState
                   Types.$fShowTurnState1
                   ls
                   s) -}
3cea272f3448558818f3330a2bef7932
  $fShowTurn_$cshow :: Types.Turn -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Turn) ->
                 Types.$fShowTurn_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3cea272f3448558818f3330a2bef7932
  $fShowTurn_$cshowList :: [Types.Turn] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.Turn]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Turn Types.$fShowTurn1 ls s) -}
3cea272f3448558818f3330a2bef7932
  $fShowTurn_$cshowsPrec ::
    GHC.Types.Int -> Types.Turn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.Turn)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.PutCard b1 b2 b3
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          case b1 of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 11#
                                 ww3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (case b2 of wild2 {
                                       Types.One
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowClientState6
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (case b3 of ww { Types.Card ww1 ww5 ->
                                                Types.$w$cshowsPrec 11# ww1 ww5 x1 }))
                                       Types.Two
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowClientState4
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (case b3 of ww { Types.Card ww1 ww5 ->
                                                Types.$w$cshowsPrec
                                                  11#
                                                  ww1
                                                  ww5
                                                  x1 })) })) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTurn6 (g eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTurn6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta))) } }
                   Types.FinishTurn
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTurn4 eta
                   Types.TakeCard b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowTurn2
                             (case b1 of ww { Types.Card ww1 ww2 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTurn2
                                (case b1 of ww { Types.Card ww1 ww2 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta) })) } } }) -}
b44e6caa2182449d4423675a70b44ba3
  $fShowWorld :: GHC.Show.Show Types.World
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Types.World
                  Types.$fShowWorld_$cshowsPrec
                  Types.$fShowWorld_$cshow
                  Types.$fShowWorld_$cshowList -}
b44e6caa2182449d4423675a70b44ba3
  $fShowWorld1 :: Types.World -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Types.World) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.World ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec7 0# ww1 ww2 ww3 w1 }) -}
4de649478f9e31c89bc5cdd08178bd28
  $fShowWorld2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Types.$fShowWorld3) -}
055aaef27dab52f2edb20f777426b122
  $fShowWorld3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World "#) -}
b44e6caa2182449d4423675a70b44ba3
  $fShowWorld_$cshow :: Types.World -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.World) ->
                 Types.$fShowWorld_$cshowsPrec
                   Types.$fShowChanges3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b44e6caa2182449d4423675a70b44ba3
  $fShowWorld_$cshowList :: [Types.World] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Types.World]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.World Types.$fShowWorld1 ls s) -}
b44e6caa2182449d4423675a70b44ba3
  $fShowWorld_$cshowsPrec ::
    GHC.Types.Int -> Types.World -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.World)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.World ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec7 ww1 ww3 ww4 ww5 w2 } }) -}
b4e5c50e51996e6661974f225d0f9733
  $tc'Batallion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15802556008114191421##
                   12819965191384511398##
                   Types.$trModule
                   Types.$tc'Batallion2
                   0#
                   Types.$tc'Batallion1) -}
68c430c09f016c1cf5fc1e1de2f89459
  $tc'Batallion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
799e15dbcb89e43647c68dfaba3275ac
  $tc'Batallion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Batallion3) -}
eefe7684a675d8617d4002c5db9aea83
  $tc'Batallion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Batallion"#) -}
ad734a306443d3cfcf232dfc2131b918
  $tc'Black :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18311958640475889343##
                   15191913112526472876##
                   Types.$trModule
                   Types.$tc'Black2
                   0#
                   Types.$tc'Black1) -}
6308afa3e85a481e0dada499b3e76c20
  $tc'Black1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
61b90cd48beb2ec42017a9d517b79a36
  $tc'Black2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Black3) -}
3dbdbc239c6ab0c9e50bb1e8c9ed2d47
  $tc'Black3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Black"#) -}
07cfa65c7fdc920b792c2e3aa57933ee
  $tc'Blue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2766712982132650366##
                   3562110795248810228##
                   Types.$trModule
                   Types.$tc'Blue1
                   0#
                   Types.$tc'Black1) -}
a529c8ea8d8ff72afa31441eeddabb30
  $tc'Blue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Blue2) -}
a2ea6a86db336ef64a2467e789ce8ff0
  $tc'Blue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Blue"#) -}
5432cb7baa4ba250f16650fc53506102
  $tc'Card :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11022002460829995431##
                   12200077863065754622##
                   Types.$trModule
                   Types.$tc'Card2
                   0#
                   Types.$tc'Card1) -}
7afd275f2908dff43bea00dbc4dd61aa
  $tc'Card1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
315efe9f65ccd28ddf9db2997334f56b
  $tc'Card2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Card3) -}
7a688b4feadf72b9115084ecfe7d32c5
  $tc'Card3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Card"#) -}
1a22c936365a17180d0faeac6fc01870
  $tc'Changes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   632530728759508530##
                   15348101672519156241##
                   Types.$trModule
                   Types.$tc'Changes2
                   0#
                   Types.$tc'Changes1) -}
5d8e27e1e926e0ecd72c5eafc1088535
  $tc'Changes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4d6f3db5839055daa4c053dfd8e67fdb
  $tc'Changes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Changes3) -}
f18c3f17f37c1a8b449ed3b21bfa5ddc
  $tc'Changes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Changes"#) -}
b334914197caea43f6afc60368ea011e
  $tc'ClientState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15346140949561839742##
                   4456550509048282740##
                   Types.$trModule
                   Types.$tc'ClientState2
                   0#
                   Types.$tc'ClientState1) -}
633c6ac0310b31a03ad543a63cef1a86
  $tc'ClientState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8166372c4ba86a38cf3c50b9c5abbd7c
  $tc'ClientState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'ClientState3) -}
33dc343d277de95923cf0a5a0985cc2f
  $tc'ClientState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClientState"#) -}
566df6ecf87e9e7b5c9ee1d140bff902
  $tc'Closed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8907352755371023362##
                   9675899043552771676##
                   Types.$trModule
                   Types.$tc'Closed2
                   0#
                   Types.$tc'Closed1) -}
4136e34f7c5f0c3146779c1580bdc771
  $tc'Closed1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
005028f2dad4f51b2b7ec599bf1c5189
  $tc'Closed2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Closed3) -}
3fddcc5ec21f2b54101b9237be7d7daa
  $tc'Closed3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Closed"#) -}
1b9cac45d5f768e8b73b4cd2a09d08c4
  $tc'EmptyCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18368575742580212191##
                   5956572427536901750##
                   Types.$trModule
                   Types.$tc'EmptyCommand2
                   0#
                   Types.$tc'EmptyCommand1) -}
76a2004ba70350cbb533962709f53eef
  $tc'EmptyCommand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1ce96a946955e94f63af6132775becfd
  $tc'EmptyCommand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'EmptyCommand3) -}
97ef0fb43f6ad8d1da1edb5d65046f6d
  $tc'EmptyCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyCommand"#) -}
d81353fe76f7802c29ea8ad3c2f223fb
  $tc'EmptyState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9091188835081862414##
                   2188196358274950052##
                   Types.$trModule
                   Types.$tc'EmptyState2
                   0#
                   Types.$tc'EmptyState1) -}
8755923036dfaaff46e8cd27be72671f
  $tc'EmptyState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
bf7ecc9b3791e8decc644b762a70dacb
  $tc'EmptyState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'EmptyState3) -}
e0af44c0fd85dada32999a6f20d30055
  $tc'EmptyState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyState"#) -}
dd3a34e48387d712a6ea33e396ef1c24
  $tc'Field :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4132799727601081430##
                   10891062523116231243##
                   Types.$trModule
                   Types.$tc'Field2
                   0#
                   Types.$tc'Field1) -}
70095a395bee907bf65aa7e946e4c193
  $tc'Field1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a911f5c62a270d41c1bf955818f55610
  $tc'Field2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Field3) -}
a9a61208bdb042e6660eb9a8f988b33c
  $tc'Field3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Field"#) -}
8b800cbf6ddbb37f74bc14c295a91e43
  $tc'FieldClosed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3039269943693905669##
                   1113441398735361837##
                   Types.$trModule
                   Types.$tc'FieldClosed2
                   0#
                   Types.$tc'FieldClosed1) -}
fccea2719527e6e53b62e24556ad9055
  $tc'FieldClosed1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
96ec764e2dcb2fe9bead6a200428cc57
  $tc'FieldClosed2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'FieldClosed3) -}
5fba977d2a0cf2ea00e46d5ad0c7f71a
  $tc'FieldClosed3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FieldClosed"#) -}
9727db27beaa8462e0c4370cd6e0a793
  $tc'FinishTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6415180134793096547##
                   9155347429600430466##
                   Types.$trModule
                   Types.$tc'FinishTurn2
                   0#
                   Types.$tc'FinishTurn1) -}
b04bd0972f0a6814a368bd1420abd3fa
  $tc'FinishTurn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1d566cf7b80b7792f78a7da3ca166d8c
  $tc'FinishTurn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'FinishTurn3) -}
8ae4300a5ad5a451a1e3f3044905295b
  $tc'FinishTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FinishTurn"#) -}
fc4cc2f1ff1b693b756a9d079924237b
  $tc'GameFinished :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10778399650805070346##
                   840955088974560435##
                   Types.$trModule
                   Types.$tc'GameFinished2
                   0#
                   Types.$tc'GameFinished1) -}
ddb079114756d5fbac7d2c10868e2391
  $tc'GameFinished1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c7886c4d4516ee1fe569c188c3e495f9
  $tc'GameFinished2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'GameFinished3) -}
b1326ddcee8a91bc7155cd19cff377a1
  $tc'GameFinished3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameFinished"#) -}
a65266f2a5e2ccef74851733dc621248
  $tc'Green :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15095062859698858173##
                   4320668579219343101##
                   Types.$trModule
                   Types.$tc'Green1
                   0#
                   Types.$tc'Black1) -}
ab8b2f21abfe1fbe954d4780592c1d5d
  $tc'Green1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Green2) -}
1c285935c5424c1346c82e8acf9edffe
  $tc'Green2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Green"#) -}
ca526ed2a10a180ec16dc67c2e291a39
  $tc'Host :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5357333964943870175##
                   1978823469416755391##
                   Types.$trModule
                   Types.$tc'Host1
                   0#
                   Types.$tc'Batallion1) -}
67b312ec9a140fec6bb1fd02948dbba6
  $tc'Host1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Host2) -}
32483d81fe5c0106d6b435b220a9891f
  $tc'Host2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Host"#) -}
7fc3fbf26d58d818cd7c37b5e7706f48
  $tc'NewCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17661910072841831161##
                   5905426105930475682##
                   Types.$trModule
                   Types.$tc'NewCard2
                   0#
                   Types.$tc'NewCard1) -}
25cc2fa98db393803f1a872fa4027f8d
  $tc'NewCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7e9443f436d671fd50cdc0c74821875b
  $tc'NewCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'NewCard3) -}
4020bfdd4a42fd8555a187f0e9ccff5f
  $tc'NewCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewCard"#) -}
94ca0f2f9421e1842f0a9b112fe24446
  $tc'One :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5696516204425408854##
                   16406116945678945436##
                   Types.$trModule
                   Types.$tc'One2
                   0#
                   Types.$tc'One1) -}
6557a8de785fab2fe3246747d4abfc25
  $tc'One1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d95da8689d2326108e59c72c1d55b138
  $tc'One2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'One3) -}
a470c1078ea8018eb056053abc8e2451
  $tc'One3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'One"#) -}
323f32f3d56514d8d6189d820e402986
  $tc'Open :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1401455353730827022##
                   6861467886609004304##
                   Types.$trModule
                   Types.$tc'Open2
                   0#
                   Types.$tc'Open1) -}
697b4ae803981d6d3c955fdf14d46238
  $tc'Open1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
5d21a2ee662e7f98144775e9b7331922
  $tc'Open2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Open3) -}
15c641ae6b37d640a88af21e9423347c
  $tc'Open3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Open"#) -}
1fe1d1d12ba1c3c387349b5c7a8bfb4b
  $tc'Phalanx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16353271268141425918##
                   1301114649650038693##
                   Types.$trModule
                   Types.$tc'Phalanx1
                   0#
                   Types.$tc'Batallion1) -}
bed74ba8a89f4e7efa49764e12ebd6ba
  $tc'Phalanx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Phalanx2) -}
4855ef2ef82cd20ff54541fbe132ce40
  $tc'Phalanx2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Phalanx"#) -}
c2d7bbaf227fee934c2b0dce4308566f
  $tc'Put :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6235943662808794747##
                   16410896462382902186##
                   Types.$trModule
                   Types.$tc'Put1
                   0#
                   Types.$tc'EmptyCommand1) -}
c31c98d5aa5f5421b542de4a31908631
  $tc'Put1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Put2) -}
05fdd34506e0e85dd6bf3eb27bea898f
  $tc'Put2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Put"#) -}
e12bb81385bf3b3a3c6b30f4944f15b6
  $tc'PutCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8730401552588045164##
                   9576758287195952625##
                   Types.$trModule
                   Types.$tc'PutCard2
                   0#
                   Types.$tc'PutCard1) -}
b7c8ce54197ac3b73e95dbe6d50e7bf8
  $tc'PutCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
40c1f407e3c898fa02e7fb02581f8e9c
  $tc'PutCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'PutCard3) -}
cde689e995aba1cd9e574bdb9d1eea4a
  $tc'PutCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PutCard"#) -}
ddc8895a6f7b1b9658f9b3ac5fa21d3e
  $tc'PutCardTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12663298925433964115##
                   15963533448852390852##
                   Types.$trModule
                   Types.$tc'PutCardTurn2
                   0#
                   Types.$tc'PutCardTurn1) -}
18d097c44e2fc6938a388a1af9e55602
  $tc'PutCardTurn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
583fc28021ccc13be28db720085e064d
  $tc'PutCardTurn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'PutCardTurn3) -}
3ec158d4ff76f2af5e192394078a9aca
  $tc'PutCardTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PutCardTurn"#) -}
f39356823d5cfa7572a2707054dbbb13
  $tc'Red :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16968477947927947163##
                   728209829244933338##
                   Types.$trModule
                   Types.$tc'Red1
                   0#
                   Types.$tc'Black1) -}
58c446532f7f688e7f7e27a7da14fb7d
  $tc'Red1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Red2) -}
38cf50c16ae41423cfac779c50d1e77d
  $tc'Red2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Red"#) -}
d30224646857e396bc4a1ddd6a837070
  $tc'Skirmish :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13126488417826352989##
                   2735747449559615812##
                   Types.$trModule
                   Types.$tc'Skirmish1
                   0#
                   Types.$tc'Batallion1) -}
dda783d8a411a7745be63cd3025b7657
  $tc'Skirmish1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Skirmish2) -}
ed8fb5b9af11b36875331a0aeacb66dc
  $tc'Skirmish2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Skirmish"#) -}
78dc99176fe1e0ed2f82ba22543232c8
  $tc'Take :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5465951649401037988##
                   17520716515782152731##
                   Types.$trModule
                   Types.$tc'Take2
                   0#
                   Types.$tc'Take1) -}
7cc324d0cfc7deeb130b047778ba7096
  $tc'Take1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
182e3e1945b30513688704e883a2c310
  $tc'Take2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Take3) -}
db299c0aac59c29db098164fda263555
  $tc'Take3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Take"#) -}
fc74cd04363e36f061af88865589641b
  $tc'TakeCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3103300893916537285##
                   17288045879968580318##
                   Types.$trModule
                   Types.$tc'TakeCard2
                   0#
                   Types.$tc'TakeCard1) -}
0dc6511850cb66214479708eda13b8ef
  $tc'TakeCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8b27f026109188800b816099821d0b32
  $tc'TakeCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'TakeCard3) -}
be74e916fa1b02687def6b7500cd8d84
  $tc'TakeCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TakeCard"#) -}
7196444959aa9ec61d92ef8786816014
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11078754010348925739##
                   14199197103639070703##
                   Types.$trModule
                   Types.$tc'Two1
                   0#
                   Types.$tc'One1) -}
a45ec16b1c348cece2a05f065033f35f
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Two2) -}
0244204db4f28944f92535a28981bb33
  $tc'Two2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
9fb5217d7184c7a46b86c3fb2bf4993b
  $tc'Wedge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1636885488026590240##
                   7595009373744275747##
                   Types.$trModule
                   Types.$tc'Wedge1
                   0#
                   Types.$tc'Batallion1) -}
6b6f4c07c34e8dc5eb0de272ed2b79f9
  $tc'Wedge1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Wedge2) -}
bd8a4b0fbd4595acb95bcb887ff8c961
  $tc'Wedge2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Wedge"#) -}
8e56efeb6420720f13d4891b9424e7ba
  $tc'White :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14715379140285891811##
                   15550498728919488837##
                   Types.$trModule
                   Types.$tc'White1
                   0#
                   Types.$tc'Black1) -}
9a5115bb3f8b1eb5b44fd04592b5b3d0
  $tc'White1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'White2) -}
42a253ffa70d7093dc6c0266dc12b592
  $tc'White2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'White"#) -}
6b3b618a31323a73d463fbed6e6925ed
  $tc'Win :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12474307522025201686##
                   8302389970025883746##
                   Types.$trModule
                   Types.$tc'Win2
                   0#
                   Types.$tc'Win1) -}
3e3d52c1352cccd2d5196a832ee1a461
  $tc'Win1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b64d84277d894919e0a7beed20e13bd5
  $tc'Win2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Win3) -}
92f7378424e92a008babfb92bca9e13a
  $tc'Win3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Win"#) -}
a6c7c668b719c817270afe33c524a7d1
  $tc'Winner :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8098745243211053511##
                   17858480186225027949##
                   Types.$trModule
                   Types.$tc'Winner2
                   0#
                   Types.$tc'Winner1) -}
2f9b73f63fba2619a5351f6c87f8eafa
  $tc'Winner1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f37832e4c43fc5327ff1445e69f31bf7
  $tc'Winner2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Winner3) -}
371c6677075aacba1187855a51a701b8
  $tc'Winner3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Winner"#) -}
08d868f23efb2e69bb3207b4e3994c11
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   55378489404224145##
                   8734476901075739755##
                   Types.$trModule
                   Types.$tc'World2
                   0#
                   Types.$tc'World1) -}
30c2fcc9e5bd56550fdbfebff4979905
  $tc'World1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dffaf5a155babd5697c4a25aa3d16b48
  $tc'World2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'World3) -}
0794e3d200ca1b97a92cf022de78b802
  $tc'World3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'World"#) -}
ab80137f7f3127b3699983533ff76fbe
  $tc'Yellow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5319024757322762871##
                   16819976534571564766##
                   Types.$trModule
                   Types.$tc'Yellow1
                   0#
                   Types.$tc'Black1) -}
4b67356df039fbbbddc6628863d52e96
  $tc'Yellow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tc'Yellow2) -}
98d53148acfadf3bfc1f2cb297cc5a13
  $tc'Yellow2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Yellow"#) -}
25628dec3c391c51b20fbae25f5ecb71
  $tcCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11632574164437909549##
                   6103428982119370609##
                   Types.$trModule
                   Types.$tcCard1
                   0#
                   GHC.Types.krep$*) -}
129cf1130e9d194a6e8b2a085e95d164
  $tcCard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCard2) -}
147291928f90d16db07106ccc422cc1b
  $tcCard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Card"#) -}
4011c46fb4c2c7ce72a3ae34cfb20ef3
  $tcChanges :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17436915359890891932##
                   4618710844378177973##
                   Types.$trModule
                   Types.$tcChanges1
                   0#
                   GHC.Types.krep$*) -}
cb15ea59c530782e3f11851b0869df64
  $tcChanges1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcChanges2) -}
a876eaae0985a42f2d240f92a44323d0
  $tcChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Changes"#) -}
73d76e9d8684aaa2a31bfeead1c09a28
  $tcClientState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5252930550774028560##
                   1448853566378480501##
                   Types.$trModule
                   Types.$tcClientState1
                   0#
                   GHC.Types.krep$*) -}
d9abce07d59a7a1903d38ce1ef8b7c6a
  $tcClientState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcClientState2) -}
c215619b6a459efd12914c655de78b6a
  $tcClientState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ClientState"#) -}
c1b2a00f6d73756b208286175aa5957c
  $tcCombo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12550884097122421050##
                   15579025721621111864##
                   Types.$trModule
                   Types.$tcCombo1
                   0#
                   GHC.Types.krep$*) -}
d0efd1671cd035b9cc4dd6b5903aed5f
  $tcCombo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCombo2) -}
92509d9e1d3c9455c5171590b4a09ecc
  $tcCombo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Combo"#) -}
63239f9c78e15438c6fcc3696cf7e62d
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7875396023094127589##
                   9270405876552286604##
                   Types.$trModule
                   Types.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
a46316b58f81323f7c62c5daeaf01240
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcCommand2) -}
6714f8c757e7088d118222bf9217f75c
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
39593d93ea01e65c89026975fd53102e
  $tcField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10891828562373387553##
                   1036629282185129844##
                   Types.$trModule
                   Types.$tcField1
                   0#
                   GHC.Types.krep$*) -}
dc3445fded21199bac0491218576219e
  $tcField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcField2) -}
8cf98c41c3fb3008227a5fd909a92552
  $tcField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field"#) -}
548318094342790a86823888217e604d
  $tcFieldState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   843721597235570863##
                   2383596002492736678##
                   Types.$trModule
                   Types.$tcFieldState1
                   0#
                   GHC.Types.krep$*) -}
768352aa57b4203b565e508904f642b4
  $tcFieldState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcFieldState2) -}
4d647593650b60132378984fb3463590
  $tcFieldState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldState"#) -}
de7a33706df9ed3360bfa5776f67d004
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9898367040316776417##
                   11905657489195647198##
                   Types.$trModule
                   Types.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
7eb6cbbc1ca11d6cccd12f029456d77f
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcPlayer2) -}
f70d6d0e806d1bd7989f4e4a7787b268
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
0886d65eff71dd6f3140ac6d63e80e90
  $tcStateChanges :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4593741119900797005##
                   16194194218962118081##
                   Types.$trModule
                   Types.$tcStateChanges1
                   0#
                   GHC.Types.krep$*) -}
eee9ad8d268cb1a7e99d34ce332b4bd4
  $tcStateChanges1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcStateChanges2) -}
d4d1ba6d8fd743f4bcdda7a996395679
  $tcStateChanges2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StateChanges"#) -}
8394eb093f1b889bae91b368d07efb49
  $tcSuit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17063792005420138441##
                   8204491136230582706##
                   Types.$trModule
                   Types.$tcSuit1
                   0#
                   GHC.Types.krep$*) -}
76639c5dd8f2642636e9df6340dccd2a
  $tcSuit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcSuit2) -}
ec26cde824c17990ef6701ee2b563de9
  $tcSuit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Suit"#) -}
10448fac6faf1ee05d0483404080eb80
  $tcTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16628627432441915528##
                   8220337781902235957##
                   Types.$trModule
                   Types.$tcTurn1
                   0#
                   GHC.Types.krep$*) -}
70c482f6bf3faeeca95fa65ef5a69d41
  $tcTurn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcTurn2) -}
6c4121c818bb56799d6c46fd610e6155
  $tcTurn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Turn"#) -}
dd365b11101cc41057bf423a54347eeb
  $tcTurnState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13012178305070154133##
                   3942094502062154998##
                   Types.$trModule
                   Types.$tcTurnState1
                   0#
                   GHC.Types.krep$*) -}
efd8e98bc16ae7096bff70c213ba1a6d
  $tcTurnState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcTurnState2) -}
2b2798dc7b4546f47ed2ef49cd6fab4c
  $tcTurnState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TurnState"#) -}
dd155d7c69bcb317b896efb556ab2e61
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10707164662515265530##
                   12214787922521361153##
                   Types.$trModule
                   Types.$tcWorld1
                   0#
                   GHC.Types.krep$*) -}
2b6e51b52b5b92db6830657b6179e8a8
  $tcWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$tcWorld2) -}
a7186ce1e0054221e90e7a725724d264
  $tcWorld2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World"#) -}
f0b0c631977c06394b8fa5a6eac9a87d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule3 Types.$trModule1) -}
b8a341ba0daf480543041d8abd6e221d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$trModule2) -}
6041368dbbc5427415dfd0c007a9dc0b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Types"#) -}
0e8639ca5d59459d020870a9dcb25689
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Types.$trModule4) -}
e1b3e3d147beccf53766a0da95111e0d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
fa025d62f82cf6d3c2ee9101998ffef3
  $w$c== ::
    Types.Suit
    -> GHC.Types.Int -> Types.Suit -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: Types.Suit)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Types.Suit)
                   (ww3 :: GHC.Types.Int) ->
                 case ww of wild {
                   Types.Red
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Red -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Blue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Blue -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Yellow
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Yellow -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Green
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Green -> GHC.Classes.eqInt ww1 ww3 }
                   Types.White
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.White -> GHC.Classes.eqInt ww1 ww3 }
                   Types.Black
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Black -> GHC.Classes.eqInt ww1 ww3 } }) -}
8ff90241eb59e91761b222855e7ec851
  $w$c==1 ::
    Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: Types.Player)
                   (ww1 :: Network.Socket.Types.Socket)
                   (ww2 :: [Types.Field])
                   (ww3 :: [Types.Card])
                   (ww4 :: Types.TurnState)
                   (ww5 :: Types.Player)
                   (ww6 :: Network.Socket.Types.Socket)
                   (ww7 :: [Types.Field])
                   (ww8 :: [Types.Card])
                   (ww9 :: Types.TurnState) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = case ww1 of wild { Network.Socket.Types.MkSocket ds2 ds3 ds4 ds5 m1 ->
                     case ww6 of wild1 { Network.Socket.Types.MkSocket ds6 ds7 ds8 ds9 m2 ->
                     case m1 of wild2 { GHC.MVar.MVar mvar1# ->
                     case m2 of wild3 { GHC.MVar.MVar mvar2# ->
                     case GHC.Prim.sameMVar#
                            @ GHC.Prim.RealWorld
                            @ Network.Socket.Types.SocketStatus
                            mvar1#
                            mvar2# of lwild {
                       DEFAULT -> GHC.Types.False
                       1#
                       -> case GHC.Classes.$fEq[]_$c==
                                 @ Types.Field
                                 Types.$fEqField
                                 ww2
                                 ww7 of wild4 {
                            GHC.Types.False -> GHC.Types.False
                            GHC.Types.True
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ Types.Card
                                      Types.$fEqCard
                                      ww3
                                      ww8 of wild5 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True -> Types.$fEqClientState_$c==1 ww4 ww9 } } } } } } }
                 } in
                 case ww of wild {
                   Types.One
                   -> case ww5 of wild1 {
                        Types.One -> $j Types.Two -> GHC.Types.False }
                   Types.Two
                   -> case ww5 of wild1 {
                        Types.One -> GHC.Types.False Types.Two -> $j } }) -}
c0031e99443a778546ec88adb93abf46
  $w$c==2 ::
    [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: [Types.Card])
                   (ww1 :: [Types.Card])
                   (ww2 :: Types.FieldState)
                   (ww3 :: [Types.Card])
                   (ww4 :: [Types.Card])
                   (ww5 :: Types.FieldState) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.Card
                        Types.$fEqCard
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Card
                             Types.$fEqCard
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Types.$fEqField_$c==1 ww2 ww5 } }) -}
ad4187b088851475cc232edfc942111e
  $w$c==3 ::
    [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: [Types.Field])
                   (ww1 :: [Types.Card])
                   (ww2 :: [Types.StateChanges])
                   (ww3 :: [Types.Field])
                   (ww4 :: [Types.Card])
                   (ww5 :: [Types.StateChanges]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.Field
                        Types.$fEqField
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Card
                             Types.$fEqCard
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ Types.StateChanges
                             Types.$fEqStateChanges
                             ww2
                             ww5 } }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Card r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
c8cdec4f81461579f3a3dca017dd8d3a
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Changes r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Changes r) ->
                 Data.Binary.Class.$w$cget13
                   @ Types.StateChanges
                   Types.$fBinaryStateChanges
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Types.StateChanges])[OneShot] ->
                    w i' (Types.Changes a1))) -}
ee17e162b8535913eb100e5543bca10b
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.StateChanges r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
5cb96aac309a684ee212dd5fdbb25930
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Command r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Command r) ->
                 let {
                   lvl6 :: Data.ByteString.Internal.ByteString
                           -> Types.Player -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Types.Player)[OneShot] ->
                     w i' (Types.Win a1)
                 } in
                 let {
                   lvl7 :: Data.ByteString.Internal.ByteString
                           -> Types.Card -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Types.Card)[OneShot] ->
                     w i' (Types.Take a1)
                 } in
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,1*U>, Inline: [2] -}
                   = \ (w1 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     case ww4 of wild {
                       DEFAULT -> w w1 Types.EmptyCommand
                       0## -> w w1 Types.Put
                       1##
                       -> case w1 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                          Types.$w$cget @ r ww6 ww7 ww8 ww9 lvl7 }
                       2##
                       -> case w1 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                          Types.$w$cget4 @ r ww6 ww7 ww8 ww9 lvl6 } }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Types.$fBinaryCommand9
                        Types.$fBinaryCommand8
                        Types.$fBinaryCommand7
                        Types.$fBinaryCommand4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        ipv1 } } }) -}
31ba73326e5209545eb7e8d451ba07b2
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Player r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Types.Player r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Types.$fBinaryCommand9
                        Types.$fBinaryCommand8
                        Types.$fBinaryCommand7
                        Types.$fBinaryCommand4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Types.Two
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Types.One } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Types.Two
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Types.One } } } }) -}
3cea272f3448558818f3330a2bef7932
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Types.Turn r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
c6bb4656bb43468bf44c742671e7eb0c
  $w$cput ::
    Types.Suit
    -> GHC.Types.Int
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [2] -}
ee17e162b8535913eb100e5543bca10b
  $w$cput1 ::
    Types.StateChanges
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
5cb96aac309a684ee212dd5fdbb25930
  $w$cput2 ::
    Types.Command -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Command) ->
                 case w of wild {
                   Types.Put
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryCommand2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.Take c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.Win p
                   -> (# case p of wild1 { DEFAULT -> GHC.Tuple.() },
                         (\ @ r
                            (x :: Data.ByteString.Builder.Internal.BuildStep r)
                            (eta :: Data.ByteString.Builder.Internal.BufferRange)
                            (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     2##
                                     eta2 of s2 { DEFAULT ->
                              (x (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          let {
                            lvl7 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta2 of s2 { DEFAULT ->
                              (x (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                            DEFAULT
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      2##
                                      eta1 of s2 { DEFAULT ->
                               let {
                                 karg :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 1#
                               } in
                               case p of wild2 {
                                 Types.One
                                 -> case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 karg) 1# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                karg
                                                0#
                                                1##
                                                s2 of s1 { DEFAULT ->
                                         (x (Data.ByteString.Builder.Internal.BufferRange
                                               (GHC.Prim.plusAddr# karg 1#)
                                               dt1))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s1 }
                                      1#
                                      -> (# s2,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              karg
                                              lvl7
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) }
                                 Types.Two
                                 -> case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 karg) 1# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                karg
                                                0#
                                                2##
                                                s2 of s1 { DEFAULT ->
                                         (x (Data.ByteString.Builder.Internal.BufferRange
                                               (GHC.Prim.plusAddr# karg 1#)
                                               dt1))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s1 }
                                      1#
                                      -> (# s2,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              karg
                                              lvl6
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) } } }
                            1#
                            -> (# eta1,
                                  Data.ByteString.Builder.Internal.BufferFull
                                    @ r
                                    1#
                                    dt
                                    (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            2##
                                            eta2 of s2 { DEFAULT ->
                                     let {
                                       karg :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 1#
                                     } in
                                     case p of wild3 {
                                       Types.One
                                       -> case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# dt3 karg)
                                                 1# of lwild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      karg
                                                      0#
                                                      1##
                                                      s2 of s1 { DEFAULT ->
                                               (x (Data.ByteString.Builder.Internal.BufferRange
                                                     (GHC.Prim.plusAddr# karg 1#)
                                                     dt3))
                                                 `cast`
                                               (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)
                                                 s1 }
                                            1#
                                            -> (# s2,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r
                                                    1#
                                                    karg
                                                    lvl7
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r>_R)) #) }
                                       Types.Two
                                       -> case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# dt3 karg)
                                                 1# of lwild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      karg
                                                      0#
                                                      2##
                                                      s2 of s1 { DEFAULT ->
                                               (x (Data.ByteString.Builder.Internal.BufferRange
                                                     (GHC.Prim.plusAddr# karg 1#)
                                                     dt3))
                                                 `cast`
                                               (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)
                                                 s1 }
                                            1#
                                            -> (# s2,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r
                                                    1#
                                                    karg
                                                    lvl6
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r>_R)) #) } } } })
                                      `cast`
                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)) #) } })
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.EmptyCommand
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryCommand1
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
3cea272f3448558818f3330a2bef7932
  $w$cput3 ::
    Types.Turn -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Turn) ->
                 case w of wild {
                   Types.PutCard f4 p c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r ->
                          let {
                            f5 :: Data.ByteString.Builder.Internal.BuildStep r
                                  -> Data.ByteString.Builder.Internal.BuildStep r
                            = case Data.Binary.Class.$w$cput9 f4 of ww { (#,#) ww1 ww2 ->
                              ww2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                          } in
                          \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = f5
                                (case p of wild1 {
                                   Types.One
                                   -> let {
                                        w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        = case k `cast`
                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild2 { Data.Binary.Put.PairS b1 w' ->
                                          w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                            @ r
                                            x }
                                      } in
                                      (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w2 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                       Types.$wlvl3 @ r w1 ww1 ww2 w3 })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R))
                                   Types.Two
                                   -> let {
                                        w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        = case k `cast`
                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild2 { Data.Binary.Put.PairS b1 w' ->
                                          w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                            @ r
                                            x }
                                      } in
                                      (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w2 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                       Types.$wlvl2 @ r w1 ww1 ww2 w3 })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)) })
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.FinishTurn
                   -> (# GHC.Tuple.(),
                         Types.$fBinaryPlayer2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Types.TakeCard c
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case c of ww { Types.Card ww1 ww2 ->
                          case Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl6
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
671a13decec96bc3a02da88533b54a82
  $w$cshow :: Types.Suit -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: Types.Suit) (ww1 :: GHC.Types.Int) ->
                 GHC.CString.unpackAppendCString#
                   Types.$fShowCard14
                   (Types.$w$cshowsPrec1
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 11#
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))) -}
56ca038bf60af35896986ea2ea562c51
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.Suit
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Suit)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Types.$fShowCard14
                       (Types.$w$cshowsPrec1
                          ww1
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of ww3 { GHC.Types.I# ww4 ->
                              case GHC.Show.$wshowSignedInt 11# ww4 x of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
c6aaad662d2e2042df94e10c8a1f0cc2
  $w$cshowsPrec1 :: Types.Suit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: Types.Suit) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.Red -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard12 w1
                   Types.Blue -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard10 w1
                   Types.Yellow -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard8 w1
                   Types.Green -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard6 w1
                   Types.White -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard4 w1
                   Types.Black
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowCard2 w1 }) -}
79123c30ba42c4a3d51d8a9ad1995dc8
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [Types.StateChanges] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.StateChanges])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Types.$fShowChanges2
                       (case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Types.$w$cshowsPrec3
                                  0#
                                  x1
                                  (let {
                                     lvl43 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                   } in
                                   letrec {
                                     showl :: [Types.StateChanges] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Types.StateChanges]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl43
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Types.$w$cshowsPrec3 0# y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
ee17e162b8535913eb100e5543bca10b
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Types.StateChanges -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
b123ec6b3fc5bd134ec4d181d21d4ba7
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Types.Player
    -> Network.Socket.Types.Socket
    -> [Types.Field]
    -> [Types.Card]
    -> Types.TurnState
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U><L,U(U(U),A,A,A,A)><L,U><L,U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Player)
                   (ww2 :: Network.Socket.Types.Socket)
                   (ww3 :: [Types.Field])
                   (ww4 :: [Types.Card])
                   (ww5 :: Types.TurnState) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Types.$fShowClientState_$cshowsPrec1
                       Types.$fShowClientState11
                       ww5
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     let {
                       karg :: [GHC.Types.Char]
                       = case ww2 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                         Network.Socket.Types.$w$cshowsPrec1
                           ww7
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showList__
                                 @ Types.Field
                                 Types.$fShowClientState8
                                 ww3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (GHC.Show.showList__
                                       @ Types.Card
                                       Types.$fShowCard1
                                       ww4
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.showSpace1
                                          (g x)))))) }
                     } in
                     case ww1 of wild {
                       Types.One
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowClientState6
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 karg)
                       Types.Two
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowClientState4
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 karg) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState2 (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowClientState2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
79f474c43fb1bbbb26606f841303312d
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> [Types.Card]
    -> [Types.Card]
    -> Types.FieldState
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.Card])
                   (ww2 :: [Types.Card])
                   (ww3 :: Types.FieldState)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ Types.Card
                       Types.$fShowCard1
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Types.Card
                             Types.$fShowCard1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Types.$fShowClientState_$cshowsPrec
                                   Types.$fShowClientState11
                                   ww3
                                   x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowClientState9 (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowClientState9
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
7a578f69626ef655b98f1cbac3ae71ad
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Types.Combo -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,1*U><L,U>,
     Inline: [2] -}
3a9ff2859e813d9b51289b78a7a324e1
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> [Types.Field]
    -> [Types.Card]
    -> [Types.StateChanges]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.Field])
                   (ww2 :: [Types.Card])
                   (ww3 :: [Types.StateChanges])
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ Types.Field
                       Types.$fShowClientState8
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Types.Card
                             Types.$fShowCard1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Types.$fShowStateChanges_$cshowList ww3 x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> GHC.Base.++ @ GHC.Types.Char Types.$fShowWorld2 (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowWorld2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
61c18a4cb65d39994347468da15e1c86
  $wlvl ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             3##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   3##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
4df224744d41ee1796e779c3d45173af
  $wlvl1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
9be4fd6711e4cb3fb9471672a8fcf654
  $wlvl2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             2##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   2##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
f2fc13abb5bad8443ca800aa40c35267
  $wlvl3 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
e0f58c3cad8c4e390d59f73d44aec0aa
  data Card = Card Types.Suit GHC.Types.Int
c8cdec4f81461579f3a3dca017dd8d3a
  data Changes = Changes [Types.StateChanges]
92a56bc449287a32dfbff349ccb8abf5
  data ClientState
    = ClientState Types.Player
                  Network.Socket.Types.Socket
                  [Types.Field]
                  [Types.Card]
                  Types.TurnState
7a578f69626ef655b98f1cbac3ae71ad
  data Combo
    = Host GHC.Types.Int
    | Skirmish GHC.Types.Int
    | Batallion GHC.Types.Int
    | Phalanx GHC.Types.Int
    | Wedge GHC.Types.Int
5cb96aac309a684ee212dd5fdbb25930
  data Command
    = Put | Take Types.Card | Win Types.Player | EmptyCommand
02d0b769e45d511e621211e0ee648c51
  data Field = Field [Types.Card] [Types.Card] Types.FieldState
3250b0de31069931509c82f9abf291a6
  data FieldState = Closed Types.Player | Open
31ba73326e5209545eb7e8d451ba07b2
  data Player = One | Two
ee17e162b8535913eb100e5543bca10b
  data StateChanges
    = NewCard GHC.Types.Int Types.Player Types.Card
    | FieldClosed GHC.Types.Int Types.Player
    | Winner Types.Player
c6aaad662d2e2042df94e10c8a1f0cc2
  data Suit = Red | Blue | Yellow | Green | White | Black
3cea272f3448558818f3330a2bef7932
  data Turn
    = PutCard GHC.Types.Int Types.Player Types.Card
    | FinishTurn
    | TakeCard Types.Card
75addb716e493a16074269a20e29c6f5
  data TurnState
    = PutCardTurn (GHC.Maybe.Maybe Types.Card)
    | EmptyState
    | GameFinished Types.Player
b44e6caa2182449d4423675a70b44ba3
  data World = World [Types.Field] [Types.Card] [Types.StateChanges]
371abfee57525cb1bd7cdda83a96cd0c
  defaultCard :: Types.Card
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Card Types.Black Types.$fShowChanges3) -}
904dc4e91088d91b35a6494b0eee8ce2
  messageSize :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10000#) -}
instance Data.Binary.Class.Binary [Types.Card] = Types.$fBinaryCard
instance Data.Binary.Class.Binary [Types.Changes]
  = Types.$fBinaryChanges
instance Data.Binary.Class.Binary [Types.Command]
  = Types.$fBinaryCommand
instance Data.Binary.Class.Binary [Types.Player]
  = Types.$fBinaryPlayer
instance Data.Binary.Class.Binary [Types.StateChanges]
  = Types.$fBinaryStateChanges
instance Data.Binary.Class.Binary [Types.Turn] = Types.$fBinaryTurn
instance GHC.Classes.Eq [Types.Card] = Types.$fEqCard
instance GHC.Classes.Eq [Types.Changes] = Types.$fEqChanges
instance GHC.Classes.Eq [Types.ClientState] = Types.$fEqClientState
instance GHC.Classes.Eq [Types.Combo] = Types.$fEqCombo
instance GHC.Classes.Eq [Types.Command] = Types.$fEqCommand
instance GHC.Classes.Eq [Types.Field] = Types.$fEqField
instance GHC.Classes.Eq [Types.FieldState] = Types.$fEqFieldState
instance GHC.Classes.Eq [Types.Player] = Types.$fEqPlayer
instance GHC.Classes.Eq [Types.StateChanges]
  = Types.$fEqStateChanges
instance GHC.Classes.Eq [Types.Suit] = Types.$fEqSuit
instance GHC.Classes.Eq [Types.Turn] = Types.$fEqTurn
instance GHC.Classes.Eq [Types.TurnState] = Types.$fEqTurnState
instance GHC.Classes.Eq [Types.World] = Types.$fEqWorld
instance GHC.Classes.Ord [Types.Combo] = Types.$fOrdCombo
instance GHC.Show.Show [Types.Card] = Types.$fShowCard
instance GHC.Show.Show [Types.Changes] = Types.$fShowChanges
instance GHC.Show.Show [Types.ClientState]
  = Types.$fShowClientState
instance GHC.Show.Show [Types.Combo] = Types.$fShowCombo
instance GHC.Show.Show [Types.Command] = Types.$fShowCommand
instance GHC.Show.Show [Types.Field] = Types.$fShowField
instance GHC.Show.Show [Types.FieldState] = Types.$fShowFieldState
instance GHC.Show.Show [Types.Player] = Types.$fShowPlayer
instance GHC.Show.Show [Types.StateChanges]
  = Types.$fShowStateChanges
instance GHC.Show.Show [Types.Suit] = Types.$fShowSuit
instance GHC.Show.Show [Types.Turn] = Types.$fShowTurn
instance GHC.Show.Show [Types.TurnState] = Types.$fShowTurnState
instance GHC.Show.Show [Types.World] = Types.$fShowWorld
"SPEC/Types defaultPutList @ Card" forall ($dBinary :: Data.Binary.Class.Binary
                                                         Types.Card)
  Data.Binary.Class.defaultPutList @ Types.Card $dBinary
  = Types.$fBinaryCard_$sdefaultPutList
"SPEC/Types defaultPutList @ Changes" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Types.Changes)
  Data.Binary.Class.defaultPutList @ Types.Changes $dBinary
  = Types.$fBinaryChanges_$sdefaultPutList
"SPEC/Types defaultPutList @ Command" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Types.Command)
  Data.Binary.Class.defaultPutList @ Types.Command $dBinary
  = Types.$fBinaryCommand_$sdefaultPutList
"SPEC/Types defaultPutList @ Player" forall ($dBinary :: Data.Binary.Class.Binary
                                                           Types.Player)
  Data.Binary.Class.defaultPutList @ Types.Player $dBinary
  = Types.$fBinaryPlayer_$sdefaultPutList
"SPEC/Types defaultPutList @ StateChanges" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Types.StateChanges)
  Data.Binary.Class.defaultPutList @ Types.StateChanges $dBinary
  = Types.$fBinaryChanges_$sdefaultPutList1
"SPEC/Types defaultPutList @ Turn" forall ($dBinary :: Data.Binary.Class.Binary
                                                         Types.Turn)
  Data.Binary.Class.defaultPutList @ Types.Turn $dBinary
  = Types.$fBinaryTurn_$sdefaultPutList
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

